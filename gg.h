#pragma once

/*
** ゲームグラフィックス特論用補助プログラム GLFW3 版
**

Copyright (c) 2011, 2012, 2013, 2014 Kohe Tokoi. All Rights Reserved.

Permission is hereby granted, free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction,  including without limitation the rights
to use, copy,  modify, merge,  publish, distribute,  sublicense,  and/or sell
copies or substantial portions of the Software.

The above  copyright notice  and this permission notice  shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING  BUT  NOT LIMITED  TO THE WARRANTIES  OF MERCHANTABILITY,
FITNESS  FOR  A PARTICULAR PURPOSE  AND NONINFRINGEMENT.  IN  NO EVENT  SHALL
KOHE TOKOI  BE LIABLE FOR ANY CLAIM,  DAMAGES OR OTHER LIABILITY,  WHETHER IN
AN ACTION  OF CONTRACT,  TORT  OR  OTHERWISE,  ARISING  FROM,  OUT OF  OR  IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**
*/

#if defined(_WIN32)
#  pragma warning(disable:4996)
#  if defined(_DEBUG)
#    define GLFW3_EXT_STR "d.lib"
#  else
#    define GLFW3_EXT_STR ".lib"
#  endif
#  if defined(_WIN64)
#    pragma comment(lib, "glfw3-64" GLFW3_EXT_STR)
#  else
#    pragma comment(lib, "glfw3" GLFW3_EXT_STR)
#  endif
#  pragma comment(lib, "opengl32.lib")
#  include "glfw3.h"
#  include "glext.h"
extern PFNGLBLENDCOLORPROC glBlendColor;
extern PFNGLBLENDEQUATIONPROC glBlendEquation;
extern PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
extern PFNGLTEXIMAGE3DPROC glTexImage3D;
extern PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
extern PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
extern PFNGLCOLORTABLEPROC glColorTable;
extern PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
extern PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
extern PFNGLCOPYCOLORTABLEPROC glCopyColorTable;
extern PFNGLGETCOLORTABLEPROC glGetColorTable;
extern PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
extern PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
extern PFNGLCOLORSUBTABLEPROC glColorSubTable;
extern PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable;
extern PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D;
extern PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D;
extern PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
extern PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
extern PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
extern PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
extern PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D;
extern PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D;
extern PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter;
extern PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
extern PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
extern PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter;
extern PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D;
extern PFNGLGETHISTOGRAMPROC glGetHistogram;
extern PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv;
extern PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv;
extern PFNGLGETMINMAXPROC glGetMinmax;
extern PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv;
extern PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv;
extern PFNGLHISTOGRAMPROC glHistogram;
extern PFNGLMINMAXPROC glMinmax;
extern PFNGLRESETHISTOGRAMPROC glResetHistogram;
extern PFNGLRESETMINMAXPROC glResetMinmax;
extern PFNGLACTIVETEXTUREPROC glActiveTexture;
extern PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
extern PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
extern PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
extern PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
extern PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
extern PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
extern PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
extern PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
extern PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
extern PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
extern PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
extern PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
extern PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
extern PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
extern PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
extern PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
extern PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
extern PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
extern PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
extern PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
extern PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
extern PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
extern PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
extern PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
extern PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
extern PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
extern PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
extern PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
extern PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
extern PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
extern PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
extern PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
extern PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
extern PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
extern PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
extern PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
extern PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
extern PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
extern PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
extern PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
extern PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
extern PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;
extern PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
extern PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
extern PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
extern PFNGLPOINTPARAMETERFPROC glPointParameterf;
extern PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
extern PFNGLPOINTPARAMETERIPROC glPointParameteri;
extern PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
extern PFNGLFOGCOORDFPROC glFogCoordf;
extern PFNGLFOGCOORDFVPROC glFogCoordfv;
extern PFNGLFOGCOORDDPROC glFogCoordd;
extern PFNGLFOGCOORDDVPROC glFogCoorddv;
extern PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
extern PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
extern PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
extern PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
extern PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
extern PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
extern PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
extern PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
extern PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
extern PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
extern PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
extern PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
extern PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
extern PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
extern PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
extern PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
extern PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
extern PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
extern PFNGLWINDOWPOS2DPROC glWindowPos2d;
extern PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
extern PFNGLWINDOWPOS2FPROC glWindowPos2f;
extern PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
extern PFNGLWINDOWPOS2IPROC glWindowPos2i;
extern PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
extern PFNGLWINDOWPOS2SPROC glWindowPos2s;
extern PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
extern PFNGLWINDOWPOS3DPROC glWindowPos3d;
extern PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
extern PFNGLWINDOWPOS3FPROC glWindowPos3f;
extern PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
extern PFNGLWINDOWPOS3IPROC glWindowPos3i;
extern PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
extern PFNGLWINDOWPOS3SPROC glWindowPos3s;
extern PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
extern PFNGLGENQUERIESPROC glGenQueries;
extern PFNGLDELETEQUERIESPROC glDeleteQueries;
extern PFNGLISQUERYPROC glIsQuery;
extern PFNGLBEGINQUERYPROC glBeginQuery;
extern PFNGLENDQUERYPROC glEndQuery;
extern PFNGLGETQUERYIVPROC glGetQueryiv;
extern PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
extern PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
extern PFNGLBINDBUFFERPROC glBindBuffer;
extern PFNGLDELETEBUFFERSPROC glDeleteBuffers;
extern PFNGLGENBUFFERSPROC glGenBuffers;
extern PFNGLISBUFFERPROC glIsBuffer;
extern PFNGLBUFFERDATAPROC glBufferData;
extern PFNGLBUFFERSUBDATAPROC glBufferSubData;
extern PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
extern PFNGLMAPBUFFERPROC glMapBuffer;
extern PFNGLUNMAPBUFFERPROC glUnmapBuffer;
extern PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
extern PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
extern PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
extern PFNGLDRAWBUFFERSPROC glDrawBuffers;
extern PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
extern PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
extern PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
extern PFNGLATTACHSHADERPROC glAttachShader;
extern PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
extern PFNGLCOMPILESHADERPROC glCompileShader;
extern PFNGLCREATEPROGRAMPROC glCreateProgram;
extern PFNGLCREATESHADERPROC glCreateShader;
extern PFNGLDELETEPROGRAMPROC glDeleteProgram;
extern PFNGLDELETESHADERPROC glDeleteShader;
extern PFNGLDETACHSHADERPROC glDetachShader;
extern PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
extern PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
extern PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
extern PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
extern PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
extern PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
extern PFNGLGETPROGRAMIVPROC glGetProgramiv;
extern PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
extern PFNGLGETSHADERIVPROC glGetShaderiv;
extern PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
extern PFNGLGETSHADERSOURCEPROC glGetShaderSource;
extern PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
extern PFNGLGETUNIFORMFVPROC glGetUniformfv;
extern PFNGLGETUNIFORMIVPROC glGetUniformiv;
extern PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
extern PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
extern PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
extern PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
extern PFNGLISPROGRAMPROC glIsProgram;
extern PFNGLISSHADERPROC glIsShader;
extern PFNGLLINKPROGRAMPROC glLinkProgram;
extern PFNGLSHADERSOURCEPROC glShaderSource;
extern PFNGLUSEPROGRAMPROC glUseProgram;
extern PFNGLUNIFORM1FPROC glUniform1f;
extern PFNGLUNIFORM2FPROC glUniform2f;
extern PFNGLUNIFORM3FPROC glUniform3f;
extern PFNGLUNIFORM4FPROC glUniform4f;
extern PFNGLUNIFORM1IPROC glUniform1i;
extern PFNGLUNIFORM2IPROC glUniform2i;
extern PFNGLUNIFORM3IPROC glUniform3i;
extern PFNGLUNIFORM4IPROC glUniform4i;
extern PFNGLUNIFORM1FVPROC glUniform1fv;
extern PFNGLUNIFORM2FVPROC glUniform2fv;
extern PFNGLUNIFORM3FVPROC glUniform3fv;
extern PFNGLUNIFORM4FVPROC glUniform4fv;
extern PFNGLUNIFORM1IVPROC glUniform1iv;
extern PFNGLUNIFORM2IVPROC glUniform2iv;
extern PFNGLUNIFORM3IVPROC glUniform3iv;
extern PFNGLUNIFORM4IVPROC glUniform4iv;
extern PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
extern PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
extern PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
extern PFNGLVALIDATEPROGRAMPROC glValidateProgram;
extern PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
extern PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
extern PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
extern PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
extern PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
extern PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
extern PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
extern PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
extern PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
extern PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
extern PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
extern PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
extern PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
extern PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
extern PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
extern PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
extern PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
extern PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
extern PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
extern PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
extern PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
extern PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
extern PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
extern PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
extern PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
extern PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
extern PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
extern PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
extern PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
extern PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
extern PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
extern PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
extern PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
extern PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
extern PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
extern PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
extern PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
extern PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
extern PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
extern PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
extern PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
extern PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
extern PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
extern PFNGLCOLORMASKIPROC glColorMaski;
extern PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
extern PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
extern PFNGLENABLEIPROC glEnablei;
extern PFNGLDISABLEIPROC glDisablei;
extern PFNGLISENABLEDIPROC glIsEnabledi;
extern PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
extern PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
extern PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
extern PFNGLBINDBUFFERBASEPROC glBindBufferBase;
extern PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
extern PFNGLCLAMPCOLORPROC glClampColor;
extern PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
extern PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
extern PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
extern PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
extern PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
extern PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
extern PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
extern PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
extern PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
extern PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
extern PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
extern PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
extern PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
extern PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
extern PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
extern PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
extern PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
extern PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
extern PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
extern PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
extern PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
extern PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
extern PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
extern PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
extern PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
extern PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
extern PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
extern PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
extern PFNGLUNIFORM1UIPROC glUniform1ui;
extern PFNGLUNIFORM2UIPROC glUniform2ui;
extern PFNGLUNIFORM3UIPROC glUniform3ui;
extern PFNGLUNIFORM4UIPROC glUniform4ui;
extern PFNGLUNIFORM1UIVPROC glUniform1uiv;
extern PFNGLUNIFORM2UIVPROC glUniform2uiv;
extern PFNGLUNIFORM3UIVPROC glUniform3uiv;
extern PFNGLUNIFORM4UIVPROC glUniform4uiv;
extern PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
extern PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
extern PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
extern PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
extern PFNGLCLEARBUFFERIVPROC glClearBufferiv;
extern PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
extern PFNGLCLEARBUFFERFVPROC glClearBufferfv;
extern PFNGLCLEARBUFFERFIPROC glClearBufferfi;
extern PFNGLGETSTRINGIPROC glGetStringi;
extern PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
extern PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
extern PFNGLTEXBUFFERPROC glTexBuffer;
extern PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
extern PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
extern PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
extern PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
extern PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
extern PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
extern PFNGLBLENDEQUATIONIPROC glBlendEquationi;
extern PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
extern PFNGLBLENDFUNCIPROC glBlendFunci;
extern PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
extern PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
extern PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB;
extern PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB;
extern PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB;
extern PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB;
extern PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB;
extern PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB;
extern PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB;
extern PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB;
extern PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB;
extern PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB;
extern PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB;
extern PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB;
extern PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB;
extern PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB;
extern PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB;
extern PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB;
extern PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB;
extern PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB;
extern PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB;
extern PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB;
extern PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB;
extern PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB;
extern PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB;
extern PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB;
extern PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB;
extern PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB;
extern PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB;
extern PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;
extern PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB;
extern PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB;
extern PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB;
extern PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB;
extern PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB;
extern PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB;
extern PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB;
extern PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB;
extern PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB;
extern PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB;
extern PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB;
extern PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB;
extern PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB;
extern PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB;
extern PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB;
extern PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB;
extern PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB;
extern PFNGLWEIGHTBVARBPROC glWeightbvARB;
extern PFNGLWEIGHTSVARBPROC glWeightsvARB;
extern PFNGLWEIGHTIVARBPROC glWeightivARB;
extern PFNGLWEIGHTFVARBPROC glWeightfvARB;
extern PFNGLWEIGHTDVARBPROC glWeightdvARB;
extern PFNGLWEIGHTUBVARBPROC glWeightubvARB;
extern PFNGLWEIGHTUSVARBPROC glWeightusvARB;
extern PFNGLWEIGHTUIVARBPROC glWeightuivARB;
extern PFNGLWEIGHTPOINTERARBPROC glWeightPointerARB;
extern PFNGLVERTEXBLENDARBPROC glVertexBlendARB;
extern PFNGLCURRENTPALETTEMATRIXARBPROC glCurrentPaletteMatrixARB;
extern PFNGLMATRIXINDEXUBVARBPROC glMatrixIndexubvARB;
extern PFNGLMATRIXINDEXUSVARBPROC glMatrixIndexusvARB;
extern PFNGLMATRIXINDEXUIVARBPROC glMatrixIndexuivARB;
extern PFNGLMATRIXINDEXPOINTERARBPROC glMatrixIndexPointerARB;
extern PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB;
extern PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB;
extern PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB;
extern PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB;
extern PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB;
extern PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB;
extern PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB;
extern PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB;
extern PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB;
extern PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB;
extern PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB;
extern PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB;
extern PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB;
extern PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB;
extern PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB;
extern PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB;
extern PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB;
extern PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB;
extern PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB;
extern PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB;
extern PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB;
extern PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB;
extern PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB;
extern PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB;
extern PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB;
extern PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB;
extern PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB;
extern PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB;
extern PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB;
extern PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB;
extern PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB;
extern PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB;
extern PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB;
extern PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB;
extern PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB;
extern PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB;
extern PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB;
extern PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB;
extern PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB;
extern PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB;
extern PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB;
extern PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB;
extern PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB;
extern PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB;
extern PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB;
extern PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB;
extern PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB;
extern PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB;
extern PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB;
extern PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB;
extern PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB;
extern PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB;
extern PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB;
extern PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB;
extern PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB;
extern PFNGLPROGRAMSTRINGARBPROC glProgramStringARB;
extern PFNGLBINDPROGRAMARBPROC glBindProgramARB;
extern PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB;
extern PFNGLGENPROGRAMSARBPROC glGenProgramsARB;
extern PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB;
extern PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB;
extern PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB;
extern PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB;
extern PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB;
extern PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB;
extern PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB;
extern PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB;
extern PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB;
extern PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB;
extern PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB;
extern PFNGLGETPROGRAMIVARBPROC glGetProgramivARB;
extern PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB;
extern PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB;
extern PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB;
extern PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB;
extern PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB;
extern PFNGLISPROGRAMARBPROC glIsProgramARB;
extern PFNGLBINDBUFFERARBPROC glBindBufferARB;
extern PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB;
extern PFNGLGENBUFFERSARBPROC glGenBuffersARB;
extern PFNGLISBUFFERARBPROC glIsBufferARB;
extern PFNGLBUFFERDATAARBPROC glBufferDataARB;
extern PFNGLBUFFERSUBDATAARBPROC glBufferSubDataARB;
extern PFNGLGETBUFFERSUBDATAARBPROC glGetBufferSubDataARB;
extern PFNGLMAPBUFFERARBPROC glMapBufferARB;
extern PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB;
extern PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB;
extern PFNGLGETBUFFERPOINTERVARBPROC glGetBufferPointervARB;
extern PFNGLGENQUERIESARBPROC glGenQueriesARB;
extern PFNGLDELETEQUERIESARBPROC glDeleteQueriesARB;
extern PFNGLISQUERYARBPROC glIsQueryARB;
extern PFNGLBEGINQUERYARBPROC glBeginQueryARB;
extern PFNGLENDQUERYARBPROC glEndQueryARB;
extern PFNGLGETQUERYIVARBPROC glGetQueryivARB;
extern PFNGLGETQUERYOBJECTIVARBPROC glGetQueryObjectivARB;
extern PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB;
extern PFNGLDELETEOBJECTARBPROC glDeleteObjectARB;
extern PFNGLGETHANDLEARBPROC glGetHandleARB;
extern PFNGLDETACHOBJECTARBPROC glDetachObjectARB;
extern PFNGLCREATESHADEROBJECTARBPROC glCreateShaderObjectARB;
extern PFNGLSHADERSOURCEARBPROC glShaderSourceARB;
extern PFNGLCOMPILESHADERARBPROC glCompileShaderARB;
extern PFNGLCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB;
extern PFNGLATTACHOBJECTARBPROC glAttachObjectARB;
extern PFNGLLINKPROGRAMARBPROC glLinkProgramARB;
extern PFNGLUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB;
extern PFNGLVALIDATEPROGRAMARBPROC glValidateProgramARB;
extern PFNGLUNIFORM1FARBPROC glUniform1fARB;
extern PFNGLUNIFORM2FARBPROC glUniform2fARB;
extern PFNGLUNIFORM3FARBPROC glUniform3fARB;
extern PFNGLUNIFORM4FARBPROC glUniform4fARB;
extern PFNGLUNIFORM1IARBPROC glUniform1iARB;
extern PFNGLUNIFORM2IARBPROC glUniform2iARB;
extern PFNGLUNIFORM3IARBPROC glUniform3iARB;
extern PFNGLUNIFORM4IARBPROC glUniform4iARB;
extern PFNGLUNIFORM1FVARBPROC glUniform1fvARB;
extern PFNGLUNIFORM2FVARBPROC glUniform2fvARB;
extern PFNGLUNIFORM3FVARBPROC glUniform3fvARB;
extern PFNGLUNIFORM4FVARBPROC glUniform4fvARB;
extern PFNGLUNIFORM1IVARBPROC glUniform1ivARB;
extern PFNGLUNIFORM2IVARBPROC glUniform2ivARB;
extern PFNGLUNIFORM3IVARBPROC glUniform3ivARB;
extern PFNGLUNIFORM4IVARBPROC glUniform4ivARB;
extern PFNGLUNIFORMMATRIX2FVARBPROC glUniformMatrix2fvARB;
extern PFNGLUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB;
extern PFNGLUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB;
extern PFNGLGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB;
extern PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB;
extern PFNGLGETINFOLOGARBPROC glGetInfoLogARB;
extern PFNGLGETATTACHEDOBJECTSARBPROC glGetAttachedObjectsARB;
extern PFNGLGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB;
extern PFNGLGETACTIVEUNIFORMARBPROC glGetActiveUniformARB;
extern PFNGLGETUNIFORMFVARBPROC glGetUniformfvARB;
extern PFNGLGETUNIFORMIVARBPROC glGetUniformivARB;
extern PFNGLGETSHADERSOURCEARBPROC glGetShaderSourceARB;
extern PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB;
extern PFNGLGETACTIVEATTRIBARBPROC glGetActiveAttribARB;
extern PFNGLGETATTRIBLOCATIONARBPROC glGetAttribLocationARB;
extern PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
extern PFNGLCLAMPCOLORARBPROC glClampColorARB;
extern PFNGLDRAWARRAYSINSTANCEDARBPROC glDrawArraysInstancedARB;
extern PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB;
extern PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
extern PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
extern PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
extern PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
extern PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
extern PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
extern PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
extern PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
extern PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
extern PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
extern PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
extern PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
extern PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
extern PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
extern PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
extern PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
extern PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
extern PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
extern PFNGLPROGRAMPARAMETERIARBPROC glProgramParameteriARB;
extern PFNGLFRAMEBUFFERTEXTUREARBPROC glFramebufferTextureARB;
extern PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB;
extern PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glFramebufferTextureFaceARB;
extern PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB;
extern PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
extern PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
extern PFNGLTEXBUFFERARBPROC glTexBufferARB;
extern PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
extern PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
extern PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
extern PFNGLISVERTEXARRAYPROC glIsVertexArray;
extern PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
extern PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
extern PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
extern PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
extern PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
extern PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
extern PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
extern PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
extern PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
extern PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
extern PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
extern PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
extern PFNGLFENCESYNCPROC glFenceSync;
extern PFNGLISSYNCPROC glIsSync;
extern PFNGLDELETESYNCPROC glDeleteSync;
extern PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
extern PFNGLWAITSYNCPROC glWaitSync;
extern PFNGLGETINTEGER64VPROC glGetInteger64v;
extern PFNGLGETSYNCIVPROC glGetSynciv;
extern PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
extern PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
extern PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
extern PFNGLSAMPLEMASKIPROC glSampleMaski;
extern PFNGLBLENDEQUATIONIARBPROC glBlendEquationiARB;
extern PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB;
extern PFNGLBLENDFUNCIARBPROC glBlendFunciARB;
extern PFNGLBLENDFUNCSEPARATEIARBPROC glBlendFuncSeparateiARB;
extern PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB;
extern PFNGLNAMEDSTRINGARBPROC glNamedStringARB;
extern PFNGLDELETENAMEDSTRINGARBPROC glDeleteNamedStringARB;
extern PFNGLCOMPILESHADERINCLUDEARBPROC glCompileShaderIncludeARB;
extern PFNGLISNAMEDSTRINGARBPROC glIsNamedStringARB;
extern PFNGLGETNAMEDSTRINGARBPROC glGetNamedStringARB;
extern PFNGLGETNAMEDSTRINGIVARBPROC glGetNamedStringivARB;
extern PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
extern PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
extern PFNGLGENSAMPLERSPROC glGenSamplers;
extern PFNGLDELETESAMPLERSPROC glDeleteSamplers;
extern PFNGLISSAMPLERPROC glIsSampler;
extern PFNGLBINDSAMPLERPROC glBindSampler;
extern PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
extern PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
extern PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
extern PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
extern PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
extern PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
extern PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
extern PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
extern PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
extern PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
extern PFNGLQUERYCOUNTERPROC glQueryCounter;
extern PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
extern PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
extern PFNGLVERTEXP2UIPROC glVertexP2ui;
extern PFNGLVERTEXP2UIVPROC glVertexP2uiv;
extern PFNGLVERTEXP3UIPROC glVertexP3ui;
extern PFNGLVERTEXP3UIVPROC glVertexP3uiv;
extern PFNGLVERTEXP4UIPROC glVertexP4ui;
extern PFNGLVERTEXP4UIVPROC glVertexP4uiv;
extern PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
extern PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
extern PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
extern PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
extern PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
extern PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
extern PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
extern PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
extern PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
extern PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
extern PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
extern PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
extern PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
extern PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
extern PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
extern PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
extern PFNGLNORMALP3UIPROC glNormalP3ui;
extern PFNGLNORMALP3UIVPROC glNormalP3uiv;
extern PFNGLCOLORP3UIPROC glColorP3ui;
extern PFNGLCOLORP3UIVPROC glColorP3uiv;
extern PFNGLCOLORP4UIPROC glColorP4ui;
extern PFNGLCOLORP4UIVPROC glColorP4uiv;
extern PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
extern PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;
extern PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
extern PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
extern PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
extern PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
extern PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
extern PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
extern PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
extern PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
extern PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
extern PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
extern PFNGLUNIFORM1DPROC glUniform1d;
extern PFNGLUNIFORM2DPROC glUniform2d;
extern PFNGLUNIFORM3DPROC glUniform3d;
extern PFNGLUNIFORM4DPROC glUniform4d;
extern PFNGLUNIFORM1DVPROC glUniform1dv;
extern PFNGLUNIFORM2DVPROC glUniform2dv;
extern PFNGLUNIFORM3DVPROC glUniform3dv;
extern PFNGLUNIFORM4DVPROC glUniform4dv;
extern PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
extern PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
extern PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
extern PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
extern PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
extern PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
extern PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
extern PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
extern PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
extern PFNGLGETUNIFORMDVPROC glGetUniformdv;
extern PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
extern PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
extern PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
extern PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
extern PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
extern PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
extern PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
extern PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
extern PFNGLPATCHPARAMETERIPROC glPatchParameteri;
extern PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
extern PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
extern PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
extern PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
extern PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
extern PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
extern PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
extern PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
extern PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
extern PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
extern PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
extern PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
extern PFNGLSHADERBINARYPROC glShaderBinary;
extern PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
extern PFNGLDEPTHRANGEFPROC glDepthRangef;
extern PFNGLCLEARDEPTHFPROC glClearDepthf;
extern PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
extern PFNGLPROGRAMBINARYPROC glProgramBinary;
extern PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
extern PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
extern PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
extern PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
extern PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
extern PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
extern PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
extern PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
extern PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
extern PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
extern PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
extern PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
extern PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
extern PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
extern PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
extern PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
extern PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
extern PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
extern PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
extern PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
extern PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
extern PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
extern PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
extern PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
extern PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
extern PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
extern PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
extern PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
extern PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
extern PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
extern PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
extern PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
extern PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
extern PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
extern PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
extern PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
extern PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
extern PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
extern PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
extern PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
extern PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
extern PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
extern PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
extern PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
extern PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
extern PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
extern PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
extern PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
extern PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
extern PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
extern PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
extern PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
extern PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
extern PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
extern PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
extern PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
extern PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
extern PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
extern PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
extern PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
extern PFNGLSCISSORARRAYVPROC glScissorArrayv;
extern PFNGLSCISSORINDEXEDPROC glScissorIndexed;
extern PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
extern PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
extern PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
extern PFNGLGETFLOATI_VPROC glGetFloati_v;
extern PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
extern PFNGLCREATESYNCFROMCLEVENTARBPROC glCreateSyncFromCLeventARB;
extern PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB;
extern PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB;
extern PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB;
extern PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB;
extern PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
extern PFNGLGETNMAPDVARBPROC glGetnMapdvARB;
extern PFNGLGETNMAPFVARBPROC glGetnMapfvARB;
extern PFNGLGETNMAPIVARBPROC glGetnMapivARB;
extern PFNGLGETNPIXELMAPFVARBPROC glGetnPixelMapfvARB;
extern PFNGLGETNPIXELMAPUIVARBPROC glGetnPixelMapuivARB;
extern PFNGLGETNPIXELMAPUSVARBPROC glGetnPixelMapusvARB;
extern PFNGLGETNPOLYGONSTIPPLEARBPROC glGetnPolygonStippleARB;
extern PFNGLGETNCOLORTABLEARBPROC glGetnColorTableARB;
extern PFNGLGETNCONVOLUTIONFILTERARBPROC glGetnConvolutionFilterARB;
extern PFNGLGETNSEPARABLEFILTERARBPROC glGetnSeparableFilterARB;
extern PFNGLGETNHISTOGRAMARBPROC glGetnHistogramARB;
extern PFNGLGETNMINMAXARBPROC glGetnMinmaxARB;
extern PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
extern PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
extern PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
extern PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
extern PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
extern PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
extern PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
extern PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
extern PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
extern PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
extern PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
extern PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
extern PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
extern PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
extern PFNGLMEMORYBARRIERPROC glMemoryBarrier;
extern PFNGLTEXSTORAGE1DPROC glTexStorage1D;
extern PFNGLTEXSTORAGE2DPROC glTexStorage2D;
extern PFNGLTEXSTORAGE3DPROC glTexStorage3D;
extern PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT;
extern PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT;
extern PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT;
extern PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
extern PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
extern PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
extern PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
extern PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
extern PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
extern PFNGLOBJECTLABELPROC glObjectLabel;
extern PFNGLGETOBJECTLABELPROC glGetObjectLabel;
extern PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
extern PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
extern PFNGLCLEARBUFFERDATAPROC glClearBufferData;
extern PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
extern PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT;
extern PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT;
extern PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
extern PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
extern PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
extern PFNGLTEXTUREVIEWPROC glTextureView;
extern PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
extern PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
extern PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
extern PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
extern PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
extern PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
extern PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glVertexArrayBindVertexBufferEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glVertexArrayVertexAttribFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glVertexArrayVertexAttribIFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glVertexArrayVertexAttribLFormatEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glVertexArrayVertexAttribBindingEXT;
extern PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT;
extern PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
extern PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
extern PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glNamedFramebufferParameteriEXT;
extern PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT;
extern PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
extern PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
extern PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
extern PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
extern PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
extern PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
extern PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
extern PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
extern PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
extern PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
extern PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
extern PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
extern PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
extern PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
extern PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
extern PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
extern PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
extern PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT;
extern PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
extern PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
extern PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT;
extern PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT;
extern PFNGLBLENDCOLOREXTPROC glBlendColorEXT;
extern PFNGLPOLYGONOFFSETEXTPROC glPolygonOffsetEXT;
extern PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT;
extern PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT;
extern PFNGLGETTEXFILTERFUNCSGISPROC glGetTexFilterFuncSGIS;
extern PFNGLTEXFILTERFUNCSGISPROC glTexFilterFuncSGIS;
extern PFNGLTEXSUBIMAGE1DEXTPROC glTexSubImage1DEXT;
extern PFNGLTEXSUBIMAGE2DEXTPROC glTexSubImage2DEXT;
extern PFNGLCOPYTEXIMAGE1DEXTPROC glCopyTexImage1DEXT;
extern PFNGLCOPYTEXIMAGE2DEXTPROC glCopyTexImage2DEXT;
extern PFNGLCOPYTEXSUBIMAGE1DEXTPROC glCopyTexSubImage1DEXT;
extern PFNGLCOPYTEXSUBIMAGE2DEXTPROC glCopyTexSubImage2DEXT;
extern PFNGLCOPYTEXSUBIMAGE3DEXTPROC glCopyTexSubImage3DEXT;
extern PFNGLGETHISTOGRAMEXTPROC glGetHistogramEXT;
extern PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glGetHistogramParameterfvEXT;
extern PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glGetHistogramParameterivEXT;
extern PFNGLGETMINMAXEXTPROC glGetMinmaxEXT;
extern PFNGLGETMINMAXPARAMETERFVEXTPROC glGetMinmaxParameterfvEXT;
extern PFNGLGETMINMAXPARAMETERIVEXTPROC glGetMinmaxParameterivEXT;
extern PFNGLHISTOGRAMEXTPROC glHistogramEXT;
extern PFNGLMINMAXEXTPROC glMinmaxEXT;
extern PFNGLRESETHISTOGRAMEXTPROC glResetHistogramEXT;
extern PFNGLRESETMINMAXEXTPROC glResetMinmaxEXT;
extern PFNGLCONVOLUTIONFILTER1DEXTPROC glConvolutionFilter1DEXT;
extern PFNGLCONVOLUTIONFILTER2DEXTPROC glConvolutionFilter2DEXT;
extern PFNGLCONVOLUTIONPARAMETERFEXTPROC glConvolutionParameterfEXT;
extern PFNGLCONVOLUTIONPARAMETERFVEXTPROC glConvolutionParameterfvEXT;
extern PFNGLCONVOLUTIONPARAMETERIEXTPROC glConvolutionParameteriEXT;
extern PFNGLCONVOLUTIONPARAMETERIVEXTPROC glConvolutionParameterivEXT;
extern PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glCopyConvolutionFilter1DEXT;
extern PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glCopyConvolutionFilter2DEXT;
extern PFNGLGETCONVOLUTIONFILTEREXTPROC glGetConvolutionFilterEXT;
extern PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glGetConvolutionParameterfvEXT;
extern PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glGetConvolutionParameterivEXT;
extern PFNGLGETSEPARABLEFILTEREXTPROC glGetSeparableFilterEXT;
extern PFNGLSEPARABLEFILTER2DEXTPROC glSeparableFilter2DEXT;
extern PFNGLCOLORTABLESGIPROC glColorTableSGI;
extern PFNGLCOLORTABLEPARAMETERFVSGIPROC glColorTableParameterfvSGI;
extern PFNGLCOLORTABLEPARAMETERIVSGIPROC glColorTableParameterivSGI;
extern PFNGLCOPYCOLORTABLESGIPROC glCopyColorTableSGI;
extern PFNGLGETCOLORTABLESGIPROC glGetColorTableSGI;
extern PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glGetColorTableParameterfvSGI;
extern PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glGetColorTableParameterivSGI;
extern PFNGLPIXELTEXGENSGIXPROC glPixelTexGenSGIX;
extern PFNGLPIXELTEXGENPARAMETERISGISPROC glPixelTexGenParameteriSGIS;
extern PFNGLPIXELTEXGENPARAMETERIVSGISPROC glPixelTexGenParameterivSGIS;
extern PFNGLPIXELTEXGENPARAMETERFSGISPROC glPixelTexGenParameterfSGIS;
extern PFNGLPIXELTEXGENPARAMETERFVSGISPROC glPixelTexGenParameterfvSGIS;
extern PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glGetPixelTexGenParameterivSGIS;
extern PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glGetPixelTexGenParameterfvSGIS;
extern PFNGLTEXIMAGE4DSGISPROC glTexImage4DSGIS;
extern PFNGLTEXSUBIMAGE4DSGISPROC glTexSubImage4DSGIS;
extern PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT;
extern PFNGLBINDTEXTUREEXTPROC glBindTextureEXT;
extern PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT;
extern PFNGLGENTEXTURESEXTPROC glGenTexturesEXT;
extern PFNGLISTEXTUREEXTPROC glIsTextureEXT;
extern PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT;
extern PFNGLDETAILTEXFUNCSGISPROC glDetailTexFuncSGIS;
extern PFNGLGETDETAILTEXFUNCSGISPROC glGetDetailTexFuncSGIS;
extern PFNGLSHARPENTEXFUNCSGISPROC glSharpenTexFuncSGIS;
extern PFNGLGETSHARPENTEXFUNCSGISPROC glGetSharpenTexFuncSGIS;
extern PFNGLSAMPLEMASKSGISPROC glSampleMaskSGIS;
extern PFNGLSAMPLEPATTERNSGISPROC glSamplePatternSGIS;
extern PFNGLARRAYELEMENTEXTPROC glArrayElementEXT;
extern PFNGLCOLORPOINTEREXTPROC glColorPointerEXT;
extern PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT;
extern PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT;
extern PFNGLGETPOINTERVEXTPROC glGetPointervEXT;
extern PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT;
extern PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT;
extern PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT;
extern PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT;
extern PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT;
extern PFNGLSPRITEPARAMETERFSGIXPROC glSpriteParameterfSGIX;
extern PFNGLSPRITEPARAMETERFVSGIXPROC glSpriteParameterfvSGIX;
extern PFNGLSPRITEPARAMETERISGIXPROC glSpriteParameteriSGIX;
extern PFNGLSPRITEPARAMETERIVSGIXPROC glSpriteParameterivSGIX;
extern PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT;
extern PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT;
extern PFNGLPOINTPARAMETERFSGISPROC glPointParameterfSGIS;
extern PFNGLPOINTPARAMETERFVSGISPROC glPointParameterfvSGIS;
extern PFNGLGETINSTRUMENTSSGIXPROC glGetInstrumentsSGIX;
extern PFNGLINSTRUMENTSBUFFERSGIXPROC glInstrumentsBufferSGIX;
extern PFNGLPOLLINSTRUMENTSSGIXPROC glPollInstrumentsSGIX;
extern PFNGLREADINSTRUMENTSSGIXPROC glReadInstrumentsSGIX;
extern PFNGLSTARTINSTRUMENTSSGIXPROC glStartInstrumentsSGIX;
extern PFNGLSTOPINSTRUMENTSSGIXPROC glStopInstrumentsSGIX;
extern PFNGLFRAMEZOOMSGIXPROC glFrameZoomSGIX;
extern PFNGLTAGSAMPLEBUFFERSGIXPROC glTagSampleBufferSGIX;
extern PFNGLDEFORMATIONMAP3DSGIXPROC glDeformationMap3dSGIX;
extern PFNGLDEFORMATIONMAP3FSGIXPROC glDeformationMap3fSGIX;
extern PFNGLDEFORMSGIXPROC glDeformSGIX;
extern PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glLoadIdentityDeformationMapSGIX;
extern PFNGLREFERENCEPLANESGIXPROC glReferencePlaneSGIX;
extern PFNGLFLUSHRASTERSGIXPROC glFlushRasterSGIX;
extern PFNGLFOGFUNCSGISPROC glFogFuncSGIS;
extern PFNGLGETFOGFUNCSGISPROC glGetFogFuncSGIS;
extern PFNGLIMAGETRANSFORMPARAMETERIHPPROC glImageTransformParameteriHP;
extern PFNGLIMAGETRANSFORMPARAMETERFHPPROC glImageTransformParameterfHP;
extern PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glImageTransformParameterivHP;
extern PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glImageTransformParameterfvHP;
extern PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glGetImageTransformParameterivHP;
extern PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glGetImageTransformParameterfvHP;
extern PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT;
extern PFNGLCOPYCOLORSUBTABLEEXTPROC glCopyColorSubTableEXT;
extern PFNGLHINTPGIPROC glHintPGI;
extern PFNGLCOLORTABLEEXTPROC glColorTableEXT;
extern PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT;
extern PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT;
extern PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT;
extern PFNGLGETLISTPARAMETERFVSGIXPROC glGetListParameterfvSGIX;
extern PFNGLGETLISTPARAMETERIVSGIXPROC glGetListParameterivSGIX;
extern PFNGLLISTPARAMETERFSGIXPROC glListParameterfSGIX;
extern PFNGLLISTPARAMETERFVSGIXPROC glListParameterfvSGIX;
extern PFNGLLISTPARAMETERISGIXPROC glListParameteriSGIX;
extern PFNGLLISTPARAMETERIVSGIXPROC glListParameterivSGIX;
extern PFNGLINDEXMATERIALEXTPROC glIndexMaterialEXT;
extern PFNGLINDEXFUNCEXTPROC glIndexFuncEXT;
extern PFNGLLOCKARRAYSEXTPROC glLockArraysEXT;
extern PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT;
extern PFNGLCULLPARAMETERDVEXTPROC glCullParameterdvEXT;
extern PFNGLCULLPARAMETERFVEXTPROC glCullParameterfvEXT;
extern PFNGLFRAGMENTCOLORMATERIALSGIXPROC glFragmentColorMaterialSGIX;
extern PFNGLFRAGMENTLIGHTFSGIXPROC glFragmentLightfSGIX;
extern PFNGLFRAGMENTLIGHTFVSGIXPROC glFragmentLightfvSGIX;
extern PFNGLFRAGMENTLIGHTISGIXPROC glFragmentLightiSGIX;
extern PFNGLFRAGMENTLIGHTIVSGIXPROC glFragmentLightivSGIX;
extern PFNGLFRAGMENTLIGHTMODELFSGIXPROC glFragmentLightModelfSGIX;
extern PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glFragmentLightModelfvSGIX;
extern PFNGLFRAGMENTLIGHTMODELISGIXPROC glFragmentLightModeliSGIX;
extern PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glFragmentLightModelivSGIX;
extern PFNGLFRAGMENTMATERIALFSGIXPROC glFragmentMaterialfSGIX;
extern PFNGLFRAGMENTMATERIALFVSGIXPROC glFragmentMaterialfvSGIX;
extern PFNGLFRAGMENTMATERIALISGIXPROC glFragmentMaterialiSGIX;
extern PFNGLFRAGMENTMATERIALIVSGIXPROC glFragmentMaterialivSGIX;
extern PFNGLGETFRAGMENTLIGHTFVSGIXPROC glGetFragmentLightfvSGIX;
extern PFNGLGETFRAGMENTLIGHTIVSGIXPROC glGetFragmentLightivSGIX;
extern PFNGLGETFRAGMENTMATERIALFVSGIXPROC glGetFragmentMaterialfvSGIX;
extern PFNGLGETFRAGMENTMATERIALIVSGIXPROC glGetFragmentMaterialivSGIX;
extern PFNGLLIGHTENVISGIXPROC glLightEnviSGIX;
extern PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT;
extern PFNGLAPPLYTEXTUREEXTPROC glApplyTextureEXT;
extern PFNGLTEXTURELIGHTEXTPROC glTextureLightEXT;
extern PFNGLTEXTUREMATERIALEXTPROC glTextureMaterialEXT;
extern PFNGLASYNCMARKERSGIXPROC glAsyncMarkerSGIX;
extern PFNGLFINISHASYNCSGIXPROC glFinishAsyncSGIX;
extern PFNGLPOLLASYNCSGIXPROC glPollAsyncSGIX;
extern PFNGLGENASYNCMARKERSSGIXPROC glGenAsyncMarkersSGIX;
extern PFNGLDELETEASYNCMARKERSSGIXPROC glDeleteAsyncMarkersSGIX;
extern PFNGLISASYNCMARKERSGIXPROC glIsAsyncMarkerSGIX;
extern PFNGLVERTEXPOINTERVINTELPROC glVertexPointervINTEL;
extern PFNGLNORMALPOINTERVINTELPROC glNormalPointervINTEL;
extern PFNGLCOLORPOINTERVINTELPROC glColorPointervINTEL;
extern PFNGLTEXCOORDPOINTERVINTELPROC glTexCoordPointervINTEL;
extern PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glPixelTransformParameteriEXT;
extern PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glPixelTransformParameterfEXT;
extern PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glPixelTransformParameterivEXT;
extern PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glPixelTransformParameterfvEXT;
extern PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glGetPixelTransformParameterivEXT;
extern PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glGetPixelTransformParameterfvEXT;
extern PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT;
extern PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT;
extern PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT;
extern PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT;
extern PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT;
extern PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT;
extern PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT;
extern PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT;
extern PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT;
extern PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT;
extern PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT;
extern PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT;
extern PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT;
extern PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT;
extern PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT;
extern PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT;
extern PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT;
extern PFNGLTEXTURENORMALEXTPROC glTextureNormalEXT;
extern PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT;
extern PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT;
extern PFNGLFOGCOORDFEXTPROC glFogCoordfEXT;
extern PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT;
extern PFNGLFOGCOORDDEXTPROC glFogCoorddEXT;
extern PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT;
extern PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT;
extern PFNGLTANGENT3BEXTPROC glTangent3bEXT;
extern PFNGLTANGENT3BVEXTPROC glTangent3bvEXT;
extern PFNGLTANGENT3DEXTPROC glTangent3dEXT;
extern PFNGLTANGENT3DVEXTPROC glTangent3dvEXT;
extern PFNGLTANGENT3FEXTPROC glTangent3fEXT;
extern PFNGLTANGENT3FVEXTPROC glTangent3fvEXT;
extern PFNGLTANGENT3IEXTPROC glTangent3iEXT;
extern PFNGLTANGENT3IVEXTPROC glTangent3ivEXT;
extern PFNGLTANGENT3SEXTPROC glTangent3sEXT;
extern PFNGLTANGENT3SVEXTPROC glTangent3svEXT;
extern PFNGLBINORMAL3BEXTPROC glBinormal3bEXT;
extern PFNGLBINORMAL3BVEXTPROC glBinormal3bvEXT;
extern PFNGLBINORMAL3DEXTPROC glBinormal3dEXT;
extern PFNGLBINORMAL3DVEXTPROC glBinormal3dvEXT;
extern PFNGLBINORMAL3FEXTPROC glBinormal3fEXT;
extern PFNGLBINORMAL3FVEXTPROC glBinormal3fvEXT;
extern PFNGLBINORMAL3IEXTPROC glBinormal3iEXT;
extern PFNGLBINORMAL3IVEXTPROC glBinormal3ivEXT;
extern PFNGLBINORMAL3SEXTPROC glBinormal3sEXT;
extern PFNGLBINORMAL3SVEXTPROC glBinormal3svEXT;
extern PFNGLTANGENTPOINTEREXTPROC glTangentPointerEXT;
extern PFNGLBINORMALPOINTEREXTPROC glBinormalPointerEXT;
extern PFNGLFINISHTEXTURESUNXPROC glFinishTextureSUNX;
extern PFNGLGLOBALALPHAFACTORBSUNPROC glGlobalAlphaFactorbSUN;
extern PFNGLGLOBALALPHAFACTORSSUNPROC glGlobalAlphaFactorsSUN;
extern PFNGLGLOBALALPHAFACTORISUNPROC glGlobalAlphaFactoriSUN;
extern PFNGLGLOBALALPHAFACTORFSUNPROC glGlobalAlphaFactorfSUN;
extern PFNGLGLOBALALPHAFACTORDSUNPROC glGlobalAlphaFactordSUN;
extern PFNGLGLOBALALPHAFACTORUBSUNPROC glGlobalAlphaFactorubSUN;
extern PFNGLGLOBALALPHAFACTORUSSUNPROC glGlobalAlphaFactorusSUN;
extern PFNGLGLOBALALPHAFACTORUISUNPROC glGlobalAlphaFactoruiSUN;
extern PFNGLREPLACEMENTCODEUISUNPROC glReplacementCodeuiSUN;
extern PFNGLREPLACEMENTCODEUSSUNPROC glReplacementCodeusSUN;
extern PFNGLREPLACEMENTCODEUBSUNPROC glReplacementCodeubSUN;
extern PFNGLREPLACEMENTCODEUIVSUNPROC glReplacementCodeuivSUN;
extern PFNGLREPLACEMENTCODEUSVSUNPROC glReplacementCodeusvSUN;
extern PFNGLREPLACEMENTCODEUBVSUNPROC glReplacementCodeubvSUN;
extern PFNGLREPLACEMENTCODEPOINTERSUNPROC glReplacementCodePointerSUN;
extern PFNGLCOLOR4UBVERTEX2FSUNPROC glColor4ubVertex2fSUN;
extern PFNGLCOLOR4UBVERTEX2FVSUNPROC glColor4ubVertex2fvSUN;
extern PFNGLCOLOR4UBVERTEX3FSUNPROC glColor4ubVertex3fSUN;
extern PFNGLCOLOR4UBVERTEX3FVSUNPROC glColor4ubVertex3fvSUN;
extern PFNGLCOLOR3FVERTEX3FSUNPROC glColor3fVertex3fSUN;
extern PFNGLCOLOR3FVERTEX3FVSUNPROC glColor3fVertex3fvSUN;
extern PFNGLNORMAL3FVERTEX3FSUNPROC glNormal3fVertex3fSUN;
extern PFNGLNORMAL3FVERTEX3FVSUNPROC glNormal3fVertex3fvSUN;
extern PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glColor4fNormal3fVertex3fSUN;
extern PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glColor4fNormal3fVertex3fvSUN;
extern PFNGLTEXCOORD2FVERTEX3FSUNPROC glTexCoord2fVertex3fSUN;
extern PFNGLTEXCOORD2FVERTEX3FVSUNPROC glTexCoord2fVertex3fvSUN;
extern PFNGLTEXCOORD4FVERTEX4FSUNPROC glTexCoord4fVertex4fSUN;
extern PFNGLTEXCOORD4FVERTEX4FVSUNPROC glTexCoord4fVertex4fvSUN;
extern PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glTexCoord2fColor4ubVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glTexCoord2fColor4ubVertex3fvSUN;
extern PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glTexCoord2fColor3fVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glTexCoord2fColor3fVertex3fvSUN;
extern PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glTexCoord2fNormal3fVertex3fSUN;
extern PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fNormal3fVertex3fvSUN;
extern PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glTexCoord2fColor4fNormal3fVertex3fSUN;
extern PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fColor4fNormal3fVertex3fvSUN;
extern PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glTexCoord4fColor4fNormal3fVertex4fSUN;
extern PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glTexCoord4fColor4fNormal3fVertex4fvSUN;
extern PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glReplacementCodeuiVertex3fSUN;
extern PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glReplacementCodeuiVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glReplacementCodeuiColor4ubVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glReplacementCodeuiColor4ubVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glReplacementCodeuiColor3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glReplacementCodeuiColor3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glReplacementCodeuiNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
extern PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
extern PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT;
extern PFNGLBLENDFUNCSEPARATEINGRPROC glBlendFuncSeparateINGR;
extern PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT;
extern PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT;
extern PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT;
extern PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV;
extern PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV;
extern PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV;
extern PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV;
extern PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV;
extern PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV;
extern PFNGLCOMBINERINPUTNVPROC glCombinerInputNV;
extern PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV;
extern PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV;
extern PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV;
extern PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV;
extern PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV;
extern PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV;
extern PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV;
extern PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV;
extern PFNGLRESIZEBUFFERSMESAPROC glResizeBuffersMESA;
extern PFNGLWINDOWPOS2DMESAPROC glWindowPos2dMESA;
extern PFNGLWINDOWPOS2DVMESAPROC glWindowPos2dvMESA;
extern PFNGLWINDOWPOS2FMESAPROC glWindowPos2fMESA;
extern PFNGLWINDOWPOS2FVMESAPROC glWindowPos2fvMESA;
extern PFNGLWINDOWPOS2IMESAPROC glWindowPos2iMESA;
extern PFNGLWINDOWPOS2IVMESAPROC glWindowPos2ivMESA;
extern PFNGLWINDOWPOS2SMESAPROC glWindowPos2sMESA;
extern PFNGLWINDOWPOS2SVMESAPROC glWindowPos2svMESA;
extern PFNGLWINDOWPOS3DMESAPROC glWindowPos3dMESA;
extern PFNGLWINDOWPOS3DVMESAPROC glWindowPos3dvMESA;
extern PFNGLWINDOWPOS3FMESAPROC glWindowPos3fMESA;
extern PFNGLWINDOWPOS3FVMESAPROC glWindowPos3fvMESA;
extern PFNGLWINDOWPOS3IMESAPROC glWindowPos3iMESA;
extern PFNGLWINDOWPOS3IVMESAPROC glWindowPos3ivMESA;
extern PFNGLWINDOWPOS3SMESAPROC glWindowPos3sMESA;
extern PFNGLWINDOWPOS3SVMESAPROC glWindowPos3svMESA;
extern PFNGLWINDOWPOS4DMESAPROC glWindowPos4dMESA;
extern PFNGLWINDOWPOS4DVMESAPROC glWindowPos4dvMESA;
extern PFNGLWINDOWPOS4FMESAPROC glWindowPos4fMESA;
extern PFNGLWINDOWPOS4FVMESAPROC glWindowPos4fvMESA;
extern PFNGLWINDOWPOS4IMESAPROC glWindowPos4iMESA;
extern PFNGLWINDOWPOS4IVMESAPROC glWindowPos4ivMESA;
extern PFNGLWINDOWPOS4SMESAPROC glWindowPos4sMESA;
extern PFNGLWINDOWPOS4SVMESAPROC glWindowPos4svMESA;
extern PFNGLMULTIMODEDRAWARRAYSIBMPROC glMultiModeDrawArraysIBM;
extern PFNGLMULTIMODEDRAWELEMENTSIBMPROC glMultiModeDrawElementsIBM;
extern PFNGLCOLORPOINTERLISTIBMPROC glColorPointerListIBM;
extern PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glSecondaryColorPointerListIBM;
extern PFNGLEDGEFLAGPOINTERLISTIBMPROC glEdgeFlagPointerListIBM;
extern PFNGLFOGCOORDPOINTERLISTIBMPROC glFogCoordPointerListIBM;
extern PFNGLINDEXPOINTERLISTIBMPROC glIndexPointerListIBM;
extern PFNGLNORMALPOINTERLISTIBMPROC glNormalPointerListIBM;
extern PFNGLTEXCOORDPOINTERLISTIBMPROC glTexCoordPointerListIBM;
extern PFNGLVERTEXPOINTERLISTIBMPROC glVertexPointerListIBM;
extern PFNGLTBUFFERMASK3DFXPROC glTbufferMask3DFX;
extern PFNGLSAMPLEMASKEXTPROC glSampleMaskEXT;
extern PFNGLSAMPLEPATTERNEXTPROC glSamplePatternEXT;
extern PFNGLTEXTURECOLORMASKSGISPROC glTextureColorMaskSGIS;
extern PFNGLIGLOOINTERFACESGIXPROC glIglooInterfaceSGIX;
extern PFNGLDELETEFENCESNVPROC glDeleteFencesNV;
extern PFNGLGENFENCESNVPROC glGenFencesNV;
extern PFNGLISFENCENVPROC glIsFenceNV;
extern PFNGLTESTFENCENVPROC glTestFenceNV;
extern PFNGLGETFENCEIVNVPROC glGetFenceivNV;
extern PFNGLFINISHFENCENVPROC glFinishFenceNV;
extern PFNGLSETFENCENVPROC glSetFenceNV;
extern PFNGLFLUSHSTATICDATAIBMPROC glFlushStaticDataIBM;
extern PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV;
extern PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV;
extern PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV;
extern PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV;
extern PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV;
extern PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV;
extern PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV;
extern PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV;
extern PFNGLEVALMAPSNVPROC glEvalMapsNV;
extern PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV;
extern PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV;
extern PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV;
extern PFNGLBINDPROGRAMNVPROC glBindProgramNV;
extern PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV;
extern PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV;
extern PFNGLGENPROGRAMSNVPROC glGenProgramsNV;
extern PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV;
extern PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV;
extern PFNGLGETPROGRAMIVNVPROC glGetProgramivNV;
extern PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV;
extern PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV;
extern PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV;
extern PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV;
extern PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV;
extern PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV;
extern PFNGLISPROGRAMNVPROC glIsProgramNV;
extern PFNGLLOADPROGRAMNVPROC glLoadProgramNV;
extern PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV;
extern PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV;
extern PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV;
extern PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV;
extern PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV;
extern PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV;
extern PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV;
extern PFNGLTRACKMATRIXNVPROC glTrackMatrixNV;
extern PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV;
extern PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV;
extern PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV;
extern PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV;
extern PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV;
extern PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV;
extern PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV;
extern PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV;
extern PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV;
extern PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV;
extern PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV;
extern PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV;
extern PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV;
extern PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV;
extern PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV;
extern PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV;
extern PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV;
extern PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV;
extern PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV;
extern PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV;
extern PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV;
extern PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV;
extern PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV;
extern PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV;
extern PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV;
extern PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV;
extern PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV;
extern PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV;
extern PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV;
extern PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV;
extern PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV;
extern PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV;
extern PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV;
extern PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV;
extern PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV;
extern PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV;
extern PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV;
extern PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV;
extern PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV;
extern PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV;
extern PFNGLTEXBUMPPARAMETERIVATIPROC glTexBumpParameterivATI;
extern PFNGLTEXBUMPPARAMETERFVATIPROC glTexBumpParameterfvATI;
extern PFNGLGETTEXBUMPPARAMETERIVATIPROC glGetTexBumpParameterivATI;
extern PFNGLGETTEXBUMPPARAMETERFVATIPROC glGetTexBumpParameterfvATI;
extern PFNGLGENFRAGMENTSHADERSATIPROC glGenFragmentShadersATI;
extern PFNGLBINDFRAGMENTSHADERATIPROC glBindFragmentShaderATI;
extern PFNGLDELETEFRAGMENTSHADERATIPROC glDeleteFragmentShaderATI;
extern PFNGLBEGINFRAGMENTSHADERATIPROC glBeginFragmentShaderATI;
extern PFNGLENDFRAGMENTSHADERATIPROC glEndFragmentShaderATI;
extern PFNGLPASSTEXCOORDATIPROC glPassTexCoordATI;
extern PFNGLSAMPLEMAPATIPROC glSampleMapATI;
extern PFNGLCOLORFRAGMENTOP1ATIPROC glColorFragmentOp1ATI;
extern PFNGLCOLORFRAGMENTOP2ATIPROC glColorFragmentOp2ATI;
extern PFNGLCOLORFRAGMENTOP3ATIPROC glColorFragmentOp3ATI;
extern PFNGLALPHAFRAGMENTOP1ATIPROC glAlphaFragmentOp1ATI;
extern PFNGLALPHAFRAGMENTOP2ATIPROC glAlphaFragmentOp2ATI;
extern PFNGLALPHAFRAGMENTOP3ATIPROC glAlphaFragmentOp3ATI;
extern PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glSetFragmentShaderConstantATI;
extern PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI;
extern PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI;
extern PFNGLNEWOBJECTBUFFERATIPROC glNewObjectBufferATI;
extern PFNGLISOBJECTBUFFERATIPROC glIsObjectBufferATI;
extern PFNGLUPDATEOBJECTBUFFERATIPROC glUpdateObjectBufferATI;
extern PFNGLGETOBJECTBUFFERFVATIPROC glGetObjectBufferfvATI;
extern PFNGLGETOBJECTBUFFERIVATIPROC glGetObjectBufferivATI;
extern PFNGLFREEOBJECTBUFFERATIPROC glFreeObjectBufferATI;
extern PFNGLARRAYOBJECTATIPROC glArrayObjectATI;
extern PFNGLGETARRAYOBJECTFVATIPROC glGetArrayObjectfvATI;
extern PFNGLGETARRAYOBJECTIVATIPROC glGetArrayObjectivATI;
extern PFNGLVARIANTARRAYOBJECTATIPROC glVariantArrayObjectATI;
extern PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI;
extern PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI;
extern PFNGLBEGINVERTEXSHADEREXTPROC glBeginVertexShaderEXT;
extern PFNGLENDVERTEXSHADEREXTPROC glEndVertexShaderEXT;
extern PFNGLBINDVERTEXSHADEREXTPROC glBindVertexShaderEXT;
extern PFNGLGENVERTEXSHADERSEXTPROC glGenVertexShadersEXT;
extern PFNGLDELETEVERTEXSHADEREXTPROC glDeleteVertexShaderEXT;
extern PFNGLSHADEROP1EXTPROC glShaderOp1EXT;
extern PFNGLSHADEROP2EXTPROC glShaderOp2EXT;
extern PFNGLSHADEROP3EXTPROC glShaderOp3EXT;
extern PFNGLSWIZZLEEXTPROC glSwizzleEXT;
extern PFNGLWRITEMASKEXTPROC glWriteMaskEXT;
extern PFNGLINSERTCOMPONENTEXTPROC glInsertComponentEXT;
extern PFNGLEXTRACTCOMPONENTEXTPROC glExtractComponentEXT;
extern PFNGLGENSYMBOLSEXTPROC glGenSymbolsEXT;
extern PFNGLSETINVARIANTEXTPROC glSetInvariantEXT;
extern PFNGLSETLOCALCONSTANTEXTPROC glSetLocalConstantEXT;
extern PFNGLVARIANTBVEXTPROC glVariantbvEXT;
extern PFNGLVARIANTSVEXTPROC glVariantsvEXT;
extern PFNGLVARIANTIVEXTPROC glVariantivEXT;
extern PFNGLVARIANTFVEXTPROC glVariantfvEXT;
extern PFNGLVARIANTDVEXTPROC glVariantdvEXT;
extern PFNGLVARIANTUBVEXTPROC glVariantubvEXT;
extern PFNGLVARIANTUSVEXTPROC glVariantusvEXT;
extern PFNGLVARIANTUIVEXTPROC glVariantuivEXT;
extern PFNGLVARIANTPOINTEREXTPROC glVariantPointerEXT;
extern PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glEnableVariantClientStateEXT;
extern PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glDisableVariantClientStateEXT;
extern PFNGLBINDLIGHTPARAMETEREXTPROC glBindLightParameterEXT;
extern PFNGLBINDMATERIALPARAMETEREXTPROC glBindMaterialParameterEXT;
extern PFNGLBINDTEXGENPARAMETEREXTPROC glBindTexGenParameterEXT;
extern PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glBindTextureUnitParameterEXT;
extern PFNGLBINDPARAMETEREXTPROC glBindParameterEXT;
extern PFNGLISVARIANTENABLEDEXTPROC glIsVariantEnabledEXT;
extern PFNGLGETVARIANTBOOLEANVEXTPROC glGetVariantBooleanvEXT;
extern PFNGLGETVARIANTINTEGERVEXTPROC glGetVariantIntegervEXT;
extern PFNGLGETVARIANTFLOATVEXTPROC glGetVariantFloatvEXT;
extern PFNGLGETVARIANTPOINTERVEXTPROC glGetVariantPointervEXT;
extern PFNGLGETINVARIANTBOOLEANVEXTPROC glGetInvariantBooleanvEXT;
extern PFNGLGETINVARIANTINTEGERVEXTPROC glGetInvariantIntegervEXT;
extern PFNGLGETINVARIANTFLOATVEXTPROC glGetInvariantFloatvEXT;
extern PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glGetLocalConstantBooleanvEXT;
extern PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glGetLocalConstantIntegervEXT;
extern PFNGLGETLOCALCONSTANTFLOATVEXTPROC glGetLocalConstantFloatvEXT;
extern PFNGLVERTEXSTREAM1SATIPROC glVertexStream1sATI;
extern PFNGLVERTEXSTREAM1SVATIPROC glVertexStream1svATI;
extern PFNGLVERTEXSTREAM1IATIPROC glVertexStream1iATI;
extern PFNGLVERTEXSTREAM1IVATIPROC glVertexStream1ivATI;
extern PFNGLVERTEXSTREAM1FATIPROC glVertexStream1fATI;
extern PFNGLVERTEXSTREAM1FVATIPROC glVertexStream1fvATI;
extern PFNGLVERTEXSTREAM1DATIPROC glVertexStream1dATI;
extern PFNGLVERTEXSTREAM1DVATIPROC glVertexStream1dvATI;
extern PFNGLVERTEXSTREAM2SATIPROC glVertexStream2sATI;
extern PFNGLVERTEXSTREAM2SVATIPROC glVertexStream2svATI;
extern PFNGLVERTEXSTREAM2IATIPROC glVertexStream2iATI;
extern PFNGLVERTEXSTREAM2IVATIPROC glVertexStream2ivATI;
extern PFNGLVERTEXSTREAM2FATIPROC glVertexStream2fATI;
extern PFNGLVERTEXSTREAM2FVATIPROC glVertexStream2fvATI;
extern PFNGLVERTEXSTREAM2DATIPROC glVertexStream2dATI;
extern PFNGLVERTEXSTREAM2DVATIPROC glVertexStream2dvATI;
extern PFNGLVERTEXSTREAM3SATIPROC glVertexStream3sATI;
extern PFNGLVERTEXSTREAM3SVATIPROC glVertexStream3svATI;
extern PFNGLVERTEXSTREAM3IATIPROC glVertexStream3iATI;
extern PFNGLVERTEXSTREAM3IVATIPROC glVertexStream3ivATI;
extern PFNGLVERTEXSTREAM3FATIPROC glVertexStream3fATI;
extern PFNGLVERTEXSTREAM3FVATIPROC glVertexStream3fvATI;
extern PFNGLVERTEXSTREAM3DATIPROC glVertexStream3dATI;
extern PFNGLVERTEXSTREAM3DVATIPROC glVertexStream3dvATI;
extern PFNGLVERTEXSTREAM4SATIPROC glVertexStream4sATI;
extern PFNGLVERTEXSTREAM4SVATIPROC glVertexStream4svATI;
extern PFNGLVERTEXSTREAM4IATIPROC glVertexStream4iATI;
extern PFNGLVERTEXSTREAM4IVATIPROC glVertexStream4ivATI;
extern PFNGLVERTEXSTREAM4FATIPROC glVertexStream4fATI;
extern PFNGLVERTEXSTREAM4FVATIPROC glVertexStream4fvATI;
extern PFNGLVERTEXSTREAM4DATIPROC glVertexStream4dATI;
extern PFNGLVERTEXSTREAM4DVATIPROC glVertexStream4dvATI;
extern PFNGLNORMALSTREAM3BATIPROC glNormalStream3bATI;
extern PFNGLNORMALSTREAM3BVATIPROC glNormalStream3bvATI;
extern PFNGLNORMALSTREAM3SATIPROC glNormalStream3sATI;
extern PFNGLNORMALSTREAM3SVATIPROC glNormalStream3svATI;
extern PFNGLNORMALSTREAM3IATIPROC glNormalStream3iATI;
extern PFNGLNORMALSTREAM3IVATIPROC glNormalStream3ivATI;
extern PFNGLNORMALSTREAM3FATIPROC glNormalStream3fATI;
extern PFNGLNORMALSTREAM3FVATIPROC glNormalStream3fvATI;
extern PFNGLNORMALSTREAM3DATIPROC glNormalStream3dATI;
extern PFNGLNORMALSTREAM3DVATIPROC glNormalStream3dvATI;
extern PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glClientActiveVertexStreamATI;
extern PFNGLVERTEXBLENDENVIATIPROC glVertexBlendEnviATI;
extern PFNGLVERTEXBLENDENVFATIPROC glVertexBlendEnvfATI;
extern PFNGLELEMENTPOINTERATIPROC glElementPointerATI;
extern PFNGLDRAWELEMENTARRAYATIPROC glDrawElementArrayATI;
extern PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI;
extern PFNGLDRAWMESHARRAYSSUNPROC glDrawMeshArraysSUN;
extern PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV;
extern PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV;
extern PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV;
extern PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV;
extern PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV;
extern PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV;
extern PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV;
extern PFNGLPOINTPARAMETERINVPROC glPointParameteriNV;
extern PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV;
extern PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT;
extern PFNGLELEMENTPOINTERAPPLEPROC glElementPointerAPPLE;
extern PFNGLDRAWELEMENTARRAYAPPLEPROC glDrawElementArrayAPPLE;
extern PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glDrawRangeElementArrayAPPLE;
extern PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glMultiDrawElementArrayAPPLE;
extern PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glMultiDrawRangeElementArrayAPPLE;
extern PFNGLGENFENCESAPPLEPROC glGenFencesAPPLE;
extern PFNGLDELETEFENCESAPPLEPROC glDeleteFencesAPPLE;
extern PFNGLSETFENCEAPPLEPROC glSetFenceAPPLE;
extern PFNGLISFENCEAPPLEPROC glIsFenceAPPLE;
extern PFNGLTESTFENCEAPPLEPROC glTestFenceAPPLE;
extern PFNGLFINISHFENCEAPPLEPROC glFinishFenceAPPLE;
extern PFNGLTESTOBJECTAPPLEPROC glTestObjectAPPLE;
extern PFNGLFINISHOBJECTAPPLEPROC glFinishObjectAPPLE;
extern PFNGLBINDVERTEXARRAYAPPLEPROC glBindVertexArrayAPPLE;
extern PFNGLDELETEVERTEXARRAYSAPPLEPROC glDeleteVertexArraysAPPLE;
extern PFNGLGENVERTEXARRAYSAPPLEPROC glGenVertexArraysAPPLE;
extern PFNGLISVERTEXARRAYAPPLEPROC glIsVertexArrayAPPLE;
extern PFNGLVERTEXARRAYRANGEAPPLEPROC glVertexArrayRangeAPPLE;
extern PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glFlushVertexArrayRangeAPPLE;
extern PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glVertexArrayParameteriAPPLE;
extern PFNGLDRAWBUFFERSATIPROC glDrawBuffersATI;
extern PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV;
extern PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV;
extern PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glProgramNamedParameter4dNV;
extern PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glProgramNamedParameter4dvNV;
extern PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glGetProgramNamedParameterfvNV;
extern PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glGetProgramNamedParameterdvNV;
extern PFNGLVERTEX2HNVPROC glVertex2hNV;
extern PFNGLVERTEX2HVNVPROC glVertex2hvNV;
extern PFNGLVERTEX3HNVPROC glVertex3hNV;
extern PFNGLVERTEX3HVNVPROC glVertex3hvNV;
extern PFNGLVERTEX4HNVPROC glVertex4hNV;
extern PFNGLVERTEX4HVNVPROC glVertex4hvNV;
extern PFNGLNORMAL3HNVPROC glNormal3hNV;
extern PFNGLNORMAL3HVNVPROC glNormal3hvNV;
extern PFNGLCOLOR3HNVPROC glColor3hNV;
extern PFNGLCOLOR3HVNVPROC glColor3hvNV;
extern PFNGLCOLOR4HNVPROC glColor4hNV;
extern PFNGLCOLOR4HVNVPROC glColor4hvNV;
extern PFNGLTEXCOORD1HNVPROC glTexCoord1hNV;
extern PFNGLTEXCOORD1HVNVPROC glTexCoord1hvNV;
extern PFNGLTEXCOORD2HNVPROC glTexCoord2hNV;
extern PFNGLTEXCOORD2HVNVPROC glTexCoord2hvNV;
extern PFNGLTEXCOORD3HNVPROC glTexCoord3hNV;
extern PFNGLTEXCOORD3HVNVPROC glTexCoord3hvNV;
extern PFNGLTEXCOORD4HNVPROC glTexCoord4hNV;
extern PFNGLTEXCOORD4HVNVPROC glTexCoord4hvNV;
extern PFNGLMULTITEXCOORD1HNVPROC glMultiTexCoord1hNV;
extern PFNGLMULTITEXCOORD1HVNVPROC glMultiTexCoord1hvNV;
extern PFNGLMULTITEXCOORD2HNVPROC glMultiTexCoord2hNV;
extern PFNGLMULTITEXCOORD2HVNVPROC glMultiTexCoord2hvNV;
extern PFNGLMULTITEXCOORD3HNVPROC glMultiTexCoord3hNV;
extern PFNGLMULTITEXCOORD3HVNVPROC glMultiTexCoord3hvNV;
extern PFNGLMULTITEXCOORD4HNVPROC glMultiTexCoord4hNV;
extern PFNGLMULTITEXCOORD4HVNVPROC glMultiTexCoord4hvNV;
extern PFNGLFOGCOORDHNVPROC glFogCoordhNV;
extern PFNGLFOGCOORDHVNVPROC glFogCoordhvNV;
extern PFNGLSECONDARYCOLOR3HNVPROC glSecondaryColor3hNV;
extern PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV;
extern PFNGLVERTEXWEIGHTHNVPROC glVertexWeighthNV;
extern PFNGLVERTEXWEIGHTHVNVPROC glVertexWeighthvNV;
extern PFNGLVERTEXATTRIB1HNVPROC glVertexAttrib1hNV;
extern PFNGLVERTEXATTRIB1HVNVPROC glVertexAttrib1hvNV;
extern PFNGLVERTEXATTRIB2HNVPROC glVertexAttrib2hNV;
extern PFNGLVERTEXATTRIB2HVNVPROC glVertexAttrib2hvNV;
extern PFNGLVERTEXATTRIB3HNVPROC glVertexAttrib3hNV;
extern PFNGLVERTEXATTRIB3HVNVPROC glVertexAttrib3hvNV;
extern PFNGLVERTEXATTRIB4HNVPROC glVertexAttrib4hNV;
extern PFNGLVERTEXATTRIB4HVNVPROC glVertexAttrib4hvNV;
extern PFNGLVERTEXATTRIBS1HVNVPROC glVertexAttribs1hvNV;
extern PFNGLVERTEXATTRIBS2HVNVPROC glVertexAttribs2hvNV;
extern PFNGLVERTEXATTRIBS3HVNVPROC glVertexAttribs3hvNV;
extern PFNGLVERTEXATTRIBS4HVNVPROC glVertexAttribs4hvNV;
extern PFNGLPIXELDATARANGENVPROC glPixelDataRangeNV;
extern PFNGLFLUSHPIXELDATARANGENVPROC glFlushPixelDataRangeNV;
extern PFNGLPRIMITIVERESTARTNVPROC glPrimitiveRestartNV;
extern PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV;
extern PFNGLMAPOBJECTBUFFERATIPROC glMapObjectBufferATI;
extern PFNGLUNMAPOBJECTBUFFERATIPROC glUnmapObjectBufferATI;
extern PFNGLSTENCILOPSEPARATEATIPROC glStencilOpSeparateATI;
extern PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI;
extern PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glVertexAttribArrayObjectATI;
extern PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glGetVertexAttribArrayObjectfvATI;
extern PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glGetVertexAttribArrayObjectivATI;
extern PFNGLMULTITEXCOORD1BOESPROC glMultiTexCoord1bOES;
extern PFNGLMULTITEXCOORD1BVOESPROC glMultiTexCoord1bvOES;
extern PFNGLMULTITEXCOORD2BOESPROC glMultiTexCoord2bOES;
extern PFNGLMULTITEXCOORD2BVOESPROC glMultiTexCoord2bvOES;
extern PFNGLMULTITEXCOORD3BOESPROC glMultiTexCoord3bOES;
extern PFNGLMULTITEXCOORD3BVOESPROC glMultiTexCoord3bvOES;
extern PFNGLMULTITEXCOORD4BOESPROC glMultiTexCoord4bOES;
extern PFNGLMULTITEXCOORD4BVOESPROC glMultiTexCoord4bvOES;
extern PFNGLTEXCOORD1BOESPROC glTexCoord1bOES;
extern PFNGLTEXCOORD1BVOESPROC glTexCoord1bvOES;
extern PFNGLTEXCOORD2BOESPROC glTexCoord2bOES;
extern PFNGLTEXCOORD2BVOESPROC glTexCoord2bvOES;
extern PFNGLTEXCOORD3BOESPROC glTexCoord3bOES;
extern PFNGLTEXCOORD3BVOESPROC glTexCoord3bvOES;
extern PFNGLTEXCOORD4BOESPROC glTexCoord4bOES;
extern PFNGLTEXCOORD4BVOESPROC glTexCoord4bvOES;
extern PFNGLVERTEX2BOESPROC glVertex2bOES;
extern PFNGLVERTEX2BVOESPROC glVertex2bvOES;
extern PFNGLVERTEX3BOESPROC glVertex3bOES;
extern PFNGLVERTEX3BVOESPROC glVertex3bvOES;
extern PFNGLVERTEX4BOESPROC glVertex4bOES;
extern PFNGLVERTEX4BVOESPROC glVertex4bvOES;
extern PFNGLACCUMXOESPROC glAccumxOES;
extern PFNGLALPHAFUNCXOESPROC glAlphaFuncxOES;
extern PFNGLBITMAPXOESPROC glBitmapxOES;
extern PFNGLBLENDCOLORXOESPROC glBlendColorxOES;
extern PFNGLCLEARACCUMXOESPROC glClearAccumxOES;
extern PFNGLCLEARCOLORXOESPROC glClearColorxOES;
extern PFNGLCLEARDEPTHXOESPROC glClearDepthxOES;
extern PFNGLCLIPPLANEXOESPROC glClipPlanexOES;
extern PFNGLCOLOR3XOESPROC glColor3xOES;
extern PFNGLCOLOR4XOESPROC glColor4xOES;
extern PFNGLCOLOR3XVOESPROC glColor3xvOES;
extern PFNGLCOLOR4XVOESPROC glColor4xvOES;
extern PFNGLCONVOLUTIONPARAMETERXOESPROC glConvolutionParameterxOES;
extern PFNGLCONVOLUTIONPARAMETERXVOESPROC glConvolutionParameterxvOES;
extern PFNGLDEPTHRANGEXOESPROC glDepthRangexOES;
extern PFNGLEVALCOORD1XOESPROC glEvalCoord1xOES;
extern PFNGLEVALCOORD2XOESPROC glEvalCoord2xOES;
extern PFNGLEVALCOORD1XVOESPROC glEvalCoord1xvOES;
extern PFNGLEVALCOORD2XVOESPROC glEvalCoord2xvOES;
extern PFNGLFEEDBACKBUFFERXOESPROC glFeedbackBufferxOES;
extern PFNGLFOGXOESPROC glFogxOES;
extern PFNGLFOGXVOESPROC glFogxvOES;
extern PFNGLFRUSTUMXOESPROC glFrustumxOES;
extern PFNGLGETCLIPPLANEXOESPROC glGetClipPlanexOES;
extern PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glGetConvolutionParameterxvOES;
extern PFNGLGETFIXEDVOESPROC glGetFixedvOES;
extern PFNGLGETHISTOGRAMPARAMETERXVOESPROC glGetHistogramParameterxvOES;
extern PFNGLGETLIGHTXOESPROC glGetLightxOES;
extern PFNGLGETMAPXVOESPROC glGetMapxvOES;
extern PFNGLGETMATERIALXOESPROC glGetMaterialxOES;
extern PFNGLGETPIXELMAPXVPROC glGetPixelMapxv;
extern PFNGLGETTEXENVXVOESPROC glGetTexEnvxvOES;
extern PFNGLGETTEXGENXVOESPROC glGetTexGenxvOES;
extern PFNGLGETTEXLEVELPARAMETERXVOESPROC glGetTexLevelParameterxvOES;
extern PFNGLGETTEXPARAMETERXVOESPROC glGetTexParameterxvOES;
extern PFNGLINDEXXOESPROC glIndexxOES;
extern PFNGLINDEXXVOESPROC glIndexxvOES;
extern PFNGLLIGHTMODELXOESPROC glLightModelxOES;
extern PFNGLLIGHTMODELXVOESPROC glLightModelxvOES;
extern PFNGLLIGHTXOESPROC glLightxOES;
extern PFNGLLIGHTXVOESPROC glLightxvOES;
extern PFNGLLINEWIDTHXOESPROC glLineWidthxOES;
extern PFNGLLOADMATRIXXOESPROC glLoadMatrixxOES;
extern PFNGLLOADTRANSPOSEMATRIXXOESPROC glLoadTransposeMatrixxOES;
extern PFNGLMAP1XOESPROC glMap1xOES;
extern PFNGLMAP2XOESPROC glMap2xOES;
extern PFNGLMAPGRID1XOESPROC glMapGrid1xOES;
extern PFNGLMAPGRID2XOESPROC glMapGrid2xOES;
extern PFNGLMATERIALXOESPROC glMaterialxOES;
extern PFNGLMATERIALXVOESPROC glMaterialxvOES;
extern PFNGLMULTMATRIXXOESPROC glMultMatrixxOES;
extern PFNGLMULTTRANSPOSEMATRIXXOESPROC glMultTransposeMatrixxOES;
extern PFNGLMULTITEXCOORD1XOESPROC glMultiTexCoord1xOES;
extern PFNGLMULTITEXCOORD2XOESPROC glMultiTexCoord2xOES;
extern PFNGLMULTITEXCOORD3XOESPROC glMultiTexCoord3xOES;
extern PFNGLMULTITEXCOORD4XOESPROC glMultiTexCoord4xOES;
extern PFNGLMULTITEXCOORD1XVOESPROC glMultiTexCoord1xvOES;
extern PFNGLMULTITEXCOORD2XVOESPROC glMultiTexCoord2xvOES;
extern PFNGLMULTITEXCOORD3XVOESPROC glMultiTexCoord3xvOES;
extern PFNGLMULTITEXCOORD4XVOESPROC glMultiTexCoord4xvOES;
extern PFNGLNORMAL3XOESPROC glNormal3xOES;
extern PFNGLNORMAL3XVOESPROC glNormal3xvOES;
extern PFNGLORTHOXOESPROC glOrthoxOES;
extern PFNGLPASSTHROUGHXOESPROC glPassThroughxOES;
extern PFNGLPIXELMAPXPROC glPixelMapx;
extern PFNGLPIXELSTOREXPROC glPixelStorex;
extern PFNGLPIXELTRANSFERXOESPROC glPixelTransferxOES;
extern PFNGLPIXELZOOMXOESPROC glPixelZoomxOES;
extern PFNGLPOINTPARAMETERXVOESPROC glPointParameterxvOES;
extern PFNGLPOINTSIZEXOESPROC glPointSizexOES;
extern PFNGLPOLYGONOFFSETXOESPROC glPolygonOffsetxOES;
extern PFNGLPRIORITIZETEXTURESXOESPROC glPrioritizeTexturesxOES;
extern PFNGLRASTERPOS2XOESPROC glRasterPos2xOES;
extern PFNGLRASTERPOS3XOESPROC glRasterPos3xOES;
extern PFNGLRASTERPOS4XOESPROC glRasterPos4xOES;
extern PFNGLRASTERPOS2XVOESPROC glRasterPos2xvOES;
extern PFNGLRASTERPOS3XVOESPROC glRasterPos3xvOES;
extern PFNGLRASTERPOS4XVOESPROC glRasterPos4xvOES;
extern PFNGLRECTXOESPROC glRectxOES;
extern PFNGLRECTXVOESPROC glRectxvOES;
extern PFNGLROTATEXOESPROC glRotatexOES;
extern PFNGLSAMPLECOVERAGEOESPROC glSampleCoverageOES;
extern PFNGLSCALEXOESPROC glScalexOES;
extern PFNGLTEXCOORD1XOESPROC glTexCoord1xOES;
extern PFNGLTEXCOORD2XOESPROC glTexCoord2xOES;
extern PFNGLTEXCOORD3XOESPROC glTexCoord3xOES;
extern PFNGLTEXCOORD4XOESPROC glTexCoord4xOES;
extern PFNGLTEXCOORD1XVOESPROC glTexCoord1xvOES;
extern PFNGLTEXCOORD2XVOESPROC glTexCoord2xvOES;
extern PFNGLTEXCOORD3XVOESPROC glTexCoord3xvOES;
extern PFNGLTEXCOORD4XVOESPROC glTexCoord4xvOES;
extern PFNGLTEXENVXOESPROC glTexEnvxOES;
extern PFNGLTEXENVXVOESPROC glTexEnvxvOES;
extern PFNGLTEXGENXOESPROC glTexGenxOES;
extern PFNGLTEXGENXVOESPROC glTexGenxvOES;
extern PFNGLTEXPARAMETERXOESPROC glTexParameterxOES;
extern PFNGLTEXPARAMETERXVOESPROC glTexParameterxvOES;
extern PFNGLTRANSLATEXOESPROC glTranslatexOES;
extern PFNGLVERTEX2XOESPROC glVertex2xOES;
extern PFNGLVERTEX3XOESPROC glVertex3xOES;
extern PFNGLVERTEX4XOESPROC glVertex4xOES;
extern PFNGLVERTEX2XVOESPROC glVertex2xvOES;
extern PFNGLVERTEX3XVOESPROC glVertex3xvOES;
extern PFNGLVERTEX4XVOESPROC glVertex4xvOES;
extern PFNGLDEPTHRANGEFOESPROC glDepthRangefOES;
extern PFNGLFRUSTUMFOESPROC glFrustumfOES;
extern PFNGLORTHOFOESPROC glOrthofOES;
extern PFNGLCLIPPLANEFOESPROC glClipPlanefOES;
extern PFNGLCLEARDEPTHFOESPROC glClearDepthfOES;
extern PFNGLGETCLIPPLANEFOESPROC glGetClipPlanefOES;
extern PFNGLQUERYMATRIXXOESPROC glQueryMatrixxOES;
extern PFNGLDEPTHBOUNDSEXTPROC glDepthBoundsEXT;
extern PFNGLBLENDEQUATIONSEPARATEEXTPROC glBlendEquationSeparateEXT;
extern PFNGLISRENDERBUFFEREXTPROC glIsRenderbufferEXT;
extern PFNGLBINDRENDERBUFFEREXTPROC glBindRenderbufferEXT;
extern PFNGLDELETERENDERBUFFERSEXTPROC glDeleteRenderbuffersEXT;
extern PFNGLGENRENDERBUFFERSEXTPROC glGenRenderbuffersEXT;
extern PFNGLRENDERBUFFERSTORAGEEXTPROC glRenderbufferStorageEXT;
extern PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glGetRenderbufferParameterivEXT;
extern PFNGLISFRAMEBUFFEREXTPROC glIsFramebufferEXT;
extern PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebufferEXT;
extern PFNGLDELETEFRAMEBUFFERSEXTPROC glDeleteFramebuffersEXT;
extern PFNGLGENFRAMEBUFFERSEXTPROC glGenFramebuffersEXT;
extern PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glCheckFramebufferStatusEXT;
extern PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glFramebufferTexture1DEXT;
extern PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glFramebufferTexture2DEXT;
extern PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glFramebufferTexture3DEXT;
extern PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glFramebufferRenderbufferEXT;
extern PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetFramebufferAttachmentParameterivEXT;
extern PFNGLGENERATEMIPMAPEXTPROC glGenerateMipmapEXT;
extern PFNGLSTRINGMARKERGREMEDYPROC glStringMarkerGREMEDY;
extern PFNGLSTENCILCLEARTAGEXTPROC glStencilClearTagEXT;
extern PFNGLBLITFRAMEBUFFEREXTPROC glBlitFramebufferEXT;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glRenderbufferStorageMultisampleEXT;
extern PFNGLGETQUERYOBJECTI64VEXTPROC glGetQueryObjecti64vEXT;
extern PFNGLGETQUERYOBJECTUI64VEXTPROC glGetQueryObjectui64vEXT;
extern PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glProgramEnvParameters4fvEXT;
extern PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glProgramLocalParameters4fvEXT;
extern PFNGLBUFFERPARAMETERIAPPLEPROC glBufferParameteriAPPLE;
extern PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glFlushMappedBufferRangeAPPLE;
extern PFNGLPROGRAMLOCALPARAMETERI4INVPROC glProgramLocalParameterI4iNV;
extern PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glProgramLocalParameterI4ivNV;
extern PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glProgramLocalParametersI4ivNV;
extern PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glProgramLocalParameterI4uiNV;
extern PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glProgramLocalParameterI4uivNV;
extern PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glProgramLocalParametersI4uivNV;
extern PFNGLPROGRAMENVPARAMETERI4INVPROC glProgramEnvParameterI4iNV;
extern PFNGLPROGRAMENVPARAMETERI4IVNVPROC glProgramEnvParameterI4ivNV;
extern PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glProgramEnvParametersI4ivNV;
extern PFNGLPROGRAMENVPARAMETERI4UINVPROC glProgramEnvParameterI4uiNV;
extern PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glProgramEnvParameterI4uivNV;
extern PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glProgramEnvParametersI4uivNV;
extern PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glGetProgramLocalParameterIivNV;
extern PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glGetProgramLocalParameterIuivNV;
extern PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glGetProgramEnvParameterIivNV;
extern PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glGetProgramEnvParameterIuivNV;
extern PFNGLPROGRAMVERTEXLIMITNVPROC glProgramVertexLimitNV;
extern PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
extern PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glFramebufferTextureLayerEXT;
extern PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glFramebufferTextureFaceEXT;
extern PFNGLPROGRAMPARAMETERIEXTPROC glProgramParameteriEXT;
extern PFNGLVERTEXATTRIBI1IEXTPROC glVertexAttribI1iEXT;
extern PFNGLVERTEXATTRIBI2IEXTPROC glVertexAttribI2iEXT;
extern PFNGLVERTEXATTRIBI3IEXTPROC glVertexAttribI3iEXT;
extern PFNGLVERTEXATTRIBI4IEXTPROC glVertexAttribI4iEXT;
extern PFNGLVERTEXATTRIBI1UIEXTPROC glVertexAttribI1uiEXT;
extern PFNGLVERTEXATTRIBI2UIEXTPROC glVertexAttribI2uiEXT;
extern PFNGLVERTEXATTRIBI3UIEXTPROC glVertexAttribI3uiEXT;
extern PFNGLVERTEXATTRIBI4UIEXTPROC glVertexAttribI4uiEXT;
extern PFNGLVERTEXATTRIBI1IVEXTPROC glVertexAttribI1ivEXT;
extern PFNGLVERTEXATTRIBI2IVEXTPROC glVertexAttribI2ivEXT;
extern PFNGLVERTEXATTRIBI3IVEXTPROC glVertexAttribI3ivEXT;
extern PFNGLVERTEXATTRIBI4IVEXTPROC glVertexAttribI4ivEXT;
extern PFNGLVERTEXATTRIBI1UIVEXTPROC glVertexAttribI1uivEXT;
extern PFNGLVERTEXATTRIBI2UIVEXTPROC glVertexAttribI2uivEXT;
extern PFNGLVERTEXATTRIBI3UIVEXTPROC glVertexAttribI3uivEXT;
extern PFNGLVERTEXATTRIBI4UIVEXTPROC glVertexAttribI4uivEXT;
extern PFNGLVERTEXATTRIBI4BVEXTPROC glVertexAttribI4bvEXT;
extern PFNGLVERTEXATTRIBI4SVEXTPROC glVertexAttribI4svEXT;
extern PFNGLVERTEXATTRIBI4UBVEXTPROC glVertexAttribI4ubvEXT;
extern PFNGLVERTEXATTRIBI4USVEXTPROC glVertexAttribI4usvEXT;
extern PFNGLVERTEXATTRIBIPOINTEREXTPROC glVertexAttribIPointerEXT;
extern PFNGLGETVERTEXATTRIBIIVEXTPROC glGetVertexAttribIivEXT;
extern PFNGLGETVERTEXATTRIBIUIVEXTPROC glGetVertexAttribIuivEXT;
extern PFNGLGETUNIFORMUIVEXTPROC glGetUniformuivEXT;
extern PFNGLBINDFRAGDATALOCATIONEXTPROC glBindFragDataLocationEXT;
extern PFNGLGETFRAGDATALOCATIONEXTPROC glGetFragDataLocationEXT;
extern PFNGLUNIFORM1UIEXTPROC glUniform1uiEXT;
extern PFNGLUNIFORM2UIEXTPROC glUniform2uiEXT;
extern PFNGLUNIFORM3UIEXTPROC glUniform3uiEXT;
extern PFNGLUNIFORM4UIEXTPROC glUniform4uiEXT;
extern PFNGLUNIFORM1UIVEXTPROC glUniform1uivEXT;
extern PFNGLUNIFORM2UIVEXTPROC glUniform2uivEXT;
extern PFNGLUNIFORM3UIVEXTPROC glUniform3uivEXT;
extern PFNGLUNIFORM4UIVEXTPROC glUniform4uivEXT;
extern PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
extern PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
extern PFNGLTEXBUFFEREXTPROC glTexBufferEXT;
extern PFNGLDEPTHRANGEDNVPROC glDepthRangedNV;
extern PFNGLCLEARDEPTHDNVPROC glClearDepthdNV;
extern PFNGLDEPTHBOUNDSDNVPROC glDepthBoundsdNV;
extern PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glRenderbufferStorageMultisampleCoverageNV;
extern PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glProgramBufferParametersfvNV;
extern PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glProgramBufferParametersIivNV;
extern PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glProgramBufferParametersIuivNV;
extern PFNGLCOLORMASKINDEXEDEXTPROC glColorMaskIndexedEXT;
extern PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT;
extern PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT;
extern PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT;
extern PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT;
extern PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT;
extern PFNGLBEGINTRANSFORMFEEDBACKNVPROC glBeginTransformFeedbackNV;
extern PFNGLENDTRANSFORMFEEDBACKNVPROC glEndTransformFeedbackNV;
extern PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glTransformFeedbackAttribsNV;
extern PFNGLBINDBUFFERRANGENVPROC glBindBufferRangeNV;
extern PFNGLBINDBUFFEROFFSETNVPROC glBindBufferOffsetNV;
extern PFNGLBINDBUFFERBASENVPROC glBindBufferBaseNV;
extern PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glTransformFeedbackVaryingsNV;
extern PFNGLACTIVEVARYINGNVPROC glActiveVaryingNV;
extern PFNGLGETVARYINGLOCATIONNVPROC glGetVaryingLocationNV;
extern PFNGLGETACTIVEVARYINGNVPROC glGetActiveVaryingNV;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glGetTransformFeedbackVaryingNV;
extern PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glTransformFeedbackStreamAttribsNV;
extern PFNGLUNIFORMBUFFEREXTPROC glUniformBufferEXT;
extern PFNGLGETUNIFORMBUFFERSIZEEXTPROC glGetUniformBufferSizeEXT;
extern PFNGLGETUNIFORMOFFSETEXTPROC glGetUniformOffsetEXT;
extern PFNGLTEXPARAMETERIIVEXTPROC glTexParameterIivEXT;
extern PFNGLTEXPARAMETERIUIVEXTPROC glTexParameterIuivEXT;
extern PFNGLGETTEXPARAMETERIIVEXTPROC glGetTexParameterIivEXT;
extern PFNGLGETTEXPARAMETERIUIVEXTPROC glGetTexParameterIuivEXT;
extern PFNGLCLEARCOLORIIEXTPROC glClearColorIiEXT;
extern PFNGLCLEARCOLORIUIEXTPROC glClearColorIuiEXT;
extern PFNGLFRAMETERMINATORGREMEDYPROC glFrameTerminatorGREMEDY;
extern PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV;
extern PFNGLENDCONDITIONALRENDERNVPROC glEndConditionalRenderNV;
extern PFNGLPRESENTFRAMEKEYEDNVPROC glPresentFrameKeyedNV;
extern PFNGLPRESENTFRAMEDUALFILLNVPROC glPresentFrameDualFillNV;
extern PFNGLGETVIDEOIVNVPROC glGetVideoivNV;
extern PFNGLGETVIDEOUIVNVPROC glGetVideouivNV;
extern PFNGLGETVIDEOI64VNVPROC glGetVideoi64vNV;
extern PFNGLGETVIDEOUI64VNVPROC glGetVideoui64vNV;
extern PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glBeginTransformFeedbackEXT;
extern PFNGLENDTRANSFORMFEEDBACKEXTPROC glEndTransformFeedbackEXT;
extern PFNGLBINDBUFFERRANGEEXTPROC glBindBufferRangeEXT;
extern PFNGLBINDBUFFEROFFSETEXTPROC glBindBufferOffsetEXT;
extern PFNGLBINDBUFFERBASEEXTPROC glBindBufferBaseEXT;
extern PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glTransformFeedbackVaryingsEXT;
extern PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glGetTransformFeedbackVaryingEXT;
extern PFNGLCLIENTATTRIBDEFAULTEXTPROC glClientAttribDefaultEXT;
extern PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glPushClientAttribDefaultEXT;
extern PFNGLMATRIXLOADFEXTPROC glMatrixLoadfEXT;
extern PFNGLMATRIXLOADDEXTPROC glMatrixLoaddEXT;
extern PFNGLMATRIXMULTFEXTPROC glMatrixMultfEXT;
extern PFNGLMATRIXMULTDEXTPROC glMatrixMultdEXT;
extern PFNGLMATRIXLOADIDENTITYEXTPROC glMatrixLoadIdentityEXT;
extern PFNGLMATRIXROTATEFEXTPROC glMatrixRotatefEXT;
extern PFNGLMATRIXROTATEDEXTPROC glMatrixRotatedEXT;
extern PFNGLMATRIXSCALEFEXTPROC glMatrixScalefEXT;
extern PFNGLMATRIXSCALEDEXTPROC glMatrixScaledEXT;
extern PFNGLMATRIXTRANSLATEFEXTPROC glMatrixTranslatefEXT;
extern PFNGLMATRIXTRANSLATEDEXTPROC glMatrixTranslatedEXT;
extern PFNGLMATRIXFRUSTUMEXTPROC glMatrixFrustumEXT;
extern PFNGLMATRIXORTHOEXTPROC glMatrixOrthoEXT;
extern PFNGLMATRIXPOPEXTPROC glMatrixPopEXT;
extern PFNGLMATRIXPUSHEXTPROC glMatrixPushEXT;
extern PFNGLMATRIXLOADTRANSPOSEFEXTPROC glMatrixLoadTransposefEXT;
extern PFNGLMATRIXLOADTRANSPOSEDEXTPROC glMatrixLoadTransposedEXT;
extern PFNGLMATRIXMULTTRANSPOSEFEXTPROC glMatrixMultTransposefEXT;
extern PFNGLMATRIXMULTTRANSPOSEDEXTPROC glMatrixMultTransposedEXT;
extern PFNGLTEXTUREPARAMETERFEXTPROC glTextureParameterfEXT;
extern PFNGLTEXTUREPARAMETERFVEXTPROC glTextureParameterfvEXT;
extern PFNGLTEXTUREPARAMETERIEXTPROC glTextureParameteriEXT;
extern PFNGLTEXTUREPARAMETERIVEXTPROC glTextureParameterivEXT;
extern PFNGLTEXTUREIMAGE1DEXTPROC glTextureImage1DEXT;
extern PFNGLTEXTUREIMAGE2DEXTPROC glTextureImage2DEXT;
extern PFNGLTEXTURESUBIMAGE1DEXTPROC glTextureSubImage1DEXT;
extern PFNGLTEXTURESUBIMAGE2DEXTPROC glTextureSubImage2DEXT;
extern PFNGLCOPYTEXTUREIMAGE1DEXTPROC glCopyTextureImage1DEXT;
extern PFNGLCOPYTEXTUREIMAGE2DEXTPROC glCopyTextureImage2DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glCopyTextureSubImage1DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glCopyTextureSubImage2DEXT;
extern PFNGLGETTEXTUREIMAGEEXTPROC glGetTextureImageEXT;
extern PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
extern PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
extern PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
extern PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
extern PFNGLTEXTUREIMAGE3DEXTPROC glTextureImage3DEXT;
extern PFNGLTEXTURESUBIMAGE3DEXTPROC glTextureSubImage3DEXT;
extern PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glCopyTextureSubImage3DEXT;
extern PFNGLMULTITEXPARAMETERFEXTPROC glMultiTexParameterfEXT;
extern PFNGLMULTITEXPARAMETERFVEXTPROC glMultiTexParameterfvEXT;
extern PFNGLMULTITEXPARAMETERIEXTPROC glMultiTexParameteriEXT;
extern PFNGLMULTITEXPARAMETERIVEXTPROC glMultiTexParameterivEXT;
extern PFNGLMULTITEXIMAGE1DEXTPROC glMultiTexImage1DEXT;
extern PFNGLMULTITEXIMAGE2DEXTPROC glMultiTexImage2DEXT;
extern PFNGLMULTITEXSUBIMAGE1DEXTPROC glMultiTexSubImage1DEXT;
extern PFNGLMULTITEXSUBIMAGE2DEXTPROC glMultiTexSubImage2DEXT;
extern PFNGLCOPYMULTITEXIMAGE1DEXTPROC glCopyMultiTexImage1DEXT;
extern PFNGLCOPYMULTITEXIMAGE2DEXTPROC glCopyMultiTexImage2DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glCopyMultiTexSubImage1DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glCopyMultiTexSubImage2DEXT;
extern PFNGLGETMULTITEXIMAGEEXTPROC glGetMultiTexImageEXT;
extern PFNGLGETMULTITEXPARAMETERFVEXTPROC glGetMultiTexParameterfvEXT;
extern PFNGLGETMULTITEXPARAMETERIVEXTPROC glGetMultiTexParameterivEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glGetMultiTexLevelParameterfvEXT;
extern PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glGetMultiTexLevelParameterivEXT;
extern PFNGLMULTITEXIMAGE3DEXTPROC glMultiTexImage3DEXT;
extern PFNGLMULTITEXSUBIMAGE3DEXTPROC glMultiTexSubImage3DEXT;
extern PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glCopyMultiTexSubImage3DEXT;
extern PFNGLBINDMULTITEXTUREEXTPROC glBindMultiTextureEXT;
extern PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glEnableClientStateIndexedEXT;
extern PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glDisableClientStateIndexedEXT;
extern PFNGLMULTITEXCOORDPOINTEREXTPROC glMultiTexCoordPointerEXT;
extern PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
extern PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
extern PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
extern PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
extern PFNGLMULTITEXGENDEXTPROC glMultiTexGendEXT;
extern PFNGLMULTITEXGENDVEXTPROC glMultiTexGendvEXT;
extern PFNGLMULTITEXGENFEXTPROC glMultiTexGenfEXT;
extern PFNGLMULTITEXGENFVEXTPROC glMultiTexGenfvEXT;
extern PFNGLMULTITEXGENIEXTPROC glMultiTexGeniEXT;
extern PFNGLMULTITEXGENIVEXTPROC glMultiTexGenivEXT;
extern PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
extern PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
extern PFNGLGETMULTITEXGENDVEXTPROC glGetMultiTexGendvEXT;
extern PFNGLGETMULTITEXGENFVEXTPROC glGetMultiTexGenfvEXT;
extern PFNGLGETMULTITEXGENIVEXTPROC glGetMultiTexGenivEXT;
extern PFNGLGETFLOATINDEXEDVEXTPROC glGetFloatIndexedvEXT;
extern PFNGLGETDOUBLEINDEXEDVEXTPROC glGetDoubleIndexedvEXT;
extern PFNGLGETPOINTERINDEXEDVEXTPROC glGetPointerIndexedvEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glCompressedTextureImage3DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glCompressedTextureImage2DEXT;
extern PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glCompressedTextureImage1DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glCompressedTextureSubImage3DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glCompressedTextureSubImage2DEXT;
extern PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glCompressedTextureSubImage1DEXT;
extern PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glGetCompressedTextureImageEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glCompressedMultiTexImage3DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glCompressedMultiTexImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glCompressedMultiTexImage1DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glCompressedMultiTexSubImage3DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glCompressedMultiTexSubImage2DEXT;
extern PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glCompressedMultiTexSubImage1DEXT;
extern PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glGetCompressedMultiTexImageEXT;
extern PFNGLNAMEDPROGRAMSTRINGEXTPROC glNamedProgramStringEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glNamedProgramLocalParameter4dEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glNamedProgramLocalParameter4dvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glNamedProgramLocalParameter4fEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glNamedProgramLocalParameter4fvEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glGetNamedProgramLocalParameterdvEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glGetNamedProgramLocalParameterfvEXT;
extern PFNGLGETNAMEDPROGRAMIVEXTPROC glGetNamedProgramivEXT;
extern PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glGetNamedProgramStringEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glNamedProgramLocalParameters4fvEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glNamedProgramLocalParameterI4iEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glNamedProgramLocalParameterI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glNamedProgramLocalParametersI4ivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glNamedProgramLocalParameterI4uiEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glNamedProgramLocalParameterI4uivEXT;
extern PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glNamedProgramLocalParametersI4uivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glGetNamedProgramLocalParameterIivEXT;
extern PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glGetNamedProgramLocalParameterIuivEXT;
extern PFNGLTEXTUREPARAMETERIIVEXTPROC glTextureParameterIivEXT;
extern PFNGLTEXTUREPARAMETERIUIVEXTPROC glTextureParameterIuivEXT;
extern PFNGLGETTEXTUREPARAMETERIIVEXTPROC glGetTextureParameterIivEXT;
extern PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glGetTextureParameterIuivEXT;
extern PFNGLMULTITEXPARAMETERIIVEXTPROC glMultiTexParameterIivEXT;
extern PFNGLMULTITEXPARAMETERIUIVEXTPROC glMultiTexParameterIuivEXT;
extern PFNGLGETMULTITEXPARAMETERIIVEXTPROC glGetMultiTexParameterIivEXT;
extern PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glGetMultiTexParameterIuivEXT;
extern PFNGLPROGRAMUNIFORM1FEXTPROC glProgramUniform1fEXT;
extern PFNGLPROGRAMUNIFORM2FEXTPROC glProgramUniform2fEXT;
extern PFNGLPROGRAMUNIFORM3FEXTPROC glProgramUniform3fEXT;
extern PFNGLPROGRAMUNIFORM4FEXTPROC glProgramUniform4fEXT;
extern PFNGLPROGRAMUNIFORM1IEXTPROC glProgramUniform1iEXT;
extern PFNGLPROGRAMUNIFORM2IEXTPROC glProgramUniform2iEXT;
extern PFNGLPROGRAMUNIFORM3IEXTPROC glProgramUniform3iEXT;
extern PFNGLPROGRAMUNIFORM4IEXTPROC glProgramUniform4iEXT;
extern PFNGLPROGRAMUNIFORM1FVEXTPROC glProgramUniform1fvEXT;
extern PFNGLPROGRAMUNIFORM2FVEXTPROC glProgramUniform2fvEXT;
extern PFNGLPROGRAMUNIFORM3FVEXTPROC glProgramUniform3fvEXT;
extern PFNGLPROGRAMUNIFORM4FVEXTPROC glProgramUniform4fvEXT;
extern PFNGLPROGRAMUNIFORM1IVEXTPROC glProgramUniform1ivEXT;
extern PFNGLPROGRAMUNIFORM2IVEXTPROC glProgramUniform2ivEXT;
extern PFNGLPROGRAMUNIFORM3IVEXTPROC glProgramUniform3ivEXT;
extern PFNGLPROGRAMUNIFORM4IVEXTPROC glProgramUniform4ivEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glProgramUniformMatrix2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glProgramUniformMatrix3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glProgramUniformMatrix4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glProgramUniformMatrix2x3fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glProgramUniformMatrix3x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glProgramUniformMatrix2x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glProgramUniformMatrix4x2fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glProgramUniformMatrix3x4fvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glProgramUniformMatrix4x3fvEXT;
extern PFNGLPROGRAMUNIFORM1UIEXTPROC glProgramUniform1uiEXT;
extern PFNGLPROGRAMUNIFORM2UIEXTPROC glProgramUniform2uiEXT;
extern PFNGLPROGRAMUNIFORM3UIEXTPROC glProgramUniform3uiEXT;
extern PFNGLPROGRAMUNIFORM4UIEXTPROC glProgramUniform4uiEXT;
extern PFNGLPROGRAMUNIFORM1UIVEXTPROC glProgramUniform1uivEXT;
extern PFNGLPROGRAMUNIFORM2UIVEXTPROC glProgramUniform2uivEXT;
extern PFNGLPROGRAMUNIFORM3UIVEXTPROC glProgramUniform3uivEXT;
extern PFNGLPROGRAMUNIFORM4UIVEXTPROC glProgramUniform4uivEXT;
extern PFNGLNAMEDBUFFERDATAEXTPROC glNamedBufferDataEXT;
extern PFNGLNAMEDBUFFERSUBDATAEXTPROC glNamedBufferSubDataEXT;
extern PFNGLMAPNAMEDBUFFEREXTPROC glMapNamedBufferEXT;
extern PFNGLUNMAPNAMEDBUFFEREXTPROC glUnmapNamedBufferEXT;
extern PFNGLMAPNAMEDBUFFERRANGEEXTPROC glMapNamedBufferRangeEXT;
extern PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glFlushMappedNamedBufferRangeEXT;
extern PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glNamedCopyBufferSubDataEXT;
extern PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glGetNamedBufferParameterivEXT;
extern PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glGetNamedBufferPointervEXT;
extern PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glGetNamedBufferSubDataEXT;
extern PFNGLTEXTUREBUFFEREXTPROC glTextureBufferEXT;
extern PFNGLMULTITEXBUFFEREXTPROC glMultiTexBufferEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glNamedRenderbufferStorageEXT;
extern PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glGetNamedRenderbufferParameterivEXT;
extern PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glCheckNamedFramebufferStatusEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glNamedFramebufferTexture1DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glNamedFramebufferTexture2DEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glNamedFramebufferTexture3DEXT;
extern PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glNamedFramebufferRenderbufferEXT;
extern PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetNamedFramebufferAttachmentParameterivEXT;
extern PFNGLGENERATETEXTUREMIPMAPEXTPROC glGenerateTextureMipmapEXT;
extern PFNGLGENERATEMULTITEXMIPMAPEXTPROC glGenerateMultiTexMipmapEXT;
extern PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glFramebufferDrawBufferEXT;
extern PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glFramebufferDrawBuffersEXT;
extern PFNGLFRAMEBUFFERREADBUFFEREXTPROC glFramebufferReadBufferEXT;
extern PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glGetFramebufferParameterivEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glNamedRenderbufferStorageMultisampleEXT;
extern PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glNamedRenderbufferStorageMultisampleCoverageEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glNamedFramebufferTextureEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glNamedFramebufferTextureLayerEXT;
extern PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glNamedFramebufferTextureFaceEXT;
extern PFNGLTEXTURERENDERBUFFEREXTPROC glTextureRenderbufferEXT;
extern PFNGLMULTITEXRENDERBUFFEREXTPROC glMultiTexRenderbufferEXT;
extern PFNGLPROGRAMUNIFORM1DEXTPROC glProgramUniform1dEXT;
extern PFNGLPROGRAMUNIFORM2DEXTPROC glProgramUniform2dEXT;
extern PFNGLPROGRAMUNIFORM3DEXTPROC glProgramUniform3dEXT;
extern PFNGLPROGRAMUNIFORM4DEXTPROC glProgramUniform4dEXT;
extern PFNGLPROGRAMUNIFORM1DVEXTPROC glProgramUniform1dvEXT;
extern PFNGLPROGRAMUNIFORM2DVEXTPROC glProgramUniform2dvEXT;
extern PFNGLPROGRAMUNIFORM3DVEXTPROC glProgramUniform3dvEXT;
extern PFNGLPROGRAMUNIFORM4DVEXTPROC glProgramUniform4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glProgramUniformMatrix2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glProgramUniformMatrix3dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glProgramUniformMatrix4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glProgramUniformMatrix2x3dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glProgramUniformMatrix2x4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glProgramUniformMatrix3x2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glProgramUniformMatrix3x4dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glProgramUniformMatrix4x2dvEXT;
extern PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glProgramUniformMatrix4x3dvEXT;
extern PFNGLGETMULTISAMPLEFVNVPROC glGetMultisamplefvNV;
extern PFNGLSAMPLEMASKINDEXEDNVPROC glSampleMaskIndexedNV;
extern PFNGLTEXRENDERBUFFERNVPROC glTexRenderbufferNV;
extern PFNGLBINDTRANSFORMFEEDBACKNVPROC glBindTransformFeedbackNV;
extern PFNGLDELETETRANSFORMFEEDBACKSNVPROC glDeleteTransformFeedbacksNV;
extern PFNGLGENTRANSFORMFEEDBACKSNVPROC glGenTransformFeedbacksNV;
extern PFNGLISTRANSFORMFEEDBACKNVPROC glIsTransformFeedbackNV;
extern PFNGLPAUSETRANSFORMFEEDBACKNVPROC glPauseTransformFeedbackNV;
extern PFNGLRESUMETRANSFORMFEEDBACKNVPROC glResumeTransformFeedbackNV;
extern PFNGLDRAWTRANSFORMFEEDBACKNVPROC glDrawTransformFeedbackNV;
extern PFNGLGETPERFMONITORGROUPSAMDPROC glGetPerfMonitorGroupsAMD;
extern PFNGLGETPERFMONITORCOUNTERSAMDPROC glGetPerfMonitorCountersAMD;
extern PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glGetPerfMonitorGroupStringAMD;
extern PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glGetPerfMonitorCounterStringAMD;
extern PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glGetPerfMonitorCounterInfoAMD;
extern PFNGLGENPERFMONITORSAMDPROC glGenPerfMonitorsAMD;
extern PFNGLDELETEPERFMONITORSAMDPROC glDeletePerfMonitorsAMD;
extern PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glSelectPerfMonitorCountersAMD;
extern PFNGLBEGINPERFMONITORAMDPROC glBeginPerfMonitorAMD;
extern PFNGLENDPERFMONITORAMDPROC glEndPerfMonitorAMD;
extern PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glGetPerfMonitorCounterDataAMD;
extern PFNGLTESSELLATIONFACTORAMDPROC glTessellationFactorAMD;
extern PFNGLTESSELLATIONMODEAMDPROC glTessellationModeAMD;
extern PFNGLPROVOKINGVERTEXEXTPROC glProvokingVertexEXT;
extern PFNGLBLENDFUNCINDEXEDAMDPROC glBlendFuncIndexedAMD;
extern PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glBlendFuncSeparateIndexedAMD;
extern PFNGLBLENDEQUATIONINDEXEDAMDPROC glBlendEquationIndexedAMD;
extern PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glBlendEquationSeparateIndexedAMD;
extern PFNGLTEXTURERANGEAPPLEPROC glTextureRangeAPPLE;
extern PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glGetTexParameterPointervAPPLE;
extern PFNGLENABLEVERTEXATTRIBAPPLEPROC glEnableVertexAttribAPPLE;
extern PFNGLDISABLEVERTEXATTRIBAPPLEPROC glDisableVertexAttribAPPLE;
extern PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glIsVertexAttribEnabledAPPLE;
extern PFNGLMAPVERTEXATTRIB1DAPPLEPROC glMapVertexAttrib1dAPPLE;
extern PFNGLMAPVERTEXATTRIB1FAPPLEPROC glMapVertexAttrib1fAPPLE;
extern PFNGLMAPVERTEXATTRIB2DAPPLEPROC glMapVertexAttrib2dAPPLE;
extern PFNGLMAPVERTEXATTRIB2FAPPLEPROC glMapVertexAttrib2fAPPLE;
extern PFNGLOBJECTPURGEABLEAPPLEPROC glObjectPurgeableAPPLE;
extern PFNGLOBJECTUNPURGEABLEAPPLEPROC glObjectUnpurgeableAPPLE;
extern PFNGLGETOBJECTPARAMETERIVAPPLEPROC glGetObjectParameterivAPPLE;
extern PFNGLBEGINVIDEOCAPTURENVPROC glBeginVideoCaptureNV;
extern PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glBindVideoCaptureStreamBufferNV;
extern PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glBindVideoCaptureStreamTextureNV;
extern PFNGLENDVIDEOCAPTURENVPROC glEndVideoCaptureNV;
extern PFNGLGETVIDEOCAPTUREIVNVPROC glGetVideoCaptureivNV;
extern PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glGetVideoCaptureStreamivNV;
extern PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glGetVideoCaptureStreamfvNV;
extern PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glGetVideoCaptureStreamdvNV;
extern PFNGLVIDEOCAPTURENVPROC glVideoCaptureNV;
extern PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glVideoCaptureStreamParameterivNV;
extern PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glVideoCaptureStreamParameterfvNV;
extern PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glVideoCaptureStreamParameterdvNV;
extern PFNGLCOPYIMAGESUBDATANVPROC glCopyImageSubDataNV;
extern PFNGLUSESHADERPROGRAMEXTPROC glUseShaderProgramEXT;
extern PFNGLACTIVEPROGRAMEXTPROC glActiveProgramEXT;
extern PFNGLCREATESHADERPROGRAMEXTPROC glCreateShaderProgramEXT;
extern PFNGLMAKEBUFFERRESIDENTNVPROC glMakeBufferResidentNV;
extern PFNGLMAKEBUFFERNONRESIDENTNVPROC glMakeBufferNonResidentNV;
extern PFNGLISBUFFERRESIDENTNVPROC glIsBufferResidentNV;
extern PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glMakeNamedBufferResidentNV;
extern PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glMakeNamedBufferNonResidentNV;
extern PFNGLISNAMEDBUFFERRESIDENTNVPROC glIsNamedBufferResidentNV;
extern PFNGLGETBUFFERPARAMETERUI64VNVPROC glGetBufferParameterui64vNV;
extern PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glGetNamedBufferParameterui64vNV;
extern PFNGLGETINTEGERUI64VNVPROC glGetIntegerui64vNV;
extern PFNGLUNIFORMUI64NVPROC glUniformui64NV;
extern PFNGLUNIFORMUI64VNVPROC glUniformui64vNV;
extern PFNGLGETUNIFORMUI64VNVPROC glGetUniformui64vNV;
extern PFNGLPROGRAMUNIFORMUI64NVPROC glProgramUniformui64NV;
extern PFNGLPROGRAMUNIFORMUI64VNVPROC glProgramUniformui64vNV;
extern PFNGLBUFFERADDRESSRANGENVPROC glBufferAddressRangeNV;
extern PFNGLVERTEXFORMATNVPROC glVertexFormatNV;
extern PFNGLNORMALFORMATNVPROC glNormalFormatNV;
extern PFNGLCOLORFORMATNVPROC glColorFormatNV;
extern PFNGLINDEXFORMATNVPROC glIndexFormatNV;
extern PFNGLTEXCOORDFORMATNVPROC glTexCoordFormatNV;
extern PFNGLEDGEFLAGFORMATNVPROC glEdgeFlagFormatNV;
extern PFNGLSECONDARYCOLORFORMATNVPROC glSecondaryColorFormatNV;
extern PFNGLFOGCOORDFORMATNVPROC glFogCoordFormatNV;
extern PFNGLVERTEXATTRIBFORMATNVPROC glVertexAttribFormatNV;
extern PFNGLVERTEXATTRIBIFORMATNVPROC glVertexAttribIFormatNV;
extern PFNGLGETINTEGERUI64I_VNVPROC glGetIntegerui64i_vNV;
extern PFNGLTEXTUREBARRIERNVPROC glTextureBarrierNV;
extern PFNGLBINDIMAGETEXTUREEXTPROC glBindImageTextureEXT;
extern PFNGLMEMORYBARRIEREXTPROC glMemoryBarrierEXT;
extern PFNGLVERTEXATTRIBL1DEXTPROC glVertexAttribL1dEXT;
extern PFNGLVERTEXATTRIBL2DEXTPROC glVertexAttribL2dEXT;
extern PFNGLVERTEXATTRIBL3DEXTPROC glVertexAttribL3dEXT;
extern PFNGLVERTEXATTRIBL4DEXTPROC glVertexAttribL4dEXT;
extern PFNGLVERTEXATTRIBL1DVEXTPROC glVertexAttribL1dvEXT;
extern PFNGLVERTEXATTRIBL2DVEXTPROC glVertexAttribL2dvEXT;
extern PFNGLVERTEXATTRIBL3DVEXTPROC glVertexAttribL3dvEXT;
extern PFNGLVERTEXATTRIBL4DVEXTPROC glVertexAttribL4dvEXT;
extern PFNGLVERTEXATTRIBLPOINTEREXTPROC glVertexAttribLPointerEXT;
extern PFNGLGETVERTEXATTRIBLDVEXTPROC glGetVertexAttribLdvEXT;
extern PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glVertexArrayVertexAttribLOffsetEXT;
extern PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glProgramSubroutineParametersuivNV;
extern PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glGetProgramSubroutineParameteruivNV;
extern PFNGLUNIFORM1I64NVPROC glUniform1i64NV;
extern PFNGLUNIFORM2I64NVPROC glUniform2i64NV;
extern PFNGLUNIFORM3I64NVPROC glUniform3i64NV;
extern PFNGLUNIFORM4I64NVPROC glUniform4i64NV;
extern PFNGLUNIFORM1I64VNVPROC glUniform1i64vNV;
extern PFNGLUNIFORM2I64VNVPROC glUniform2i64vNV;
extern PFNGLUNIFORM3I64VNVPROC glUniform3i64vNV;
extern PFNGLUNIFORM4I64VNVPROC glUniform4i64vNV;
extern PFNGLUNIFORM1UI64NVPROC glUniform1ui64NV;
extern PFNGLUNIFORM2UI64NVPROC glUniform2ui64NV;
extern PFNGLUNIFORM3UI64NVPROC glUniform3ui64NV;
extern PFNGLUNIFORM4UI64NVPROC glUniform4ui64NV;
extern PFNGLUNIFORM1UI64VNVPROC glUniform1ui64vNV;
extern PFNGLUNIFORM2UI64VNVPROC glUniform2ui64vNV;
extern PFNGLUNIFORM3UI64VNVPROC glUniform3ui64vNV;
extern PFNGLUNIFORM4UI64VNVPROC glUniform4ui64vNV;
extern PFNGLGETUNIFORMI64VNVPROC glGetUniformi64vNV;
extern PFNGLPROGRAMUNIFORM1I64NVPROC glProgramUniform1i64NV;
extern PFNGLPROGRAMUNIFORM2I64NVPROC glProgramUniform2i64NV;
extern PFNGLPROGRAMUNIFORM3I64NVPROC glProgramUniform3i64NV;
extern PFNGLPROGRAMUNIFORM4I64NVPROC glProgramUniform4i64NV;
extern PFNGLPROGRAMUNIFORM1I64VNVPROC glProgramUniform1i64vNV;
extern PFNGLPROGRAMUNIFORM2I64VNVPROC glProgramUniform2i64vNV;
extern PFNGLPROGRAMUNIFORM3I64VNVPROC glProgramUniform3i64vNV;
extern PFNGLPROGRAMUNIFORM4I64VNVPROC glProgramUniform4i64vNV;
extern PFNGLPROGRAMUNIFORM1UI64NVPROC glProgramUniform1ui64NV;
extern PFNGLPROGRAMUNIFORM2UI64NVPROC glProgramUniform2ui64NV;
extern PFNGLPROGRAMUNIFORM3UI64NVPROC glProgramUniform3ui64NV;
extern PFNGLPROGRAMUNIFORM4UI64NVPROC glProgramUniform4ui64NV;
extern PFNGLPROGRAMUNIFORM1UI64VNVPROC glProgramUniform1ui64vNV;
extern PFNGLPROGRAMUNIFORM2UI64VNVPROC glProgramUniform2ui64vNV;
extern PFNGLPROGRAMUNIFORM3UI64VNVPROC glProgramUniform3ui64vNV;
extern PFNGLPROGRAMUNIFORM4UI64VNVPROC glProgramUniform4ui64vNV;
extern PFNGLVERTEXATTRIBL1I64NVPROC glVertexAttribL1i64NV;
extern PFNGLVERTEXATTRIBL2I64NVPROC glVertexAttribL2i64NV;
extern PFNGLVERTEXATTRIBL3I64NVPROC glVertexAttribL3i64NV;
extern PFNGLVERTEXATTRIBL4I64NVPROC glVertexAttribL4i64NV;
extern PFNGLVERTEXATTRIBL1I64VNVPROC glVertexAttribL1i64vNV;
extern PFNGLVERTEXATTRIBL2I64VNVPROC glVertexAttribL2i64vNV;
extern PFNGLVERTEXATTRIBL3I64VNVPROC glVertexAttribL3i64vNV;
extern PFNGLVERTEXATTRIBL4I64VNVPROC glVertexAttribL4i64vNV;
extern PFNGLVERTEXATTRIBL1UI64NVPROC glVertexAttribL1ui64NV;
extern PFNGLVERTEXATTRIBL2UI64NVPROC glVertexAttribL2ui64NV;
extern PFNGLVERTEXATTRIBL3UI64NVPROC glVertexAttribL3ui64NV;
extern PFNGLVERTEXATTRIBL4UI64NVPROC glVertexAttribL4ui64NV;
extern PFNGLVERTEXATTRIBL1UI64VNVPROC glVertexAttribL1ui64vNV;
extern PFNGLVERTEXATTRIBL2UI64VNVPROC glVertexAttribL2ui64vNV;
extern PFNGLVERTEXATTRIBL3UI64VNVPROC glVertexAttribL3ui64vNV;
extern PFNGLVERTEXATTRIBL4UI64VNVPROC glVertexAttribL4ui64vNV;
extern PFNGLGETVERTEXATTRIBLI64VNVPROC glGetVertexAttribLi64vNV;
extern PFNGLGETVERTEXATTRIBLUI64VNVPROC glGetVertexAttribLui64vNV;
extern PFNGLVERTEXATTRIBLFORMATNVPROC glVertexAttribLFormatNV;
extern PFNGLGENNAMESAMDPROC glGenNamesAMD;
extern PFNGLDELETENAMESAMDPROC glDeleteNamesAMD;
extern PFNGLISNAMEAMDPROC glIsNameAMD;
extern PFNGLDEBUGMESSAGEENABLEAMDPROC glDebugMessageEnableAMD;
extern PFNGLDEBUGMESSAGEINSERTAMDPROC glDebugMessageInsertAMD;
extern PFNGLDEBUGMESSAGECALLBACKAMDPROC glDebugMessageCallbackAMD;
extern PFNGLGETDEBUGMESSAGELOGAMDPROC glGetDebugMessageLogAMD;
extern PFNGLVDPAUINITNVPROC glVDPAUInitNV;
extern PFNGLVDPAUFININVPROC glVDPAUFiniNV;
extern PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glVDPAURegisterVideoSurfaceNV;
extern PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glVDPAURegisterOutputSurfaceNV;
extern PFNGLVDPAUISSURFACENVPROC glVDPAUIsSurfaceNV;
extern PFNGLVDPAUUNREGISTERSURFACENVPROC glVDPAUUnregisterSurfaceNV;
extern PFNGLVDPAUGETSURFACEIVNVPROC glVDPAUGetSurfaceivNV;
extern PFNGLVDPAUSURFACEACCESSNVPROC glVDPAUSurfaceAccessNV;
extern PFNGLVDPAUMAPSURFACESNVPROC glVDPAUMapSurfacesNV;
extern PFNGLVDPAUUNMAPSURFACESNVPROC glVDPAUUnmapSurfacesNV;
extern PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glTexImage2DMultisampleCoverageNV;
extern PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glTexImage3DMultisampleCoverageNV;
extern PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glTextureImage2DMultisampleNV;
extern PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glTextureImage3DMultisampleNV;
extern PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glTextureImage2DMultisampleCoverageNV;
extern PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glTextureImage3DMultisampleCoverageNV;
extern PFNGLSETMULTISAMPLEFVAMDPROC glSetMultisamplefvAMD;
extern PFNGLIMPORTSYNCEXTPROC glImportSyncEXT;
extern PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glMultiDrawArraysIndirectAMD;
extern PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glMultiDrawElementsIndirectAMD;
extern PFNGLGENPATHSNVPROC glGenPathsNV;
extern PFNGLDELETEPATHSNVPROC glDeletePathsNV;
extern PFNGLISPATHNVPROC glIsPathNV;
extern PFNGLPATHCOMMANDSNVPROC glPathCommandsNV;
extern PFNGLPATHCOORDSNVPROC glPathCoordsNV;
extern PFNGLPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
extern PFNGLPATHSUBCOORDSNVPROC glPathSubCoordsNV;
extern PFNGLPATHSTRINGNVPROC glPathStringNV;
extern PFNGLPATHGLYPHSNVPROC glPathGlyphsNV;
extern PFNGLPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
extern PFNGLWEIGHTPATHSNVPROC glWeightPathsNV;
extern PFNGLCOPYPATHNVPROC glCopyPathNV;
extern PFNGLINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
extern PFNGLTRANSFORMPATHNVPROC glTransformPathNV;
extern PFNGLPATHPARAMETERIVNVPROC glPathParameterivNV;
extern PFNGLPATHPARAMETERINVPROC glPathParameteriNV;
extern PFNGLPATHPARAMETERFVNVPROC glPathParameterfvNV;
extern PFNGLPATHPARAMETERFNVPROC glPathParameterfNV;
extern PFNGLPATHDASHARRAYNVPROC glPathDashArrayNV;
extern PFNGLPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
extern PFNGLPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
extern PFNGLSTENCILFILLPATHNVPROC glStencilFillPathNV;
extern PFNGLSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
extern PFNGLSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
extern PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
extern PFNGLPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
extern PFNGLPATHCOLORGENNVPROC glPathColorGenNV;
extern PFNGLPATHTEXGENNVPROC glPathTexGenNV;
extern PFNGLPATHFOGGENNVPROC glPathFogGenNV;
extern PFNGLCOVERFILLPATHNVPROC glCoverFillPathNV;
extern PFNGLCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
extern PFNGLCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
extern PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
extern PFNGLGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
extern PFNGLGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
extern PFNGLGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
extern PFNGLGETPATHCOORDSNVPROC glGetPathCoordsNV;
extern PFNGLGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
extern PFNGLGETPATHMETRICSNVPROC glGetPathMetricsNV;
extern PFNGLGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
extern PFNGLGETPATHSPACINGNVPROC glGetPathSpacingNV;
extern PFNGLGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
extern PFNGLGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
extern PFNGLGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
extern PFNGLGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
extern PFNGLISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
extern PFNGLISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
extern PFNGLGETPATHLENGTHNVPROC glGetPathLengthNV;
extern PFNGLPOINTALONGPATHNVPROC glPointAlongPathNV;
extern PFNGLSTENCILOPVALUEAMDPROC glStencilOpValueAMD;
extern PFNGLGETTEXTUREHANDLENVPROC glGetTextureHandleNV;
extern PFNGLGETTEXTURESAMPLERHANDLENVPROC glGetTextureSamplerHandleNV;
extern PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glMakeTextureHandleResidentNV;
extern PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glMakeTextureHandleNonResidentNV;
extern PFNGLGETIMAGEHANDLENVPROC glGetImageHandleNV;
extern PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glMakeImageHandleResidentNV;
extern PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glMakeImageHandleNonResidentNV;
extern PFNGLUNIFORMHANDLEUI64NVPROC glUniformHandleui64NV;
extern PFNGLUNIFORMHANDLEUI64VNVPROC glUniformHandleui64vNV;
extern PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glProgramUniformHandleui64NV;
extern PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glProgramUniformHandleui64vNV;
extern PFNGLISTEXTUREHANDLERESIDENTNVPROC glIsTextureHandleResidentNV;
extern PFNGLISIMAGEHANDLERESIDENTNVPROC glIsImageHandleResidentNV;
extern PFNGLBEGINCONDITIONALRENDERNVXPROC glBeginConditionalRenderNVX;
extern PFNGLENDCONDITIONALRENDERNVXPROC glEndConditionalRenderNVX;
extern PFNGLTEXSTORAGESPARSEAMDPROC glTexStorageSparseAMD;
extern PFNGLTEXTURESTORAGESPARSEAMDPROC glTextureStorageSparseAMD;
extern PFNGLSYNCTEXTUREINTELPROC glSyncTextureINTEL;
extern PFNGLUNMAPTEXTURE2DINTELPROC glUnmapTexture2DINTEL;
extern PFNGLMAPTEXTURE2DINTELPROC glMapTexture2DINTEL;
extern PFNGLDRAWTEXTURENVPROC glDrawTextureNV;
#elif defined(__APPLE__)
#  define GLFW_INCLUDE_GLCOREARB
#  include "glfw3.h"
#  include <OpenGL/gl3ext.h>
#elif defined(X11)
#  define GL_GLEXT_PROTOTYPES
#  include <GLFW/glfw3.h>
#  include "glext.h"
#else
#  error "This platform is not supported."
#endif

namespace gg
{
  /*!
  ** \brief ゲームグラフィックス特論の都合にもとづく初期化を行う.
  **
  **   Windows で OpenGL 1.2 以降の API を有効化する.
  */
  extern void ggInit();

  /*!
  ** \brief OpenGL のエラーをチェックする.
  **
  **   OpenGL の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する.
  **
  **   \param msg エラー発生時に標準エラー出力に出力する文字列. nullptr なら何も出力しない.
  */
  extern void ggError(const char *msg = nullptr);

  /*!
  ** \brief FBO のエラーをチェックする.
  **
  **   FBO の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する.
  **
  **   \param msg エラー発生時に標準エラー出力に出力する文字列. nullptr なら何も出力しない.
  */
  extern void ggFBOError(const char *msg = nullptr);

  /*!
  ** \brief 配列の内容を TGA ファイルに保存する.
  **
  **   \param sx 画像の横の画素数.
  **   \param sy 画像の縦の画素数.
  **   \param depth 1画素のバイト数.
  **   \param buffer 画像データを格納した配列.
  **   \param name 保存するファイル名.
  **   \return 保存に成功すれば true, 失敗すれば false.
  */
  bool ggSaveTga(GLsizei sx, GLsizei sy, unsigned int depth, const GLubyte *buffer, const char *name);

  /*!
  ** \brief カラーバッファの内容を TGA ファイルに保存する.
  **
  **   \param name 保存するファイル名.
  **   \return 保存に成功すれば true, 失敗すれば false.
  */
  extern bool ggSaveColor(const char *name);

  /*!
  ** \brief デプスバッファの内容を TGA ファイルに保存する.
  **
  **   \param name 保存するファイル名.
  **   \return 保存に成功すれば true, 失敗すれば false.
  */
  extern bool ggSaveDepth(const char *name);

  /*!
  ** \brief TGA ファイル (8/16/24/32bit) をメモリに読み込む.
  **
  **   \param name 読み込むファイル名.
  **   \param width 読み込んだファイルの横の画素数.
  **   \param height 読み込んだファイルの縦の画素数.
  **   \param format 読み込んだファイルの書式. GL_RED, G_RG, GL_BGR, G_BGRA.
  **   \return 読み込みに成功すれば読み込んだデータのポインタ, 失敗すれば nullptr.
  */
  extern GLubyte *ggLoadTga(const char *name, GLsizei *width, GLsizei *height, GLenum *format);

  /*!
  ** \brief テクスチャメモリを確保して画像データをテクスチャとして読み込む.
  **
  **   \param width テクスチャとして読み込むデータ image の横の画素数.
  **   \param height テクスチャとして読み込むデータ image の縦の画素数.
  **   \param internal glTexImage2D() に指定するテクスチャの内部フォーマット.
  **   \param format glTexImage2D() に指定するデータ image のフォーマット.
  **   \param image テクスチャとして読み込むデータ. NULL ならテクスチャメモリの確保のみ.
  */
  extern GLuint ggLoadTexture(GLsizei width, GLsizei height, GLenum internal,
    GLenum format = GL_RGBA, const GLvoid *image = nullptr);

  /*!
  ** \brief TGA 画像ファイルをテクスチャとして読み込む.
  **
  **   \param name 読み込むファイル名.
  **   \param internal glTexImage2D() に指定するテクスチャの内部フォーマット. 0 なら外部フォーマットに合わせる.
  **   \return 読み込みに成功すれば true, 失敗すれば false.
  */
  extern GLuint ggLoadImage(const char *name, GLenum internal = 0);

  /*!
  ** \brief 高さマップ用の TGA 画像ファイルの読み込んで法線マップを作成する.
  **
  **   \param name 読み込むファイル名.
  **   \param nz 法線ベクトルの z 成分の割合.
  **   \param internal glTexImage2D() に指定するテクスチャの内部フォーマット.
  **   \return 読み込みに成功すれば true, 失敗すれば false.
  */
  extern GLuint ggLoadHeight(const char *name, float nz, GLenum internal = GL_RGBA);

  /*!
  ** \brief 三角形分割された OBJ ファイルを読み込む (Elements 形式).
  **
  **   \param name 読み込む Wavefront OBJ ファイル名.
  **   \param nv 読み込んだデータの頂点数.
  **   \param pos 読み込んだデータの頂点座標.
  **   \param norm 読み込んだデータの頂点法線.
  **   \param face 読み込んだデータの三角形の頂点インデックス.
  **   \param normalize true なら読み込んだデータの大きさを正規化する.
  **   \return ファイルの読み込みに成功したら true.
  */
  extern bool ggLoadObj(const char *name, GLuint &nv, GLfloat (*&pos)[3], GLfloat (*&norm)[3],
    GLuint &nf, GLuint (*&face)[3], bool normalize = false);

  /*!
  ** \brief 三角形分割された OBJ ファイルと MTL ファイルを読み込む (Arrays 形式)
  **
  **   \param name 読み込む Wavefront OBJ ファイル名.
  **   \param ng 読み込んだデータの面グループ数.
  **   \param group 読み込んだデータの面グループの最初の面のインデックスと面数.
  **   \param amb 読み込んだデータの面グループごとの環境光に対する反射係数.
  **   \param diff 読み込んだデータの面グループごとの拡散反射係数.
  **   \param spec 読み込んだデータの面グループごとの鏡面反射係数.
  **   \param shi 読み込んだデータの面グループごとの輝き係数.
  **   \param nv 読み込んだデータの頂点数.
  **   \param pos 読み込んだデータの頂点座標.
  **   \param norm 読み込んだデータの頂点法線.
  **   \param normalize true なら読み込んだデータの大きさを正規化する.
  **   \return ファイルの読み込みに成功したら true.
  */
  extern bool ggLoadObj(const char *name, GLuint &ng, GLuint (*&group)[2],
    GLfloat (*&amb)[4], GLfloat (*&diff)[4], GLfloat (*&spec)[4], GLfloat *&shi,
    GLuint &nv, GLfloat (*&pos)[3], GLfloat (*&norm)[3], bool normalize = false);

  /*!
  ** \brief シェーダのソースプログラムの文字列を読み込んでプログラムオブジェクトを作成する.
  **
  **   \param vsrc バーテックスシェーダのソースプログラムの文字列.
  **   \param fsrc フラグメントシェーダのソースプログラムの文字列 (nullptr なら不使用).
  **   \param gsrc ジオメトリシェーダのソースプログラムの文字列 (nullptr なら不使用).
  **   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
  **   \param varyings フィードバックする varying 変数のリスト (nullptr なら不使用).
  **   \param vtext バーテックスシェーダのコンパイル時のメッセージに追加する文字列.
  **   \param ftext フラグメントシェーダのコンパイル時のメッセージに追加する文字列.
  **   \param gtext ジオメトリシェーダのコンパイル時のメッセージに追加する文字列.
  **   \return シェーダプログラムのプログラム名 (作成できなければ 0).
  */
  extern GLuint ggCreateShader(const char *vsrc, const char *fsrc = nullptr, const char *gsrc = nullptr,
    int nvarying = 0, const char **varyings = nullptr,
    const char *vtext = "vertex shader",
    const char *ftext = "fragment shader",
    const char *gtext = "geometry shader");

  /*!
  ** \brief シェーダのソースファイルを読み込んでプログラムオブジェクトを作成する.
  **
  **   \param vert バーテックスシェーダのソースファイル名.
  **   \param frag フラグメントシェーダのソースファイル名 (nullptr なら不使用).
  **   \param geom ジオメトリシェーダのソースファイル名 (nullptr なら不使用).
  **   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
  **   \param varyings フィードバックする varying 変数のリスト (nullptr なら不使用).
  **   \return シェーダプログラムのプログラム名 (作成できなければ 0).
  */
  extern GLuint ggLoadShader(const char *vert, const char *frag = nullptr, const char *geom = nullptr,
    int nvarying = 0, const char **varyings = nullptr);

  /*!
  ** \brief 基底クラス.
  */
  class Gg
  {
  protected:

    //! \brief デストラクタ.
    virtual ~Gg() {}

  public:

    //! \brief コンストラクタ.
    Gg() {}
  };

  /*!
  ** \brief 変換行列.
  */
  class GgMatrix
    : public Gg
  {
    // 変換行列の要素
    GLfloat array[16];

    // 行列 a とベクトル b の積をベクトル c に代入する
    void projection(GLfloat *c, const GLfloat *a, const GLfloat *b) const;

    // 行列 a と行列 b の積を行列 c に代入する
    void multiply(GLfloat *c, const GLfloat *a, const GLfloat *b) const;

    // 変換行列の要素に四元数から直接データを保存できるようにする
    friend class GgQuaternion;

  public:

    //! \brief デストラクタ.
    virtual ~GgMatrix() {}

    //! \brief コンストラクタ.
    GgMatrix() {}

    //! \brief コンストラクタ.
    //!   \param a GLfloat[16] 型の配列.
    GgMatrix(const GLfloat *a)
    {
      load(a);
    }

    //! \brief コピーコンストラクタ.
    //!   \param m GgMatrix 型の変数.
    GgMatrix(const GgMatrix &m)
    {
      load(m);
    }

    //! \brief 配列変数の値を格納する.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return a を代入した GgMatrix 型の値.
    GgMatrix &load(const GLfloat *a)
    {
      for (int i = 0; i < 16; ++i) array[i] = a[i];
      return *this;
    }

    //! \brief 別の変換行列の値を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return m を代入した GgMatrix 型の値.
    GgMatrix &load(const GgMatrix &m)
    {
      return load(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を加算した結果を格納する.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列に a を加えた GgMatrix 型の値.
    GgMatrix &loadAdd(const GLfloat *a)
    {
      for (int i = 0; i < 16; ++i) array[i] += a[i];
      return *this;
    }

    //! \brief 変換行列に別の変換行列を加算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を加えた GgMatrix 型の値.
    GgMatrix &loadAdd(const GgMatrix &m)
    {
      return loadAdd(m.array);
    }

    //! \brief 変換行列から配列に格納した変換行列を減算した結果を格納する.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列に a を引いた GgMatrix 型の値.
    GgMatrix &loadSubtract(const GLfloat *a)
    {
      for (int i = 0; i < 16; ++i) array[i] -= a[i];
      return *this;
    }

    //! \brief 変換行列から別の変換行列を減算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を引いた GgMatrix 型の値.
    GgMatrix &loadSubtract(const GgMatrix &m)
    {
      return loadSubtract(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を乗算した結果を格納する.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列に a を掛けた GgMatrix 型の値.
    GgMatrix &loadMultiply(const GLfloat *a)
    {
      return load(multiply(a));
    }

    //! \brief 変換行列に別の変換行列を乗算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を掛けた GgMatrix 型の値.
    GgMatrix &loadMultiply(const GgMatrix &m)
    {
      return loadMultiply(m.array);
    }

    //! \brief 変換行列を配列に格納した変換行列で除算した結果を格納する.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列に a を乗じた GgMatrix 型の値.
    GgMatrix &loadDivide(const GLfloat *a)
    {
      return load(divide(a));
    }

    //! \brief 変換行列を別の変換行列で除算した結果を格納する.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を乗じた GgMatrix 型の値.
    GgMatrix &loadDivide(const GgMatrix &m)
    {
      return loadDivide(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を加算した値を返す.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列に a を加えた GgMatrix 型の値.
    GgMatrix add(const GLfloat *a) const
    {
      GgMatrix t;
      return t.loadAdd(a);
    }

    //! \brief 変換行列に別の変換行列を加算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を加えた GgMatrix 型の値.
    GgMatrix add(const GgMatrix &m) const
    {
      return add(m.array);
    }

    //! \brief 変換行列から配列に格納した変換行列を減算した値を返す.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列に a を引いた GgMatrix 型の値.
    GgMatrix subtract(const GLfloat *a) const
    {
      GgMatrix t;
      return t.loadSubtract(a);
    }

    //! \brief 変換行列から別の変換行列を減算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を引いた GgMatrix 型の値.
    GgMatrix subtract(const GgMatrix &m) const
    {
      return subtract(m.array);
    }

    //! \brief 変換行列に配列に格納した変換行列を乗算した値を返す.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列に a を掛けた GgMatrix 型の値.
    GgMatrix multiply(const GLfloat *a) const
    {
      GgMatrix t;
      multiply(t.array, array, a);
      return t;
    }

    //! \brief 変換行列に別の変換行列を乗算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列に m を掛けた GgMatrix 型の値.
    GgMatrix multiply(const GgMatrix &m) const
    {
      return multiply(m.array);
    }

    //! \brief 変換行列を配列に格納した変換行列で除算した値を返す.
    //!   \param a GLfloat[16] 型の配列.
    //!   \return 変換行列を a で割った GgMatrix 型の値.
    GgMatrix divide(const GLfloat *a) const
    {
      GgMatrix t, ia;
      ia.loadInvert(a);
      multiply(t.array, array, ia.array);
      return t;
    }

    //! \brief 変換行列を配列に格納した変換行列で除算した値を返す.
    //!   \param m GgMatrix 型の変数.
    //!   \return 変換行列を m で割った GgMatrix 型の値.
    GgMatrix divide(const GgMatrix &m) const
    {
      return divide(m.array);
    }

    // 演算子
    GgMatrix &operator=(const GLfloat *a)
    {
      return load(a);
    }
    GgMatrix &operator=(const GgMatrix &m)
    {
      return operator=(m.array);
    }
    GgMatrix &operator+=(const GLfloat *a)
    {
      return loadAdd(a);
    }
    GgMatrix &operator+=(const GgMatrix &m)
    {
      return operator+=(m.array);
    }
    GgMatrix &operator-=(const GLfloat *a)
    {
      return loadSubtract(a);
    }
    GgMatrix &operator-=(const GgMatrix &m)
    {
      return operator-=(m.array);
    }
    GgMatrix &operator*=(const GLfloat *a)
    {
      return loadMultiply(a);
    }
    GgMatrix &operator*=(const GgMatrix &m)
    {
      return operator*=(m.array);
    }
    GgMatrix &operator/=(const GLfloat *a)
    {
      return loadDivide(a);
    }
    GgMatrix &operator/=(const GgMatrix &m)
    {
      return operator/=(m.array);
    }
    GgMatrix operator+(const GLfloat *a) const
    {
      return add(a);
    }
    GgMatrix operator+(const GgMatrix &m) const
    {
      return operator+(m.array);
    }
    GgMatrix operator-(const GLfloat *a) const
    {
      return subtract(a);
    }
    GgMatrix operator-(const GgMatrix &m) const
    {
      return operator-(m.array);
    }
    GgMatrix operator*(const GLfloat *a) const
    {
      return multiply(a);
    }
    GgMatrix operator*(const GgMatrix &m) const
    {
      return operator*(m.array);
    }
    GgMatrix operator/(const GLfloat *a) const
    {
      return divide(a);
    }
    GgMatrix operator/(const GgMatrix &m) const
    {
      return operator/(m.array);
    }

    //! \brief 単位行列を格納する.
    GgMatrix &loadIdentity();

    //! \brief 平行移動の変換行列を格納する.
    //!   \param x x 方向の移動量.
    //!   \param y y 方向の移動量.
    //!   \param z z 方向の移動量.
    //!   \param w w 移動量のスケールファクタ (= 1.0f).
    //!   \return 設定した変換行列.
    GgMatrix &loadTranslate(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f);

    //! \brief 平行移動の変換行列を格納する.
    //!   \param t 移動量の GLfloat 型の配列 (x, y, z).
    //!   \return 設定した変換行列.
    GgMatrix &loadTranslate(const GLfloat *t)
    {
      return loadTranslate(t[0], t[1], t[2]);
    }

    //! \brief 拡大縮小の変換行列を格納する.
    //!   \param x x 方向の拡大率.
    //!   \param y y 方向の拡大率.
    //!   \param z z 方向の拡大率.
    //!   \param w w 拡大率のスケールファクタ (= 1.0f).
    //!   \return 設定した変換行列.
    GgMatrix &loadScale(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f);

    //! \brief 拡大縮小の変換行列を格納する.
    //!   \param s 拡大率の GLfloat 型の配列 (x, y, z).
    //!   \return 設定した変換行列.
    GgMatrix &loadScale(const GLfloat *s)
    {
      return loadScale(s[0], s[1], s[2]);
    }

    //! \brief x 軸中心の回転の変換行列を格納する.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotateX(GLfloat a);

    //! \brief y 軸中心の回転の変換行列を格納する.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotateY(GLfloat a);

    //! \brief z 軸中心の回転の変換行列を格納する.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotateZ(GLfloat a);

    //! \brief (x, y, z) 方向のベクトルを軸とする回転の変換行列を格納する.
    //!   \param x 回転軸の x 成分.
    //!   \param y 回転軸の y 成分.
    //!   \param z 回転軸の z 成分.
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a);

    //! \brief r 方向のベクトルを軸とする回転の変換行列を格納する.
    //!   \param r 回転軸の方向ベクトル (x, y, z).
    //!   \param a 回転角.
    //!   \return 設定した変換行列.
    GgMatrix &loadRotate(const GLfloat *r, GLfloat a)
    {
      return loadRotate(r[0], r[1], r[2], a);
    }

    //! \brief r 方向のベクトルを軸とする回転の変換行列を格納する.
    //!   \param r 回転軸の方向ベクトルと回転角 (x, y, z, a).
    //!   \return 設定した変換行列.
    GgMatrix &loadRotate(const GLfloat *r)
    {
      return loadRotate(r[0], r[1], r[2], r[3]);
    }

    //! \brief ビュー変換行列を格納する.
    //!   \param ex 視点の位置の x 座標値.
    //!   \param ey 視点の位置の y 座標値.
    //!   \param ez 視点の位置の z 座標値.
    //!   \param tx 目標点の位置の x 座標値.
    //!   \param ty 目標点の位置の y 座標値.
    //!   \param tz 目標点の位置の z 座標値.
    //!   \param ux 上方向のベクトルの x 成分.
    //!   \param uy 上方向のベクトルの y 成分.
    //!   \param uz 上方向のベクトルの z 成分.
    //!   \return 設定したビュー変換行列.
    GgMatrix &loadLookat(GLfloat ex, GLfloat ey, GLfloat ez,
      GLfloat tx, GLfloat ty, GLfloat tz,
      GLfloat ux, GLfloat uy, GLfloat uz);

    //! \brief ビュー変換行列を格納する.
    //!   \param e 視点の位置の配列変数.
    //!   \param t 目標点の位置の配列変数.
    //!   \param u 上方向のベクトルのの配列変数.
    //!   \return 設定したビュー変換行列.
    GgMatrix &loadLookat(const GLfloat *e, const GLfloat *t, const GLfloat *u)
    {
      return loadLookat(e[0], e[1], e[2], t[0], t[1], t[2], u[0], u[1], u[2]);
    }

    //! \brief 直交投影変換行列を格納する.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 設定した直交投影変換行列.
    GgMatrix &loadOrthogonal(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar);

    //! \brief 透視透視投影変換行列を格納する.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 設定した透視投影変換行列.
    GgMatrix &loadFrustum(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar);

    //! \brief 画角を指定して透視投影変換行列を格納する.
    //!   \param fovy y 方向の画角.
    //!   \param aspect 縦横比.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 設定した透視投影変換行列.
    GgMatrix &loadPerspective(GLfloat fovy, GLfloat aspect,
      GLfloat zNear, GLfloat zFar);

    //! \brief 転置行列を格納する.
    //!   \param a GLfloat[16] 型の変換行列.
    //!   \return 設定した a の転置行列.
    GgMatrix &loadTranspose(const GLfloat *a);

    //! \brief 転置行列を格納する.
    //!   \param m GgMatrix 型の変換行列.
    //!   \return 設定した m の転置行列.
    GgMatrix &loadTranspose(const GgMatrix &m)
    {
      return loadTranspose(m.array);
    }

    //! \brief 逆行列を格納する.
    //!   \param a GLfloat[16] 型の変換行列.
    //!   \return 設定した a の逆行列.
    GgMatrix &loadInvert(const GLfloat *a);

    //! \brief 逆行列を格納する.
    //!   \param m GgMatrix 型の変換行列.
    //!   \return 設定した m の逆行列.
    GgMatrix &loadInvert(const GgMatrix &m)
    {
      return loadInvert(m.array);
    }

    //! \brief 法線変換行列を格納する.
    //!   \param a GLfloat[16] 型の変換行列.
    //!   \return 設定した m の法線変換行列.
    GgMatrix &loadNormal(const GLfloat *a);

    //! \brief 法線変換行列を格納する.
    //!   \param GgMatrix 型の変換行列.
    //!   \return 設定した m の法線変換行列.
    GgMatrix &loadNormal(const GgMatrix &m)
    {
      return loadNormal(m.array);
    }

    //! \brief 平行移動変換を乗じた結果を返す.
    //!   \param x x 方向の移動量.
    //!   \param y y 方向の移動量.
    //!   \param z z 方向の移動量.
    //!   \param w w 移動量のスケールファクタ (= 1.0f).
    //!   \return 平行移動した結果の変換行列.
    GgMatrix translate(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f) const
    {
      GgMatrix m;
      return multiply(m.loadTranslate(x, y, z, w));
    }

    //! \brief 平行移動変換を乗じた結果を返す.
    //!   \param t 移動量の GLfloat[4] 型の配列 (x, y, z, w).
    //!   \return 平行移動した結果の変換行列.
    GgMatrix translate(const GLfloat *t) const
    {
      return translate(t[0], t[1], t[2], t[3]);
    }

    //! \brief 拡大縮小変換を乗じた結果を返す.
    //!   \param x x 方向の拡大率.
    //!   \param y y 方向の拡大率.
    //!   \param z z 方向の拡大率.
    //!   \param w w 移動量のスケールファクタ (= 1.0f).
    //!   \return 拡大縮小した結果の変換行列.
    GgMatrix scale(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f) const
    {
      GgMatrix m;
      return multiply(m.loadScale(x, y, z, w));
    }

    //! \brief 拡大縮小変換を乗じた結果を返す.
    //!   \param s 拡大率の GLfloat[4] 型の配列 (x, y, z, w).
    //!   \return 拡大縮小した結果の変換行列.
    GgMatrix scale(const GLfloat *s) const
    {
      return scale(s[0], s[1], s[2], s[3]);
    }

    //! \brief x 軸中心の回転変換を乗じた結果を返す.
    //!   \param a 回転角.
    //!   \return x 軸中心にさらに a 回転した変換行列.
    GgMatrix rotateX(GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotateX(a));
    }

    //! \brief y 軸中心の回転変換を乗じた結果を返す.
    //!   \param a 回転角.
    //!   \return y 軸中心にさらに a 回転した変換行列.
    GgMatrix rotateY(GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotateY(a));
    }

    //! \brief z 軸中心の回転変換を乗じた結果を返す.
    //!   \param a 回転角.
    //!   \return z 軸中心にさらに a 回転した変換行列.
    GgMatrix rotateZ(GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotateZ(a));
    }

    //! \brief (x, y, z) 方向のベクトルを軸とする回転変換を乗じた結果を返す.
    //!   \param x 回転軸の x 成分.
    //!   \param y 回転軸の y 成分.
    //!   \param z 回転軸の z 成分.
    //!   \param a 回転角.
    //!   \return (x, y, z) を軸にさらに a 回転した変換行列.
    GgMatrix rotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a) const
    {
      GgMatrix m;
      return multiply(m.loadRotate(x, y, z, a));
    }

    //! \brief r 方向のベクトルを軸とする回転変換を乗じた結果を返す.
    //!   \param r 回転軸の方向ベクトルと回転角 (x, y, z).
    //!   \param a 回転角.
    //!   \return (r[0], r[1], r[2]) を軸にさらに a 回転した変換行列.
    GgMatrix rotate(const GLfloat *r, GLfloat a) const
    {
      return rotate(r[0], r[1], r[2], a);
    }

    //! \brief r 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
    //!   \param r 回転軸の方向ベクトルと回転角 (x, y, z, a).
    //!   \return (r[0], r[1], r[2]) を軸にさらに r[3] 回転した変換行列.
    GgMatrix rotate(const GLfloat *r) const
    {
      return rotate(r[0], r[1], r[2], r[3]);
    }

    //! \brief ビュー変換を乗じた結果を返す.
    //!   \param ex 視点の位置の x 座標値.
    //!   \param ey 視点の位置の y 座標値.
    //!   \param ez 視点の位置の z 座標値.
    //!   \param tx 目標点の位置の x 座標値.
    //!   \param ty 目標点の位置の y 座標値.
    //!   \param tz 目標点の位置の z 座標値.
    //!   \param ux 上方向のベクトルの x 成分.
    //!   \param uy 上方向のベクトルの y 成分.
    //!   \param uz 上方向のベクトルの z 成分.
    //!   \return ビュー変換行列を乗じた変換行列.
    GgMatrix lookat(GLfloat ex, GLfloat ey, GLfloat ez,
      GLfloat tx, GLfloat ty, GLfloat tz,
      GLfloat ux, GLfloat uy, GLfloat uz) const
    {
      GgMatrix m;
      return multiply(m.loadLookat(ex, ey, ez, tx, ty, tz, ux, uy, uz));
    }

    //! \brief ビュー変換を乗じた結果を返す.
    //!   \param e 視点の位置の配列変数.
    //!   \param t 目標点の位置の配列変数.
    //!   \param u 上方向のベクトルのの配列変数.
    //!   \return ビュー変換行列を乗じた変換行列.
    GgMatrix lookat(const GLfloat *e, const GLfloat *t, const GLfloat *u) const
    {
      return lookat(e[0], e[1], e[2], t[0], t[1], t[2], u[0], u[1], u[2]);
    }

    //! \brief 直交投影変換を乗じた結果を返す.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 直交投影変換行列を乗じた変換行列.
    GgMatrix orthogonal(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar) const
    {
      GgMatrix m;
      return multiply(m.loadOrthogonal(left, right, bottom, top, zNear, zFar));
    }

    //! \brief 透視投影変換を乗じた結果を返す.
    //!   \param left ウィンドウの左端の位置.
    //!   \param right ウィンドウの右端の位置.
    //!   \param bottom ウィンドウの下端の位置.
    //!   \param top ウィンドウの上端の位置.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 透視投影変換行列を乗じた変換行列.
    GgMatrix frustum(GLfloat left, GLfloat right,
      GLfloat bottom, GLfloat top,
      GLfloat zNear, GLfloat zFar) const
    {
      GgMatrix m;
      return multiply(m.loadFrustum(left, right, bottom, top, zNear, zFar));
    }

    //! \brief 画角を指定して透視投影変換を乗じた結果を返す.
    //!   \param fovy y 方向の画角.
    //!   \param aspect 縦横比.
    //!   \param zNear 視点から前方面までの位置.
    //!   \param zFar 視点から後方面までの位置.
    //!   \return 透視投影変換行列を乗じた変換行列.
    GgMatrix perspective(GLfloat fovy, GLfloat aspect,
      GLfloat zNear, GLfloat zFar) const
    {
      GgMatrix m;
      return multiply(m.loadPerspective(fovy, aspect, zNear, zFar));
    }

    //! \brief 転置行列を返す.
    //!   \return 転置行列.
    GgMatrix transpose() const
    {
      GgMatrix t;
      return t.loadTranspose(*this);
    }

    //! \brief 逆行列を返す.
    //!   \return 逆行列.
    GgMatrix invert() const
    {
      GgMatrix t;
      return t.loadInvert(*this);
    }

    //! \brief 法線変換行列を返す.
    //!   \return 法線変換行列.
    GgMatrix normal() const
    {
      GgMatrix t;
      return t.loadNormal(*this);
    }

    //! \brief ベクトルに対して投影変換を行う.
    //!   \param c 変換結果を格納する GLfloat[4] 型の配列.
    //!   \param v 元のベクトルの GLfloat[4] 型の配列.
    void projection(GLfloat *c, const GLfloat *v) const
    {
      projection(c, array, v);
    }

    //! \brief 変換行列を取り出す.
    //!   \return 変換行列を格納した GLfloat[16] 型の配列.
    const GLfloat *get() const
    {
      return array;
    }

    //! \brief 変換行列を取り出す.
    //!   \param a 変換行列を格納する GLfloat[16] 型の配列.
    void get(GLfloat *a) const
    {
      for (int i = 0; i < 16; ++i) a[i] = array[i];
    }
  };

  //! \brief 単位行列を返す.
  //!   \return 単位行列
  inline GgMatrix ggIdentity()
  {
    GgMatrix t;
    return t.loadIdentity();
  };

  //! \brief 平行移動の変換行列を返す.
  //!   \param x x 方向の移動量.
  //!   \param y y 方向の移動量.
  //!   \param z z 方向の移動量.
  //!   \param w 移動量のスケールファクタ (= 1.0f).
  //!   \return 平行移動の変換行列.
  inline GgMatrix ggTranslate(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f)
  {
    GgMatrix m;
    return m.loadTranslate(x, y, z, w);
  }

  //! \brief 平行移動の変換行列を返す.
  //!   \param t 移動量の GLfloa 型の配列 (x, y, z).
  //!   \return 平行移動の変換行列
  inline GgMatrix ggTranslate(const GLfloat *t)
  {
    GgMatrix m;
    return m.loadTranslate(t[0], t[1], t[2]);
  }

  //! \brief 拡大縮小の変換行列を返す.
  //!   \param x x 方向の拡大率.
  //!   \param y y 方向の拡大率.
  //!   \param z z 方向の拡大率.
  //!   \param w 拡大率のスケールファクタ (= 1.0f).
  //!   \return 拡大縮小の変換行列.
  inline GgMatrix ggScale(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f)
  {
    GgMatrix m;
    return m.loadScale(x, y, z, w);
  }

  //! \brief 拡大縮小の変換行列を返す.
  //!   \param s 拡大率の GLfloat 型の配列 (x, y, z).
  //!   \return 拡大縮小の変換行列.
  inline GgMatrix ggScale(const GLfloat *s)
  {
    GgMatrix m;
    return m.loadScale(s[0], s[1], s[2]);
  }

  //! \brief x 軸中心の回転の変換行列を返す.
  //!   \param a 回転角.
  //!   \return x 軸中心に a だけ回転する変換行列.
  inline GgMatrix ggRotateX(GLfloat a)
  {
    GgMatrix m;
    return m.loadRotateX(a);
  }

  //! \brief y 軸中心の回転の変換行列を返す.
  //!   \param a 回転角.
  //!   \return y 軸中心に a だけ回転する変換行列.
  inline GgMatrix ggRotateY(GLfloat a)
  {
    GgMatrix m;
    return m.loadRotateY(a);
  }

  //! \brief z 軸中心の回転の変換行列を返す.
  //!   \param a 回転角.
  //!   \return z 軸中心に a だけ回転する変換行列.
  inline GgMatrix ggRotateZ(GLfloat a)
  {
    GgMatrix m;
    return m.loadRotateZ(a);
  }

  //! \brief (x, y, z) 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
  //!   \param x 回転軸の x 成分.
  //!   \param y 回転軸の y 成分.
  //!   \param z 回転軸の z 成分.
  //!   \param a 回転角.
  //!   \return (x, y, z) を軸にさらに a 回転する変換行列.
  inline GgMatrix ggRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
  {
    GgMatrix m;
    return m.loadRotate(x, y, z, a);
  }

  //! \brief r 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
  //!   \param r 回転軸のベクトルを表す GLfloat[3] 型の配列.
  //!   \param a 回転角.
  //!   \return r を軸に a だけ回転する変換行列.
  inline GgMatrix ggRotate(const GLfloat *r, GLfloat a)
  {
    GgMatrix m;
    return m.loadRotate(r[0], r[1], r[2], a);
  }

  //! \brief r 方向のベクトルを軸とする回転の変換行列を乗じた結果を返す.
  //!   \param r 回転軸のベクトルと回転角を表す GLfloat[4] 型の配列.
  //!   \return (r[0], r[1], r[2]) を軸に r[3] だけ回転する変換行列.
  inline GgMatrix ggRotate(const GLfloat *r)
  {
    GgMatrix m;
    return m.loadRotate(r[0], r[1], r[2], r[3]);
  }

  //! \brief ビュー変換行列を返す.
  //!   \param ex 視点の位置の x 座標値.
  //!   \param ey 視点の位置の y 座標値.
  //!   \param ez 視点の位置の z 座標値.
  //!   \param tx 目標点の位置の x 座標値.
  //!   \param ty 目標点の位置の y 座標値.
  //!   \param tz 目標点の位置の z 座標値.
  //!   \param ux 上方向のベクトルの x 成分.
  //!   \param uy 上方向のベクトルの y 成分.
  //!   \param uz 上方向のベクトルの z 成分.
  //!   \return 求めたビュー変換行列.
  inline GgMatrix ggLookat(
    GLfloat ex, GLfloat ey, GLfloat ez,     // 視点の位置
    GLfloat tx, GLfloat ty, GLfloat tz,     // 目標点の位置
    GLfloat ux, GLfloat uy, GLfloat uz      // 上方向のベクトル
    )
  {
    GgMatrix m;
    return m.loadLookat(ex, ey, ez, tx, ty, tz, ux, uy, uz);
  }

  //! \brief ビュー変換行列を返す.
  //!   \param e 視点の位置の配列変数.
  //!   \param t 目標点の位置の配列変数.
  //!   \param u 上方向のベクトルのの配列変数.
  //!   \return 求めたビュー変換行列.
  inline GgMatrix ggLookat(
    const GLfloat *e,                       // 視点の位置
    const GLfloat *t,                       // 目標点の位置
    const GLfloat *u                        // 上方向のベクトル
    )
  {
    GgMatrix m;
    return m.loadLookat(e[0], e[1], e[2], t[0], t[1], t[2], u[0], u[1], u[2]);
  }

  //! \brief 直交投影変換行列を返す.
  //!   \param left ウィンドウの左端の位置.
  //!   \param right ウィンドウの右端の位置.
  //!   \param bottom ウィンドウの下端の位置.
  //!   \param top ウィンドウの上端の位置.
  //!   \param zNear 視点から前方面までの位置.
  //!   \param zFar 視点から後方面までの位置.
  //!   \return 求めた直交投影変換行列.
  inline GgMatrix ggOrthogonal(GLfloat left, GLfloat right,
    GLfloat bottom, GLfloat top,
    GLfloat zNear, GLfloat zFar)
  {
    GgMatrix m;
    return m.loadOrthogonal(left, right, bottom, top, zNear, zFar);
  }

  //! \brief 透視透視投影変換行列を返す.
  //!   \param left ウィンドウの左端の位置.
  //!   \param right ウィンドウの右端の位置.
  //!   \param bottom ウィンドウの下端の位置.
  //!   \param top ウィンドウの上端の位置.
  //!   \param zNear 視点から前方面までの位置.
  //!   \param zFar 視点から後方面までの位置.
  //!   \return 求めた透視投影変換行列.
  inline GgMatrix ggFrustum(GLfloat left, GLfloat right,
    GLfloat bottom, GLfloat top,
    GLfloat zNear, GLfloat zFar)
  {
    GgMatrix m;
    return m.loadFrustum(left, right, bottom, top, zNear, zFar);
  }

  //! \brief 画角を指定して透視投影変換行列を返す.
  //!   \param fovy y 方向の画角.
  //!   \param aspect 縦横比.
  //!   \param zNear 視点から前方面までの位置.
  //!   \param zFar 視点から後方面までの位置.
  //!   \return 求めた透視投影変換行列.
  inline GgMatrix ggPerspective(GLfloat fovy, GLfloat aspect,
    GLfloat zNear, GLfloat zFar)
  {
    GgMatrix m;
    return m.loadPerspective(fovy, aspect, zNear, zFar);
  }

  //! \brief 転置行列を返す.
  //!   \param m 元の変換行列.
  //!   \return m の転置行列.
  inline GgMatrix ggTranspose(const GgMatrix &m)
  {
    return m.transpose();
  }

  //! \brief 逆行列を返す.
  //!   \param m 元の変換行列.
  //!   \return m の逆行列.
  inline GgMatrix ggInvert(const GgMatrix &m)
  {
    return m.invert();
  }

  //! \brief 法線変換行列を返す.
  //!   \param m 元の変換行列.
  //!   \return m の法線変換行列.
  inline GgMatrix ggNormal(const GgMatrix &m)
  {
    return m.normal();
  }

  /*!
  ** \brief 四元数.
  */
  class GgQuaternion
    : public Gg
  {
    // 四元数の要素
    GLfloat array[4];

    // 四元数 p と四元数 q の積を四元数 r に求める
    void multiply(GLfloat *r, const GLfloat *p, const GLfloat *q) const;

    // 四元数 q が表す回転の変換行列を m に求める
    void toMatrix(GLfloat *m, const GLfloat *q) const;

    // 回転の変換行列 m が表す四元数を q に求める
    void toQuaternion(GLfloat *q, const GLfloat *m) const;

    // 球面線形補間 q と r を t で補間した四元数を p に求める
    void slerp(GLfloat *p, const GLfloat *q, const GLfloat *r, GLfloat t) const;

  public:

    //! \brief デストラクタ.
    virtual ~GgQuaternion() {}

    //! \brief コンストラクタ.
    GgQuaternion() {}

    //! \brief コンストラクタ.
    //!   \param x 四元数の x 要素.
    //!   \param y 四元数の y 要素.
    //!   \param z 四元数の z 要素.
    //!   \param w 四元数の w 要素.
    GgQuaternion(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      load(x, y, z, w);
    }

    //! \brief コンストラクタ.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    GgQuaternion(const GLfloat *a)
    {
      load(a);
    }

    //! \brief コピーコンストラクタ.
    //!   \param q GgQuaternion 型の四元数.
    GgQuaternion(const GgQuaternion &q)
    {
      load(q);
    }

    //! \brief 四元数を格納する.
    //!   \param x 四元数の x 要素.
    //!   \param y 四元数の y 要素.
    //!   \param z 四元数の z 要素.
    //!   \param w 四元数の w 要素.
    //!   \return 設定した四元数.
    GgQuaternion &load(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      array[0] = x;
      array[1] = y;
      array[2] = z;
      array[3] = w;
      return *this;
    }

    //! \brief 四元数を格納する.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return 設定した四元数.
    GgQuaternion &load(const GLfloat *a)
    {
      return load(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return 設定した四元数.
    GgQuaternion &load(const GgQuaternion &q)
    {
      return load(q.array);
    }

    //! \brief 四元数に別の四元数を加算した結果を格納する.
    //!   \param x 加える四元数の x 要素.
    //!   \param y 加える四元数の y 要素.
    //!   \param z 加える四元数の z 要素.
    //!   \param w 加える四元数の w 要素.
    //!   \return (x, y, z, w) を加えた四元数.
    GgQuaternion &loadAdd(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      array[0] += x;
      array[1] += y;
      array[2] += z;
      array[3] += w;
      return *this;
    }

    //! \brief 四元数に別の四元数を加算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a を加えた四元数.
    GgQuaternion &loadAdd(const GLfloat *a)
    {
      return loadAdd(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数に別の四元数を加算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を加えた四元数.
    GgQuaternion &loadAdd(const GgQuaternion &q)
    {
      return loadAdd(q.array);
    }

    //! \brief 四元数から別の四元数を減算した結果を格納する.
    //!   \param x 引く四元数の x 要素.
    //!   \param y 引く四元数の y 要素.
    //!   \param z 引く四元数の z 要素.
    //!   \param w 引く四元数の w 要素.
    //!   \return (x, y, z, w) を引いた四元数.
    GgQuaternion &loadSubtract(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      array[0] -= x;
      array[1] -= y;
      array[2] -= z;
      array[3] -= w;
      return *this;
    }

    //! \brief 四元数から別の四元数を減算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a を引いた四元数.
    GgQuaternion &loadSubtract(const GLfloat *a)
    {
      return loadSubtract(a);
    }

    //! \brief 四元数から別の四元数を減算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を引いた四元数.
    GgQuaternion &loadSubtract(const GgQuaternion &q)
    {
      return loadSubtract(q.array);
    }

    //! \brief 四元数に別の四元数を乗算した結果を格納する.
    //!   \param x 掛ける四元数の x 要素.
    //!   \param y 掛ける四元数の y 要素.
    //!   \param z 掛ける四元数の z 要素.
    //!   \param w 掛ける四元数の w 要素.
    //!   \return (x, y, z, w) を掛けた四元数.
    GgQuaternion &loadMultiply(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      GLfloat a[4] = { x, y, z, w };
      return loadMultiply(a);
    }

    //! \brief 四元数に別の四元数を乗算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a を乗じた四元数.
    GgQuaternion &loadMultiply(const GLfloat *a)
    {
      return load(multiply(a));
    }

    //! \brief 四元数に別の四元数を乗算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を乗じた四元数.
    GgQuaternion &loadMultiply(const GgQuaternion &q)
    {
      return loadMultiply(q.array);
    }

    //! \brief 四元を別の四元数で除算した結果を格納する.
    //!   \param x 割る四元数の x 要素.
    //!   \param y 割る四元数の y 要素.
    //!   \param z 割る四元数の z 要素.
    //!   \param w 割る四元数の w 要素.
    //!   \return (x, y, z, w) を割った四元数.
    GgQuaternion &loadDivide(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
    {
      GLfloat a[4] = { x, y, z, w };
      return loadDivide(a);
    }

    //! \brief 四元を別の四元数で除算した結果を格納する.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a で割った四元数.
    GgQuaternion &loadDivide(const GLfloat *a)
    {
      return load(divide(a));
    }

    //! \brief 四元を別の四元数で除算した結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q で割った四元数.
    GgQuaternion &loadDivide(const GgQuaternion &q)
    {
      return loadDivide(q.array);
    }

    //! \brief 四元数に別の四元数を加算した結果を返す.
    //!   \param x 加える四元数の x 要素.
    //!   \param y 加える四元数の y 要素.
    //!   \param z 加える四元数の z 要素.
    //!   \param w 加える四元数の w 要素.
    //!   \return (x, y, z, w) を加えた四元数.
    GgQuaternion add(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GgQuaternion s;
      s.array[0] = array[0] + x;
      s.array[1] = array[1] + y;
      s.array[2] = array[2] + z;
      s.array[3] = array[3] + w;
      return s;
    }

    //! \brief 四元数に別の四元数を加算した結果を返す.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a を加えた四元数.
    GgQuaternion add(const GLfloat *a) const
    {
      return add(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数に別の四元数を加算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を加えた四元数.
    GgQuaternion add(const GgQuaternion &q) const
    {
      return add(q.array);
    }

    //! \brief 四元数から別の四元数を減算した結果を返す.
    //!   \param x 引く四元数の x 要素.
    //!   \param y 引く四元数の y 要素.
    //!   \param z 引く四元数の z 要素.
    //!   \param w 引く四元数の w 要素.
    //!   \return (x, y, z, w) を引いた四元数.
    GgQuaternion subtract(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GgQuaternion s;
      s.array[0] = array[0] - x;
      s.array[1] = array[1] - y;
      s.array[2] = array[2] - z;
      s.array[3] = array[3] - w;
      return s;
    }

    //! \brief 四元数から別の四元数を減算した結果を返す.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a を引いた四元数.
    GgQuaternion subtract(const GLfloat *a) const
    {
      return subtract(a[0], a[1], a[2], a[3]);
    }

    //! \brief 四元数から別の四元数を減算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を引いた四元数.
    GgQuaternion subtract(const GgQuaternion &q) const
    {
      return subtract(q.array);
    }

    //! \brief 四元数に別の四元数を乗算した結果を返す.
    //!   \param x 掛ける四元数の x 要素.
    //!   \param y 掛ける四元数の y 要素.
    //!   \param z 掛ける四元数の z 要素.
    //!   \param w 掛ける四元数の w 要素.
    //!   \return (x, y, z, w) を掛けた四元数.
    GgQuaternion multiply(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GLfloat a[4] = { x, y, z, w };
      return multiply(a);
    }

    //! \brief 四元数に別の四元数を乗算した結果を返す.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a を掛けた四元数.
    GgQuaternion multiply(const GLfloat *a) const
    {
      GgQuaternion s;
      multiply(s.array, array, a);
      return s;
    }

    //! \brief 四元数に別の四元数を乗算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q を掛けた四元数.
    GgQuaternion multiply(const GgQuaternion &q) const
    {
      return multiply(q.array);
    }

    //! \brief 四元数を別の四元数で除算した結果を返す.
    //!   \param x 割る四元数の x 要素.
    //!   \param y 割る四元数の y 要素.
    //!   \param z 割る四元数の z 要素.
    //!   \param w 割る四元数の w 要素.
    //!   \return (x, y, z, w) を割った四元数.
    GgQuaternion divide(GLfloat x, GLfloat y, GLfloat z, GLfloat w) const
    {
      GLfloat a[4] = { x, y, z, w };
      return divide(a);
    }

    //! \brief 四元数を別の四元数で除算した結果を返す.
    //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
    //!   \return a で割った四元数.
    GgQuaternion divide(const GLfloat *a) const
    {
      GgQuaternion s, ia;
      ia.loadInvert(a);
      multiply(s.array, array, ia.array);
      return s;
    }

    //! \brief 四元数を別の四元数で除算した結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \return q で割った四元数.
    GgQuaternion divide(const GgQuaternion &q) const
    {
      return divide(q.array);
    }

    // 演算子
    GgQuaternion &operator=(const GLfloat *a)
    {
      return load(a);
    }
    GgQuaternion &operator=(const GgQuaternion &q)
    {
      return operator=(q.array);
    }
    GgQuaternion &operator+=(const GLfloat *a)
    {
      return loadAdd(a);
    }
    GgQuaternion &operator+=(const GgQuaternion &q)
    {
      return operator+=(q.array);
    }
    GgQuaternion &operator-=(const GLfloat *a)
    {
      return loadSubtract(a);
    }
    GgQuaternion &operator-=(const GgQuaternion &q)
    {
      return operator-=(q.array);
    }
    GgQuaternion &operator*=(const GLfloat *a)
    {
      return loadMultiply(a);
    }
    GgQuaternion &operator*=(const GgQuaternion &q)
    {
      return operator*=(q.array);
    }
    GgQuaternion &operator/=(const GLfloat *a)
    {
      return loadDivide(a);
    }
    GgQuaternion &operator/=(const GgQuaternion &q)
    {
      return operator/=(q.array);
    }
    GgQuaternion operator+(const GLfloat *a) const
    {
      return add(a);
    }
    GgQuaternion operator+(const GgQuaternion &q) const
    {
      return operator+(q.array);
    }
    GgQuaternion operator-(const GLfloat *a) const
    {
      return add(a);
    }
    GgQuaternion operator-(const GgQuaternion &q) const
    {
      return operator-(q.array);
    }
    GgQuaternion operator*(const GLfloat *a) const
    {
      return multiply(a);
    }
    GgQuaternion operator*(const GgQuaternion &q) const
    {
      return operator*(q.array);
    }
    GgQuaternion operator/(const GLfloat *a) const
    {
      return divide(a);
    }
    GgQuaternion operator/(const GgQuaternion &q) const
    {
      return operator/(q.array);
    }

    //! \brief 回転の変換行列を表す四元数を格納する.
    //!   \param a GLfloat[16] 型の変換行列.
    //!   \return a による回転の変換に相当する四元数.
    GgQuaternion &loadMatrix(const GLfloat *a)
    {
      toQuaternion(array, a);
      return *this;
    }

    //! \brief 回転の変換行列 m を表す四元数を格納する.
    //!   \param m Ggmatrix 型の変換行列.
    //!   \return m による回転の変換に相当する四元数.
    GgQuaternion &loadMatrix(const GgMatrix &m)
    {
      return loadMatrix(m.get());
    }

    //! \brief 単位元を格納する.
    //!   \return 格納された単位元.
    GgQuaternion &loadIdentity()
    {
      return load(0.0f, 0.0f, 0.0f, 1.0f);
    }

    //! \brief (x, y, z) を軸として角度 a 回転する四元数を格納する.
    //!   \param x 軸ベクトルの x 成分.
    //!   \param y 軸ベクトルの y 成分.
    //!   \param z 軸ベクトルの z 成分.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a);

    //! \brief (v[0], v[1], v[2]) を軸として角度 a 回転する四元数を格納する.
    //!   \param v 軸ベクトルを表す GLfloat[3] 型の配列.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotate(const GLfloat *v, GLfloat a)
    {
      return loadRotate(v[0], v[1], v[2], a);
    }

    //! \brief (v[0], v[1], v[2]) を軸として角度 v[3] 回転する四元数を格納する.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotate(const GLfloat *v)
    {
      return loadRotate(v[0], v[1], v[2], v[3]);
    }

    //! \brief x 軸中心に角度 a 回転する四元数を格納する.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotateX(GLfloat a)
    {
      return loadRotate(1.0f, 0.0f, 0.0f, a);
    }

    //! \brief y 軸中心に角度 a 回転する四元数を格納する.
    //!   \param a 回転角.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotateY(GLfloat a)
    {
      return loadRotate(0.0f, 1.0f, 0.0f, a);
    }

    //! \brief z 軸中心に角度 a 回転する四元数を格納する.
    //!   \param v 軸ベクトルを表す GLfloat[4] 型の配列.
    //!   \return 格納された回転を表す四元数.
    GgQuaternion &loadRotateZ(GLfloat a)
    {
      return loadRotate(0.0f, 0.0f, 1.0f, a);
    }

    //! \brief 四元数を (x, y, z) を軸として角度 a 回転した四元数を返す.
    //!   \param x 軸ベクトルの x 成分.
    //!   \param y 軸ベクトルの y 成分.
    //!   \param z 軸ベクトルの z 成分.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a) const
    {
      GgQuaternion q;
      return multiply(q.loadRotate(x, y, z, a));
    }

    //! \brief 四元数を (v[0], v[1], v[2]) を軸として角度 a 回転した四元数を返す.
    //!   \param v 軸ベクトルを表す GLfloat[3] 型の配列.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotate(const GLfloat *v, GLfloat a) const
    {
      return rotate(v[0], v[1], v[2], a);
    }

    //! \brief 四元数を (v[0], v[1], v[2]) を軸として角度 v[3] 回転した四元数を返す.
    //!   \param v 軸ベクトルを表す GLfloat[4] 型の配列.
    //!   \return 回転した四元数.
    GgQuaternion rotate(const GLfloat *v) const
    {
      return rotate(v[0], v[1], v[2], v[3]);
    }

    //! \brief 四元数を x 軸中心に角度 a 回転した四元数を返す.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotateX(GLfloat a) const
    {
      return rotate(1.0f, 0.0f, 0.0f, a);
    }

    //! \brief 四元数を y 軸中心に角度 a 回転した四元数を返す.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotateY(GLfloat a) const
    {
      return rotate(0.0f, 1.0f, 0.0f, a);
    }

    //! \brief 四元数を z 軸中心に角度 a 回転した四元数を返す.
    //!   \param a 回転角.
    //!   \return 回転した四元数.
    GgQuaternion rotateZ(GLfloat a) const
    {
      return rotate(0.0f, 0.0f, 1.0f, a);
    }

    //! \brief オイラー角 (heading, pitch, roll) で与えられた回転を表す四元数を格納する.
    //!   \param heading y 軸中心の回転角.
    //!   \param pitch x 軸中心の回転角.
    //!   \param roll z 軸中心の回転角.
    //!   \return 格納した回転を表す四元数.
    GgQuaternion &loadEuler(GLfloat heading, GLfloat pitch, GLfloat roll);

    //! \brief オイラー角 (e[0], e[1], e[2]) で与えられた回転を表す四元数を格納する.
    //!   \param e オイラー角を表す GLfloat[3] 型の配列 (heading, pitch, roll).
    //!   \return 格納した回転を表す四元数.
    GgQuaternion &loadEuler(const GLfloat *e)
    {
      return loadEuler(e[0], e[1], e[2]);
    }

    //! \brief 四元数をオイラー角 (heading, pitch, roll) で回転した四元数を返す.
    //!   \param heading y 軸中心の回転角.
    //!   \param pitch x 軸中心の回転角.
    //!   \param roll z 軸中心の回転角.
    //!   \return 回転した四元数.
    GgQuaternion euler(GLfloat heading, GLfloat pitch, GLfloat roll) const
    {
      GgQuaternion r;
      return multiply(r.loadEuler(heading, pitch, roll));
    }

    //! \brief 四元数をオイラー角 (e[0], e[1], e[2]) で回転した四元数を返す.
    //!   \param e オイラー角を表す GLfloat[3] 型の配列 (heading, pitch, roll).
    //!   \return 回転した四元数.
    GgQuaternion euler(const GLfloat *e) const
    {
      return euler(e[0], e[1], e[2]);
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param a 四元数を格納した GLfloat[4] 型の配列.
    //!   \param b 四元数を格納した GLfloat[4] 型の配列.
    //!   \param t 補間パラメータ.
    //!   \return 格納した a, b を t で内分した四元数.
    GgQuaternion &loadSlerp(const GLfloat *a, const GLfloat *b, GLfloat t)
    {
      slerp(array, a, b, t);
      return *this;
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param r GgQuaternion 型の四元数.
    //!   \param t 補間パラメータ.
    //!   \return 格納した q, r を t で内分した四元数.
    GgQuaternion &loadSlerp(const GgQuaternion &q, const GgQuaternion &r, GLfloat t)
    {
      return loadSlerp(q.array, r.array, t);
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param a 四元数を格納した GLfloat[4] 型の配列.
    //!   \param t 補間パラメータ.
    //!   \return 格納した q, a を t で内分した四元数.
    GgQuaternion &loadSlerp(const GgQuaternion &q, const GLfloat *a, GLfloat t)
    {
      return loadSlerp(q.array, a, t);
    }

    //! \brief 球面線形補間の結果を格納する.
    //!   \param a 四元数を格納した GLfloat[4] 型の配列.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param t 補間パラメータ.
    //!   \return 格納した a, q を t で内分した四元数.
    GgQuaternion &loadSlerp(const GLfloat *a, const GgQuaternion &q, GLfloat t)
    {
      return loadSlerp(a, q.array, t);
    }

    //! \brief 引数に指定した四元数を正規化して格納する.
    //!   \return 正規化された四元数.
    GgQuaternion &loadNormalize(const GgQuaternion &q);

    //! \brief 引数に指定した四元数の共役四元数を格納する.
    //!   \return 共役四元数.
    GgQuaternion &loadConjugate(const GgQuaternion &q);

    //! \brief 引数に指定した四元数の逆元を格納する.
    //!   \return 四元数の逆元.
    GgQuaternion &loadInvert(const GgQuaternion &q);

    //! \brief 球面線形補間の結果を返す.
    //!   \param a 四元数を格納した GLfloat[4] 型の配列.
    //!   \param t 補間パラメータ.
    //!   \return 四元数を a に対して t で内分した結果.
    GgQuaternion slerp(GLfloat *a, GLfloat t) const
    {
      GgQuaternion q;
      slerp(q.array, array, a, t);
      return q;
    }

    //! \brief 球面線形補間の結果を返す.
    //!   \param q GgQuaternion 型の四元数.
    //!   \param t 補間パラメータ.
    //!   \return 四元数を q に対して t で内分した結果.
    GgQuaternion slerp(const GgQuaternion &q, GLfloat t) const
    {
      return slerp(q.array, t);
    }

    //! \brief 四元数のノルムを返す.
    //!   \return 四元数のノルム.
    GLfloat norm() const;

    //! \brief 正規化する.
    //!   \return 正規化された四元数.
    GgQuaternion &normalize()
    {
      return loadNormalize(*this);
    }

    //! \brief 共役四元数に変換する.
    //!   \return 共役四元数.
    GgQuaternion &conjugate()
    {
      return loadConjugate(*this);
    }

    //! \brief 逆元に変換する.
    //!   \return 四元数の逆元.
    GgQuaternion &invert()
    {
      return loadInvert(*this);
    }

    //! \brief 四元数を取り出す.
    //!   \return 四元数を表す GLfloat[4] 型の配列.
    const GLfloat *get() const
    {
      return array;
    }

    //! \brief 四元数を取り出す.
    //!   \param a 四元数を格納する GLfloat[4] 型の配列.
    void get(GLfloat *a) const
    {
      a[0] = array[0];
      a[1] = array[1];
      a[2] = array[2];
      a[3] = array[3];
    }

    //! \brief 四元数が表す回転の変換行列を a に求める.
    //!   \param a 回転の変換行列を格納する GLfloat[16] 型の配列.
    void getMatrix(GLfloat *a) const
    {
      toMatrix(a, array);
    }

    //! \brief 四元数が表す回転の変換行列を m に求める.
    //!   \param m 回転の変換行列を格納する GgMatrix 型の変数.
    void getMatrix(GgMatrix &m) const
    {
      toMatrix(m.array, array);
    }

    //! \brief 四元数が表す回転の変換行列を取り出す.
    //!   \return 回転の変換を表す GgMatrix 型の変換行列.
    GgMatrix getMatrix() const
    {
      GgMatrix m;
      toMatrix(m.array, array);
      return m;
    }
  };

  //! \brief 四元数を返す
  //!   \param x 四元数の x 要素.
  //!   \param y 四元数の y 要素.
  //!   \param z 四元数の z 要素.
  //!   \param w 四元数の w 要素.
  //! \return 四元数.
  inline GgQuaternion ggQuaternion(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
  {
    GgQuaternion q;
    return q.load(x, y, z, w);
  }

  //! \brief 四元数を返す
  //!   \param a GLfloat 型の GLfloat[4] 型の配列に格納した四元数.
  //!   \return 四元数.
  inline GgQuaternion ggQuaternion(const GLfloat *a)
  {
    return ggQuaternion(a[0], a[1], a[2], a[3]);
  }

  //! \brief 単位四元数を返す
  //! \return 単位四元数.
  inline GgQuaternion ggIdentityQuaternion()
  {
    GgQuaternion q;
    return q.loadIdentity();
  }

  //! \brief 回転の変換行列 m を表す四元数を返す.
  //!   \param m GLfloat[16] 型の配列.
  //!   \return m による回転の変換に相当する四元数.
  inline GgQuaternion ggMatrixQuaternion(const GLfloat *a)
  {
    GgQuaternion q;
    return q.loadMatrix(a);
  }

  //! \brief 回転の変換行列 m を表す四元数を返す.
  //!   \param m GgMatrix 型の変換行列.
  //!   \return m による回転の変換に相当する四元数.
  inline GgQuaternion ggMatrixQuaternion(const GgMatrix &m)
  {
    return ggMatrixQuaternion(m.get());
  }

  //! \brief 四元数 q の回転の変換行列を返す.
  //!   \param q 元の四元数.
  //!   \return 四元数 q が表す回転に相当する GgMatrix 型の変換行列.
  inline GgMatrix ggQuaternionMatrix(const GgQuaternion &q)
  {
    GLfloat m[16];
    q.getMatrix(m);
    GgMatrix t;
    return t.load(m);
  }

  //! \brief 四元数 q の回転の転置した変換行列を返す.
  //!   \param q 元の四元数.
  //!   \return 四元数 q が表す回転に相当する転置した GgMatrix 型の変換行列.
  inline GgMatrix ggQuaternionTransposeMatrix(const GgQuaternion &q)
  {
    GLfloat m[16];
    q.getMatrix(m);
    GgMatrix t;
    return t.loadTranspose(m);
  }

  //! \brief (x, y, z) を軸として角度 a 回転する四元数を返す.
  //!   \param x 軸ベクトルの x 成分.
  //!   \param y 軸ベクトルの y 成分.
  //!   \param z 軸ベクトルの z 成分.
  //!   \param a 回転角.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggRotateQuaternion(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
  {
    GgQuaternion q;
    return q.loadRotate(x, y, z, a);
  }

  //! \brief (v[0], v[1], v[2]) を軸として角度 a 回転する四元数を返す.
  //!   \param v 軸ベクトルを表す GLfloat[3] 型の配列.
  //!   \param a 回転角.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggRotateQuaternion(const GLfloat *v, GLfloat a)
  {
    return ggRotateQuaternion(v[0], v[1], v[2], a);
  }

  //! \brief (v[0], v[1], v[2]) を軸として角度 v[3] 回転する四元数を返す.
  //!   \param v 軸ベクトルを表す GLfloat[4] 型の配列.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggRotateQuaternion(const GLfloat *v)
  {
    return ggRotateQuaternion(v[0], v[1], v[2], v[3]);
  }

  //! \brief オイラー角 (heading, pitch, roll) で与えられた回転を表す四元数を返す.
  //!   \param heading y 軸中心の回転角.
  //!   \param pitch x 軸中心の回転角.
  //!   \param roll z 軸中心の回転角.
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggEulerQuaternion(GLfloat heading, GLfloat pitch, GLfloat roll)
  {
    GgQuaternion q;
    return q.loadEuler(heading, pitch, roll);
  }

  //! \brief オイラー角 (e[0], e[1], e[2]) で与えられた回転を表す四元数を返す.
  //!   \param e オイラー角を表す GLfloat[3] 型の配列 (heading, pitch, roll).
  //!   \return 回転を表す四元数.
  inline GgQuaternion ggEulerQuaternion(const GLfloat *e)
  {
    return ggEulerQuaternion(e[0], e[1], e[2]);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param a 四元数を格納した GLfloat[4] 型の配列.
  //!   \param b 四元数を格納した GLfloat[4] 型の配列.
  //!   \param t 補間パラメータ.
  //!   \return a, b を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GLfloat *a, const GLfloat *b, GLfloat t)
  {
    GgQuaternion r;
    return r.loadSlerp(a, b, t);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \param r GgQuaternion 型の四元数.
  //!   \param t 補間パラメータ.
  //!   \return q, r を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GgQuaternion &q, const GgQuaternion &r, GLfloat t)
  {
    return ggSlerp(q.get(), r.get(), t);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \param a 四元数を格納した GLfloat[4] 型の配列.
  //!   \param t 補間パラメータ.
  //!   \return q, a を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GgQuaternion &q, const GLfloat *a, GLfloat t)
  {
    return ggSlerp(q.get(), a, t);
  }

  //! \brief 二つの四元数の球面線形補間の結果を返す.
  //!   \param a 四元数を格納した GLfloat[4] 型の配列.
  //!   \param q GgQuaternion 型の四元数.
  //!   \param t 補間パラメータ.
  //!   \return a, q を t で内分した四元数.
  inline GgQuaternion ggSlerp(const GLfloat *a, const GgQuaternion &q, GLfloat t)
  {
    return ggSlerp(a, q.get(), t);
  }

  //! \brief 四元数のノルムを返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q のノルム.
  inline GLfloat ggNorm(const GgQuaternion &q)
  {
    return q.norm();
  }

  //! \brief 正規化した四元数を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q を正規化した四元数.
  inline GgQuaternion ggNormalize(const GgQuaternion &q)
  {
    GgQuaternion r;
    return r.loadNormalize(q);
  }

  //! \brief 共役四元数を返す.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q の共役四元数.
  inline GgQuaternion ggConjugate(const GgQuaternion &q)
  {
    GgQuaternion r;
    return r.loadConjugate(q);
  }

  //! \brief 四元数の逆元を求める.
  //!   \param q GgQuaternion 型の四元数.
  //!   \return 四元数 q の逆元.
  inline GgQuaternion ggInvert(const GgQuaternion &q)
  {
    GgQuaternion r;
    return r.loadInvert(q);
  }

  /*!
  ** \brief 簡易トラックボール処理.
  */
  class GgTrackball
    : public Gg
  {
    float cx, cy;                           // ドラッグ開始位置
    bool drag;                              // ドラッグ中か否か
    float sx, sy;                           // マウスの絶対位置→ウィンドウ内での相対位置の換算係数
    GgQuaternion cq;                        // 回転の初期値 (四元数)
    GgQuaternion tq;                        // ドラッグ中の回転 (四元数)
    GgMatrix rt;                            // 回転の変換行列

  public:

    //! \brief デストラクタ.
    virtual ~GgTrackball() {}

    //! \brief コンストラクタ.
    GgTrackball()
    {
      reset();
    }

    //! \brief トラックボール処理するマウスの移動範囲を指定する.
    //!   \brief ウィンドウのリサイズ時に呼び出す.
    //!   \param w 領域の幅.
    //!   \param h 領域の高さ.
    void region(int w, int h);

    //! \brief トラックボール処理を開始する.
    //!   \brief マウスのドラッグ開始時 (マウスボタンを押したとき) に呼び出す.
    //!   \param x 現在のマウスの x 座標.
    //!   \param y 現在のマウスの y 座標.
    void start(float x, float y);

    //! \brief 回転の変換行列を計算する.
    //!   \brief マウスのドラッグ中に呼び出す.
    //!   \param x 現在のマウスの x 座標.
    //!   \param y 現在のマウスの y 座標.
    void motion(float x, float y);

    //! \brief トラックボールの回転角を修正する.
    //!   \param q 修正分の回転角の四元数.
    void rotate(const GgQuaternion &q);

    //! \brief トラックボール処理を停止する.
    //!   \brief マウスのドラッグ終了時 (マウスボタンを離したとき) に呼び出す.
    //!   \param x 現在のマウスの x 座標.
    //!   \param y 現在のマウスの y 座標.
    void stop(float x, float y);

    //! \brief トラックボールをリセットする
    void reset();

    //! \brief 現在の回転の変換行列を取り出す.
    //!   \return 回転の変換を表す GLfloat[16] 型の配列.
    const GLfloat *get() const
    {
      return rt.get();
    }

    //! \brief 現在の回転の変換行列を取り出す.
    //!   \return 回転の変換を表す GgMatrix 型の変換行列.
    const GgMatrix &getMatrix() const
    {
      return rt;
    }

    //! \brief 現在の回転の四元数を取り出す.
    //!   \return 回転の変換を表す Quaternion 型の四元数.
    const GgQuaternion &getQuaternion() const
    {
      return tq;
    }
  };

  /*!
  ** \brief 参照カウンタ.
  **
  **   複数の属性データ間で共有されるリソースの確保と解放を管理する
  */
  class GgCounter
    : public Gg
  {
    // 参照カウント
    unsigned int count;

    // デストラクタ
    ~GgCounter() {}

    // コンストラクタ
    GgCounter()
      : count(1) {}

    // 参照カウントを属性データクラスから直接操作できるようにする
    friend class GgAttribute;
 };

  /*!
  ** \brief 属性データ.
  **
  **   テクスチャとシェーダの基底クラス.
  **   インスタンスは複数のオブジェクトから参照されることを想定する.
  **   そのためこのクラスでは参照カウントを管理する.
  */
  class GgAttribute
    : public Gg
  {
    // 参照カウンタ
    GgCounter *ref;

  protected:

    //! \brief 唯一のオブジェクトかどうか調べる.
    //!   \return 唯一のオブジェクトなら真.
    bool last() const
    {
      return ref->count == 1;
    }

    //! \brief 参照カウンタの新規作成.
    //!   \return 唯一のオブジェクトなら真.
    bool newCounter()
    {
      // 唯一のオブジェクトかどうか調べる
      bool status(last());

      // 元の参照カウンタの管理対象から外す
      if (--ref->count == 0) delete ref;

      // 新しい参照カウンタを作成して, それに付け替える
      ref = new GgCounter;

      // 元のオブジェクトの状態を返す
      return status;
    }

  public:

    //! \brief デストラクタ.
    virtual ~GgAttribute()
    {
      // 参照カウンタを減じて 0 になったら参照カウンタを削除する
      if (--ref->count == 0) delete ref;
    }

    //! \brief コンストラクタ.
    GgAttribute()
      : ref(new GgCounter) {}

    //! \brief コピーコンストラクタ.
    GgAttribute(const GgAttribute &o)
      : ref(o.ref)
    {
      ++ref->count;
    }

    // 代入
    GgAttribute &operator=(const GgAttribute &o)
    {
      if (&o != this) ++(ref = o.ref)->count;
      return *this;
    }
  };

  /*!
  ** \brief テクスチャ.
  **
  **   カラー画像を読み込んでテクスチャマップを作成する.
  */
  class GgTexture
    : public GgAttribute
  {
    // テクスチャ名
    GLuint texture;

  public:

    //! \brief デストラクタ.
    virtual ~GgTexture()
    {
      // 参照しているオブジェクトが一つだけならテクスチャを削除する
      if (last())
      {
        glBindTexture(GL_TEXTURE_2D, 0);
        glDeleteTextures(1, &texture);
      }
    }

    //! \brief コンストラクタ.
    GgTexture()
    {
      glGenTextures(1, &texture);
    }

    //! \brief コンストラクタ.
    GgTexture(GLuint tex)
      : texture(tex) {}

    //! \brief コンストラクタ.
    //!   \param width テクスチャの幅.
    //!   \param height テクスチャの高さ.
    //!   \param internal テクスチャの内部フォーマット.
    //!   \param format 読み込むテクスチャのフォーマット.
    //!   \param image テクスチャとして用いる画像データ (0 ならデータを読み込まずテクスチャメモリの確保だけを行う)
    GgTexture(GLsizei width, GLsizei height, GLenum internal = GL_RGBA, GLenum format = GL_RGBA, const GLvoid *image = 0)
      : texture(ggLoadTexture(width, height, internal, format, image)) {}

    //! \brief コンストラクタ.
    //!   \param name テクスチャメモリに読み込む TGA フォーマットの画像ファイル名.
    //!   \param internal テクスチャの内部フォーマット.
    GgTexture(const char *name, GLenum internal = GL_RGBA)
      : texture(ggLoadImage(name, internal)) {}

    // コピーコンストラクタ.
    GgTexture(const GgTexture &o)
      : GgAttribute(o), texture(o.texture) {}

    // 代入
    GgTexture &operator=(const GgTexture &o)
    {
      if (&o != this)
      {
        GgAttribute::operator=(o);
        texture = o.texture;
      }
      return *this;
    }

    //! \brief テクスチャの使用開始 (このテクスチャを使用する際に呼び出す).
    //!   \param unit 使用するテクスチャユニット番号（0〜）.
    void use(GLuint unit = 0) const
    {
      glActiveTexture(GL_TEXTURE0 + unit);
      glBindTexture(GL_TEXTURE_2D, texture);
    }

    //! \brief テクスチャの使用終了 (このテクスチャを使用しなくなったら呼び出す).
    void unuse() const
    {
      glBindTexture(GL_TEXTURE_2D, 0);
      glActiveTexture(GL_TEXTURE0);
    }

    //! \brief 使用しているテクスチャのテクスチャ名を得る.
    //!   \return テクスチャ名.
    GLuint get() const
    {
      return texture;
    }
  };

  /*!
  ** \brief 法線マップ.
  **
  **   高さマップ（グレイスケール画像）を読み込んで法線マップを作成する.
  */
  class GgNormalTexture
    : public GgTexture
  {
  public:

    //! \brief デストラクタ.
    virtual ~GgNormalTexture() {}

    //! \brief コンストラクタ.
    GgNormalTexture() {}

    //! \brief コンストラクタ.
    //!   \param name 画像ファイル名 (1 チャネルの TGA 画像).
    //!   \param nz 法線マップの z 成分の値.
    GgNormalTexture(const char *name, float nz = 1.0f)
      : GgTexture(ggLoadHeight(name, nz)) {}

    //! \brief コピーコンストラクタ.
    GgNormalTexture(const GgNormalTexture &o)
      : GgTexture(o) {}

    // 代入
    GgNormalTexture &operator=(const GgNormalTexture &o)
    {
      GgTexture::operator=(o);
      return *this;
    }
  };

  /*!
  ** \brief バッファオブジェクト.
  **
  **   頂点／インデックスを格納する頂点バッファオブジェクトの基底クラス.
  */
  template <typename T>
  class GgBuffer
    : public GgAttribute
  {
    // バッファオブジェクト
    GLuint buffer;

    // ターゲット
    GLenum target;

    // データ数
    GLuint number;

  public:

    //! \brief デストラクタ.
    virtual ~GgBuffer<T>()
    {
      // 参照しているオブジェクトが一つだけならバッファを削除する
      if (last())
      {
        glBindBuffer(target, 0);
        glDeleteBuffers(1, &buffer);
      }
    }

    //! \brief コンストラクタ.
    GgBuffer<T>()
      : number(0)
    {
      glGenBuffers(1, &buffer);
    }

    //! \brief コンストラクタ.
    //!   \param target バッファオブジェクトのターゲット.
    //!   \param number データの数.
    //!   \param data データが格納されている領域の先頭のポインタ (NULL ならデータを転送しない).
    //!   \param usage バッファオブジェクトの使い方.
    GgBuffer<T>(GLenum target, GLuint number, const T *data, GLenum usage = GL_STATIC_DRAW)
    {
      glGenBuffers(1, &buffer);
      load(target, number, data, usage);
    }

    //! \brief コピーコンストラクタ.
    GgBuffer<T>(const GgBuffer<T> &o)
      : GgAttribute(o), buffer(o.buffer), target(o.target), number(o.number) {}

    // 代入
    GgBuffer<T> &operator=(const GgBuffer<T> &o)
    {
      if (&o != this)
      {
        GgAttribute::operator=(o);
        buffer = o.buffer;
        target = o.target;
        number = o.number;
      }
      return *this;
    }

    //! \brief すでに確保したバッファオブジェクトにデータを転送する.
    //!   \param number 転送するデータの数 (0 ならバッファ全体).
    //!   \param data 転送元のデータが格納されてている領域の先頭のポインタ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint number, const T *data, GLuint offset = 0)
    {
      if (number == 0) number = this->number;
      glBufferSubData(target, offset * sizeof (T), number * sizeof (T), data);
    }

    //! \brief バッファオブジェクトを確保してデータを格納する.
    //!   \param target バッファオブジェクトのターゲット.
    //!   \param number データの数.
    //!   \param data データが格納されている領域の先頭のポインタ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLenum target, GLuint number, const T *data, GLenum usage = GL_STATIC_DRAW)
    {
      this->target = target;
      this->number = number;
      glBindBuffer(target, buffer);
      glBufferData(target, number * sizeof (T), data, usage);
    }

    //! \brief 別のバッファオブジェクトからデータを複写する.
    //!   \param buf コピー元のバッファオブジェクト名.
    void copy(GLuint buf)
    {
      glBindBuffer(GL_COPY_READ_BUFFER, buf);
      glBindBuffer(GL_COPY_WRITE_BUFFER, buffer);
      glCopyBufferSubData(GL_COPY_READ_BUFFER, GL_COPY_WRITE_BUFFER, 0, 0, number * sizeof (T));
      glBindBuffer(GL_COPY_WRITE_BUFFER, 0);
      glBindBuffer(GL_COPY_READ_BUFFER, 0);
    }

    //! \brief バッファオブジェクト名を取り出す.
    //!   \return バッファオブジェクト名.
    GLuint buf() const
    {
      return buffer;
    }

    //! \brief バッファオブジェクトが保持するデータの数を取り出す.
    //!   \return 保持するデータの数.
    GLuint num() const
    {
      return number;
    }
  };

  /*!
  ** \brief 形状データの基底クラス.
  **
  **   形状データのクラスはこのクラスを派生して作る.
  **   基本図形の種類と頂点配列オブジェクトを保持する.
  */
  class GgShape
    : public Gg
  {
    // 頂点配列オブジェクト
    GLuint vao;

    // 基本図形の種類
    GLenum mode;

  public:

    //! \brief デストラクタ.
    virtual ~GgShape()
    {
      glBindVertexArray(0);
      glDeleteVertexArrays(1, &vao);
    }

    //! \brief コンストラクタ.
    //!   \param mode 基本図形の種類.
    GgShape(GLenum mode = 0)
    {
      this->mode = mode;
      glGenVertexArrays(1, &vao);
      glBindVertexArray(vao);
    }

    //! \brief コピーコンストラクタ.
    GgShape(const GgShape &o)
      : vao(o.vao), mode(o.mode)
    {
      glBindVertexArray(vao);
    }

    // 代入演算子
    GgShape &operator=(const GgShape &o)
    {
      if (this != &o)
      {
        vao = o.vao;
        mode = o.mode;
        glBindVertexArray(vao);
      }
      return *this;
    }

    //! \brief この図形の頂点配列オブジェクトを指定する.
    void use() const
    {
      glBindVertexArray(vao);
    }

    //! \brief 頂点配列オブジェクト名を取り出す.
    //!   \return 頂点配列オブジェクト名.
    GLuint get() const
    {
      return vao;
    }

    //! \brief 基本図形の設定.
    //!   \param mode 基本図形の種類.
    void setMode(GLenum mode)
    {
      this->mode = mode;
    }

    //! \brief 基本図形の検査.
    //!   \return この頂点配列オブジェクトの基本図形の種類.
    GLenum getMode() const
    {
      return this->mode;
    }

    //! \brief 図形の描画.
    //!   \brief この形状を描画する手続きをオーバーライドする.
    virtual void draw(GLint first = 0, GLsizei count = 0) const = 0;
  };

  /*!
  ** \brief ポイント.
  */
  class GgPoints
    : public GgShape
  {
    // 頂点バッファオブジェクト
    GgBuffer<GLfloat[3]> position;

    // バッファオブジェクトを確保して頂点位置を格納する
    //!   \param nv 頂点数
    //!   \param pos 頂点位置のデータ
    //!   \param usage バッファオブジェクトの使い方
    void loadPosition(GLuint nv, const GLfloat (*pos)[3], GLenum usage)
    {
      // 頂点位置
      position.load(GL_ARRAY_BUFFER, nv, pos, usage);

      // このバッファオブジェクトは index == 0 の in 変数から入力する
      glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
      glEnableVertexAttribArray(0);
    }

  public:

    //! \brief デストラクタ.
    virtual ~GgPoints() {}

    //! \brief コンストラクタ.
    GgPoints(GLenum mode = GL_POINTS)
      : GgShape(mode) {}

    //! \brief コンストラクタ.
    //!   \param nv 頂点数.
    //!   \param pos この図形の頂点の位置のデータの配列 (NULL ならデータを転送しない).
    //!   \param mode 描画する基本図形の種類.
    //!   \param usage バッファオブジェクトの使い方.
    GgPoints(GLuint nv, const GLfloat (*pos)[3], GLenum mode = GL_POINTS, GLenum usage = GL_STATIC_DRAW)
      : GgShape(mode)
    {
      loadPosition(nv, pos, usage);
    }

    //! \brief コピーコンストラクタ.
    GgPoints(const GgPoints &o)
      : GgShape(o), position(o.position) {}

    // 代入
    GgPoints &operator=(const GgPoints &o)
    {
      if (&o != this)
      {
        GgShape::operator=(o);
        position = o.position;
      }
      return *this;
    }

    //! \brief 既存のバッファオブジェクトに頂点の位置データを転送する.
    //!   \param nv 転送する頂点の位置データの数 (0 ならバッファ全体).
    //!   \param pos 転送元の頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint nv, const GLfloat (*pos)[3], GLuint offset = 0)
    {
      position.send(nv, pos, offset);
    }

    //! \brief バッファオブジェクトを確保して頂点の位置データを格納する.
    //!   \param nv 頂点のデータの数 (頂点数).
    //!   \param pos 頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLuint nv, const GLfloat (*pos)[3], GLenum usage = GL_STATIC_DRAW)
    {
      loadPosition(nv, pos, usage);
    }

    //! \brief 頂点の位置データを格納した頂点バッファオブジェクト名を取り出す.
    //!   \return この図形の頂点の位置データを格納した頂点バッファオブジェクト名.
    GLuint pbuf() const
    {
      return position.buf();
    }

    //! \brief データの数を取り出す.
    //!   \return この図形の頂点の位置データの数 (頂点数).
    GLuint pnum() const
    {
      return position.num();
    }

    //! \brief ポイントの描画.
    virtual void draw(GLint first = 0, GLsizei count = 0) const;
  };

  /*!
  ** \brief 三角形で表した形状データ (Arrays 形式).
  */
  class GgTriangles
    : public GgPoints
  {
    // 頂点の法線ベクトル
    GgBuffer<GLfloat[3]> normal;

    // バッファオブジェクトを確保して法線を格納する
    //!   \param nv 頂点数
    //!   \param norm 頂点の法線データ
    //!   \param usage バッファオブジェクトの使い方
    void loadNormal(GLuint nv, const GLfloat (*norm)[3], GLenum usage)
    {
      // 頂点法線
      normal.load(GL_ARRAY_BUFFER, nv, norm, usage);

      // このバッファオブジェクトは index == 1 の in 変数から入力する
      glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
      glEnableVertexAttribArray(1);
    }

  public:

    //! \brief デストラクタ.
    virtual ~GgTriangles() {}

    //! \brief コンストラクタ
    //!   \param mode 描画する基本図形の種類.
    GgTriangles(GLenum mode = GL_TRIANGLES)
      : GgPoints(mode) {}

    //! \brief コンストラクタ.
    //!   \param nv 頂点数.
    //!   \param pos この図形の頂点の位置のデータの配列 (NULL ならデータを転送しない).
    //!   \param norm この図形の頂点の法線のデータの配列 (NULL ならデータを転送しない).
    //!   \param mode 描画する基本図形の種類.
    //!   \param usage バッファオブジェクトの使い方.
    GgTriangles(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3],
      GLenum mode = GL_TRIANGLES, GLenum usage = GL_STATIC_DRAW)
      : GgPoints(nv, pos, mode, usage)
    {
      loadNormal(nv, norm, usage);
    }

    //! \brief コピーコンストラクタ.
    GgTriangles(const GgTriangles &o)
      : GgPoints(o), normal(o.normal) {}

    // 代入
    GgTriangles &operator=(const GgTriangles &o)
    {
      if (&o != this)
      {
        GgPoints::operator=(o);
        normal = o.normal;
      }
      return *this;
    }

    //! \brief 既存のバッファオブジェクトに頂点の位置データと法線データを転送する.
    //!   \param nv 転送する頂点の位置データの数 (0 ならバッファ全体).
    //!   \param pos 転送元の頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param norm 転送元の頂点の法線データが格納されてている領域の先頭のポインタ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3], GLuint offset = 0)
    {
      GgPoints::send(nv, pos, offset);
      normal.send(nv, norm, offset);
    }

    //! \brief バッファオブジェクトを確保して頂点の位置データと法線データを格納する.
    //!   \param nv 頂点のデータの数 (頂点数).
    //!   \param pos 頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param norm 頂点の法線データが格納されてている領域の先頭のポインタ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3], GLenum usage = GL_STATIC_DRAW)
    {
      GgPoints::load(nv, pos, usage);
      loadNormal(nv, norm, usage);
    }

    //! \brief 頂点の位置データを格納した頂点バッファオブジェクト名を取り出す.
    //!   \return この図形の頂点の法線のデータを格納した頂点バッファオブジェクト名.
    GLuint nbuf() const
    {
      return normal.buf();
    }

    //! \brief データの数を取り出す.
    //!   \return この図形の頂点の法線データの数 (頂点数).
    GLuint nnum() const
    {
      return normal.num();
    }
  };

  /*!
  ** \brief 三角形で表した形状データ (Elements 形式).
  */
  class GgElements
    : public GgTriangles
  {
    // インデックスを格納する頂点バッファオブジェクト
    GgBuffer<GLuint[3]> index;

  public:

    //! \brief デストラクタ.
    virtual ~GgElements() {}

    //! \brief コンストラクタ.
    //!   \param mode 描画する基本図形の種類.
    GgElements(GLenum mode = GL_TRIANGLES)
      : GgTriangles(mode) {}

    //! \brief コンストラクタ.
    //!   \param nv 頂点数.
    //!   \param pos この図形の頂点の位置のデータの配列 (NULL ならデータを転送しない).
    //!   \param norm この図形の頂点の法線のデータの配列 (NULL ならデータを転送しない).
    //!   \param nf 三角形数.
    //!   \param face 三角形の頂点インデックス.
    //!   \param mode 描画する基本図形の種類.
    //!   \param usage バッファオブジェクトの使い方.
    GgElements(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3],
      GLuint nf, const GLuint (*face)[3], GLenum mode = GL_TRIANGLES, GLenum usage = GL_STATIC_DRAW)
      : GgTriangles(nv, pos, norm, mode, usage)
    {
      index.load(GL_ELEMENT_ARRAY_BUFFER, nf, face);
    }

    //! \brief コピーコンストラクタ.
    GgElements(const GgElements &o)
      : GgTriangles(o), index(o.index) {}

    // 代入
    GgElements &operator=(const GgElements &o)
    {
      if (&o != this)
      {
        GgTriangles::operator=(o);
        index = o.index;
      }
      return *this;
    }

    //! \brief 既存のバッファオブジェクトに三角形の頂点インデックスデータを転送する.
    //!   \param nf 三角形数.
    //!   \param face 三角形の頂点インデックスデータ.
    //!   \param offset 転送先のバッファオブジェクトの先頭の要素番号.
    void send(GLuint nf, const GLuint (*face)[3], GLuint offset = 0)
    {
      index.send(nf, face, offset);
    }

    //! \brief バッファオブジェクトを確保して頂点の位置データと法線データと三角形の頂点インデックスデータを格納する.
    //!   \param nv 頂点のデータの数 (頂点数).
    //!   \param pos 頂点の位置データが格納されてている領域の先頭のポインタ.
    //!   \param norm 頂点の法線データが格納されてている領域の先頭のポインタ.
    //!   \param nf 三角形数.
    //!   \param face 三角形の頂点インデックスデータ.
    //!   \param usage バッファオブジェクトの使い方.
    void load(GLuint nv, const GLfloat (*pos)[3], const GLfloat (*norm)[3],
      GLuint nf, const GLuint (*face)[3], GLenum usage = GL_STATIC_DRAW)
    {
      GgTriangles::load(nv, pos, norm, usage);
      index.load(GL_ELEMENT_ARRAY_BUFFER, nf, face);
    }

    //! \brief 三角形の頂点インデックスデータを格納した頂点バッファオブジェクト名を取り出す.
    //!   \return この図形の三角形の頂点インデックスデータを格納した頂点バッファオブジェクト名.
    GLuint fbuf() const
    {
      return index.buf();
    }

    //! \brief データの数を取り出す.
    //!   \return この図形の三角形数.
    GLuint fnum() const
    {
      return index.num();
    }

    //! \brief 三角形を描画する手続き.
    virtual void draw(GLint first = 0, GLsizei count = 0) const;
  };

  /*!
  ** \brief 点群を立方体状に生成する.
  **
  **    \param nv 生成する点の数.
  **    \param length 点群を生成する立方体の一辺の長さ.
  **    \param cx 点群の中心の x 座標.
  **    \param cy 点群の中心の y 座標.
  **    \param cz 点群の中心の z 座標.
  */
  extern GgPoints *ggPointsCube(GLuint nv, GLfloat length = 1.0f,
    GLfloat cx = 0.0f, GLfloat cy = 0.0f, GLfloat cz = 0.0f);

  /*!
  ** \brief 点群を球状に生成する.
  **
  **   \param nv 生成する点の数.
  **   \param radius 点群を生成する半径.
  **   \param cx 点群の中心の x 座標.
  **   \param cy 点群の中心の y 座標.
  **   \param cz 点群の中心の z 座標.
  */
  extern GgPoints *ggPointsSphere(GLuint nv, GLfloat radius = 0.5f,
    GLfloat cx = 0.0f, GLfloat cy = 0.0f, GLfloat cz = 0.0f);

  /*!
  ** \brief 矩形状に 2 枚の三角形を生成する.
  **
  **   \param width 矩形の幅.
  **   \param height 矩形の高さ.
  */
  extern GgTriangles *ggRectangle(GLfloat width = 1.0f, GLfloat height = 1.0f);

  /*!
  ** \brief 楕円状に三角形を生成する.
  **
  **   \param width 楕円の幅.
  **   \param height 楕円の高さ.
  **   \param slices 楕円の分割数.
  */
  extern GgTriangles *ggEllipse(GLfloat width = 1.0f, GLfloat height = 1.0f,
    GLuint slices = 16);

  /*!
  ** \brief Wavefront OBJ ファイルを読み込む (Arrays 形式)
  **
  **   三角形分割された Wavefront OBJ ファイルを読み込んで
  **   GgArrays 形式の三角形データを生成する.
  **
  **   \param name ファイル名.
  **   \param normalize true なら大きさを正規化.
  */
  extern GgTriangles *ggArraysObj(const char *name, bool normalize = false);

  /*!
  ** \brief Wavefront OBJ ファイル を読み込む (Elements 形式).
  **
  **   三角形分割された Wavefront OBJ ファイル を読み込んで
  **   GgElements 形式の三角形データを生成する.
  **
  **   \param name ファイル名.
  **   \param normalize true なら大きさを正規化.
  */
  extern GgElements *ggElementsObj(const char *name, bool normalize = false);

  /*!
  ** \brief メッシュ形状を作成する (Elements 形式).
  **
  **   メッシュ状に GgElements 形式の三角形データを生成する.
  **
  **   \param slices メッシュの横方向の分割数.
  **   \param stacks メッシュの縦方向の分割数.
  **   \param pos メッシュの頂点の位置.
  **   \param norm メッシュの頂点の法線ベクトル.
  */
  extern GgElements *ggElementsMesh(int slices, int stacks,
    const GLfloat (*pos)[3], const GLfloat (*norm)[3] = nullptr);

  /*!
  ** 球状に三角形データを生成する (Elements 形式).
  **
  **   球状に GgElements 形式の三角形データを生成する.
  **
  **   \param radius 球の半径.
  **   \param slices 球の経度方向の分割数.
  **   \param stacks 球の緯度方向の分割数.
  */
  extern GgElements *ggElementsSphere(GLfloat radius = 1.0f, int slices = 16, int stacks = 8);

  /*!
  ** \brief シェーダの基底クラス.
  **
  **   シェーダのクラスはこのクラスを派生して作る.
  */
  class GgShader
    : public GgAttribute
  {
    // プログラム名
    GLuint program;

  public:

    //! \brief デストラクタ.
    virtual ~GgShader()
    {
      // 参照しているオブジェクトが一つだけならシェーダを削除する
      if (program != 0 && last())
      {
        glUseProgram(0);
        glDeleteProgram(program);
      }
    }

    //! \brief コンストラクタ.
    GgShader()
      : program(0) {}

    //! \brief コンストラクタ.
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    GgShader(const char *vert, const char *frag = 0, const char *geom = 0,
      int nvarying = 0, const char **varyings = 0)
      : program(ggLoadShader(vert, frag, geom, nvarying, varyings)) {}

    //! \brief コピーコンストラクタ.
    GgShader(const GgShader &o)
      : GgAttribute(o), program(o.program) {}

    // 代入
    GgShader &operator=(const GgShader &o)
    {
      if (&o != this)
      {
        GgAttribute::operator=(o);
        program = o.program;
      }
      return *this;
    }

    //! \brief 別のシェーダのプログラムオブジェクトを登録する.
    //!   \param newProgram 別に作成したシェーダのプログラム名.
    void setProgram(GLuint newProgram)
    {
      if (program != 0 && newCounter())
      {
        glUseProgram(0);
        glDeleteProgram(program);
      }
      program = newProgram;
    }

    //! \brief シェーダのソースプログラムを読み込んでプログラムオブジェクトをする.
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    void load(const char *vert, const char *frag = 0, const char *geom = 0,
      GLint nvarying = 0, const char **varyings = 0)
    {
      setProgram(ggLoadShader(vert, frag, geom, nvarying, varyings));
    }

    //! \brief シェーダプログラムの使用を開始する.
    void use() const
    {
      glUseProgram(program);
    }

    //! \brief シェーダプログラムの使用を終了する.
    void unuse() const
    {
      glUseProgram(0);
    }

    //! \brief シェーダのプログラム名を得る.
    //!   \return シェーダのプログラム名.
    GLuint get() const
    {
      return program;
    }
  };

  /*!
  ** \brief ポイントのシェーダ.
  */
  class GgPointShader
    : public GgShader
  {
    // 場所
    struct GgPointShaderLocations
    {
      GLint mc;         // モデルビュー・投影変換行列の uniform 変数の場所
      GLint mw;         // モデルビュー変換行列の uniform 変数の場所
    } loc;

  public:

    //! \brief デストラクタ.
    virtual ~GgPointShader() {}

    //! \brief コンストラクタ.
    GgPointShader() {}

    //! \brief コンストラクタ
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    GgPointShader(const char *vert, const char *frag = 0,
      const char *geom = 0, GLint nvarying = 0, const char **varyings = 0)
      : GgShader(vert, frag, geom, nvarying, varyings)
    {
      // プログラム名
      GLuint program = get();

      // 変換行列の uniform 変数の場所
      loc.mc = glGetUniformLocation(program, "mc");
      loc.mw = glGetUniformLocation(program, "mw");
    }

    //! \brief コピーコンストラクタ.
    GgPointShader(const GgPointShader &o)
      : GgShader(o), loc(o.loc) {}

    // 代入
    GgPointShader &operator=(const GgPointShader &o)
    {
      if (&o != this)
      {
        GgShader::operator=(o);
        loc = o.loc;
      }
      return *this;
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GgMatrix 型の投影変換行列.
    //!   \param mw GgMatrix 型のモデルビュー変換行列.
    virtual void loadMatrix(const GgMatrix &mp, const GgMatrix &mw)
    {
      // 変換
      glUniformMatrix4fv(loc.mc, 1, GL_FALSE, (mp * mw).get());
      glUniformMatrix4fv(loc.mw, 1, GL_FALSE, mw.get());
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GLfloat[16] 型の配列に格納された投影変換行列.
    //!   \param mw GLfloat[16] 型の配列に格納されたモデルビュー変換行列.
    virtual void loadMatrix(const GLfloat *mp, const GLfloat *mw)
    {
      GgMatrix tmp(mp), tmw(mw);
      loadMatrix(tmp, tmw);
    }
  };

  /*!
  ** \brief 三角形に単純な陰影付けを行うシェーダ.
  */
  class GgSimpleShader
    : public GgPointShader
  {
    // 場所
    struct GgSimpleShaderLocations
    {
      GLint pl;         // 光源位置の uniform 変数の場所
      GLint lamb;       // 光源強度の環境光成分の uniform 変数の場所
      GLint ldiff;      // 光源強度の拡散反射光成分の uniform 変数の場所
      GLint lspec;      // 光源強度の鏡面反射光成分の uniform 変数の場所
      GLint kamb;       // 環境光の反射係数の uniform 変数の場所
      GLint kdiff;      // 拡散反射係数の uniform 変数の場所
      GLint kspec;      // 鏡面反射係数の uniform 変数の場所
      GLint kshi;       // 輝き係数の uniform 変数の場所
      GLint mg;         // モデルビュー変換の法線変換行列の uniform 変数の場所
    } loc;

  public:

    //! \brief デストラクタ.
    virtual ~GgSimpleShader() {}

    //! \brief コンストラクタ.
    GgSimpleShader() {}

    //! \brief コンストラクタ
    //!   \param vert バーテックスシェーダのソースファイル名.
    //!   \param frag フラグメントシェーダのソースファイル名 (0 なら不使用).
    //!   \param geom ジオメトリシェーダのソースファイル名 (0 なら不使用).
    //!   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
    //!   \param varyings フィードバックする varying 変数のリスト.
    GgSimpleShader(const char *vert, const char *frag = 0,
      const char *geom = 0, GLint nvarying = 0, const char **varyings = 0);

    //! \brief コピーコンストラクタ.
    GgSimpleShader(const GgSimpleShader &o)
      : GgPointShader(o), loc(o.loc) {}

    // 代入
    GgSimpleShader &operator=(const GgSimpleShader &o)
    {
      if (&o != this)
      {
        GgPointShader::operator=(o);
        loc = o.loc;
      }
      return *this;
    }

    //! \brief 光源の特性
    struct Light
    {
      GLfloat ambient[4];
      GLfloat diffuse[4];
      GLfloat specular[4];
      GLfloat position[4];
    };

    //! \brief 光源の位置と特性を設定する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    void setLight(const Light &light)
    {
      glUniform4fv(loc.lamb, 1, light.ambient);
      glUniform4fv(loc.ldiff, 1, light.diffuse);
      glUniform4fv(loc.lspec, 1, light.specular);
      glUniform4fv(loc.pl, 1, light.position);
    }

    //! \brief 光源の特性を設定する.
    //!   \param light 光源の特性の gg::GgSimpleShader::Light 構造体
    void setLightMaterial(const Light &light)
    {
      glUniform4fv(loc.lamb, 1, light.ambient);
      glUniform4fv(loc.ldiff, 1, light.diffuse);
      glUniform4fv(loc.lspec, 1, light.specular);
    }

    //! \brief 光源の位置を設定する.
    //!   \param x 光源の位置の x 座標.
    //!   \param y 光源の位置の y 座標.
    //!   \param z 光源の位置の z 座標.
    //!   \param w 光源の位置の w 座標. デフォルトは 1.
    void setLightPosition(GLfloat x, GLfloat y, GLfloat z, GLfloat w = 1.0f)
    {
      glUniform4f(loc.pl, x, y, z, w);
    }

    //! \brief 光源の位置を設定する.
    //!   \param pos 光源の位置の同次座標を格納した GLfloat[4] 型の配列.
    void setLightPosition(const GLfloat *pos)
    {
      glUniform4fv(loc.pl, 1, pos);
    }

    //! \brief 光源の強度の環境光成分を設定する.
    //!   \param r 光源の強度の環境光成分の赤成分.
    //!   \param g 光源の強度の環境光成分の緑成分.
    //!   \param b 光源の強度の環境光成分の青成分.
    //!   \param a 光源の強度の環境光成分の不透明度. デフォルトは 1.
    void setLightAmbient(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f)
    {
      glUniform4f(loc.lamb, r, g, b, a);
    }

    //! \brief 光源の強度の環境光成分を設定する.
    //!   \param amb 光源の強度の環境光成分を格納した GLfloat[4] 型の配列.
    void setLightAmbient(const GLfloat *amb)
    {
      glUniform4fv(loc.lamb, 1, amb);
    }

    //! \brief 光源の強度の拡散反射光成分を設定する.
    //!   \param r 光源の強度の拡散反射光成分の赤成分.
    //!   \param g 光源の強度の拡散反射光成分の緑成分.
    //!   \param b 光源の強度の拡散反射光成分の青成分.
    //!   \param a 光源の強度の拡散反射光成分の不透明度. デフォルトは 1.
    void setLightDiffuse(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f)
    {
      glUniform4f(loc.ldiff, r, g, b, a);
    }

    //! \brief 光源の強度の拡散反射光成分を設定する.
    //!   \param diff 光源の強度の拡散反射光成分を格納した GLfloat[4] 型の配列.
    void setLightDiffuse(const GLfloat *diff)
    {
      glUniform4fv(loc.ldiff, 1, diff);
    }

    //! \brief 光源の強度の鏡面反射光成分を設定する.
    //!   \param r 光源の強度の鏡面反射光成分の赤成分.
    //!   \param g 光源の強度の鏡面反射光成分の緑成分.
    //!   \param b 光源の強度の鏡面反射光成分の青成分.
    //!   \param a 光源の強度の鏡面反射光成分の不透明度. デフォルトは 1.
    void setLightSpecular(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f)
    {
      glUniform4f(loc.lspec, r, g, b, a);
    }

    //! \brief 光源の強度の鏡面反射光成分を設定する.
    //!   \param spec 光源の強度の鏡面反射光成分を格納した GLfloat[4] 型の配列.
    void setLightSpecular(const GLfloat *spec)
    {
      glUniform4fv(loc.lspec, 1, spec);
    }

    //! \brief 材質の特性
    struct Material
    {
      GLfloat ambient[4];
      GLfloat diffuse[4];
      GLfloat specular[4];
      GLfloat shininess;
    };

    //! \brief 材質の特性を設定する.
    //!   \param material 光源の特性の gg::GgSimpleShader::Material 構造体
    void setMaterial(const Material &material)
    {
      glUniform4fv(loc.kamb, 1, material.ambient);
      glUniform4fv(loc.kdiff, 1, material.diffuse);
      glUniform4fv(loc.kspec, 1, material.specular);
      glUniform1f(loc.kshi, material.shininess);
    }

    //! \brief 環境光に対する反射係数を設定する.
    //!   \param r 環境光に対する反射係数の赤成分.
    //!   \param g 環境光に対する反射係数の緑成分.
    //!   \param b 環境光に対する反射係数の青成分.
    //!   \param a 環境光に対する反射係数の不透明度. デフォルトは 1.
    void setMaterialAmbient(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f)
    {
      glUniform4f(loc.kamb, r, g, b, a);
    }

    //! \brief 環境光に対する反射係数を設定する.
    //!   \param amb 環境光に対する反射係数を格納した GLfloat[4] 型の配列.
    void setMaterialAmbient(const GLfloat *amb)
    {
      glUniform4fv(loc.kamb, 1, amb);
    }

    //! \brief 拡散反射係数を設定する.
    //!   \param r 拡散反射係数の赤成分.
    //!   \param g 拡散反射係数の緑成分.
    //!   \param b 拡散反射係数の青成分.
    //!   \param a 拡散反射係数の不透明度. デフォルトは 1.
    void setMaterialDiffuse(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f)
    {
      glUniform4f(loc.kdiff, r, g, b, a);
    }

    //! \brief 拡散反射係数を設定する.
    //!   \param diff 拡散反射係数を格納した GLfloat[4] 型の配列.
    void setMaterialDiffuse(const GLfloat *diff)
    {
      glUniform4fv(loc.kdiff, 1, diff);
    }

    //! \brief 鏡面反射係数を設定する.
    //!   \param r 鏡面反射係数の赤成分.
    //!   \param g 鏡面反射係数の緑成分.
    //!   \param b 鏡面反射係数の青成分.
    //!   \param a 鏡面反射係数の不透明度. デフォルトは 1.
    void setMaterialSpecular(GLfloat r, GLfloat g, GLfloat b, GLfloat a = 1.0f)
    {
      glUniform4f(loc.kspec, r, g, b, a);
    }

    //! \brief 鏡面反射係数を設定する.
    //!   \param spec 鏡面反射係数を格納した GLfloat[4] 型の配列.
    void setMaterialSpecular(const GLfloat *spec)
    {
      glUniform4fv(loc.kspec, 1, spec);
    }

    //! \brief 輝き係数を設定する.
    //!   \param shi 輝き係数.
    void setMaterialShininess(GLfloat shi)
    {
      glUniform1f(loc.kshi, shi);
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GgMatrix 型の投影変換行列.
    //!   \param mw GgMatrix 型のモデルビュー変換行列.
    virtual void loadMatrix(const GgMatrix &mp, const GgMatrix &mw)
    {
      GgPointShader::loadMatrix(mp, mw);
      glUniformMatrix4fv(loc.mg, 1, GL_FALSE, ggNormal(mw).get());
    }

    //! \brief 変換行列を設定する.
    //!   \param mp GLfloat[16] 型の配列に格納された投影変換行列.
    //!   \param mw GLfloat[16] 型の配列に格納されたモデルビュー変換行列.
    virtual void loadMatrix(const GLfloat *mp, const GLfloat *mw)
    {
      GgMatrix tmp(mp), tmw(mw);
      loadMatrix(tmp, tmw);
    }
  };

  /*!
  ** \brief Wavefront OBJ 形式のファイル.
  */
  class GgObj
    : public Gg
  {
    GLuint ng;                              // 同じ材質を割り当てるポリゴングループ数
    GLuint (*group)[2];                     // 同じ材質を割り当てるポリゴングループの最初のポリゴンと数
    GLfloat (*amb)[4];                      // ポリゴングループごとの環境光に対する反射係数
    GLfloat (*diff)[4];                     // ポリゴングループごとの拡散反射係数
    GLfloat (*spec)[4];                     // ポリゴングループごとの鏡面反射係数
    GLfloat *shi;                           // ポリゴングループごとの輝き係数
    GgTriangles *data;                      // この図形の形状データ
    GgSimpleShader *shader;                 // シェーダ

  public:

    //! \brief デストラクタ.
    virtual ~GgObj();

    //! \brief コンストラクタ.
    GgObj(const char *name, bool normalize = false);

    //! \brief シェーダの割り当て.
    //!   \param shader GgSimpleShader 型のシェーダ.
    void attachShader(GgSimpleShader &shader)
    {
      this->shader = &shader;
    }

    //! \brief シェーダの割り当て.
    //!   \param shader GgSimpleShader 型のシェーダのポインタ.
    void attachShader(GgSimpleShader *shader)
    {
      this->shader = shader;
    }

    //! \brief Wavefront OBJ 形式のデータを描画する手続き.
    virtual void draw(GLint first = 0, GLsizei count = 0) const;
  };
}
