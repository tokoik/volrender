/*
** ゲームグラフィックス特論用補助プログラム GLFW3 版
**

Copyright (c) 2011, 2012, 2013, 2014 Kohe Tokoi. All Rights Reserved.

Permission is hereby granted, free of charge,  to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction,  including without limitation the rights
to use, copy,  modify, merge,  publish, distribute,  sublicense,  and/or sell
copies or substantial portions of the Software.

The above  copyright notice  and this permission notice  shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE  IS PROVIDED "AS IS",  WITHOUT WARRANTY OF ANY KIND,  EXPRESS OR
IMPLIED,  INCLUDING  BUT  NOT LIMITED  TO THE WARRANTIES  OF MERCHANTABILITY,
FITNESS  FOR  A PARTICULAR PURPOSE  AND NONINFRINGEMENT.  IN  NO EVENT  SHALL
KOHE TOKOI  BE LIABLE FOR ANY CLAIM,  DAMAGES OR OTHER LIABILITY,  WHETHER IN
AN ACTION  OF CONTRACT,  TORT  OR  OTHERWISE,  ARISING  FROM,  OUT OF  OR  IN
CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

**
*/

#include <cmath>
#include <cfloat>
#include <cstdlib>
#include <iostream>
#include <fstream>
#include <sstream>
#include <string>
#include <vector>
#include <map>
#include <algorithm>

#include "gg.h"

#if defined(_WIN32)
PFNGLBLENDCOLORPROC glBlendColor;
PFNGLBLENDEQUATIONPROC glBlendEquation;
PFNGLDRAWRANGEELEMENTSPROC glDrawRangeElements;
PFNGLTEXIMAGE3DPROC glTexImage3D;
PFNGLTEXSUBIMAGE3DPROC glTexSubImage3D;
PFNGLCOPYTEXSUBIMAGE3DPROC glCopyTexSubImage3D;
PFNGLCOLORTABLEPROC glColorTable;
PFNGLCOLORTABLEPARAMETERFVPROC glColorTableParameterfv;
PFNGLCOLORTABLEPARAMETERIVPROC glColorTableParameteriv;
PFNGLCOPYCOLORTABLEPROC glCopyColorTable;
PFNGLGETCOLORTABLEPROC glGetColorTable;
PFNGLGETCOLORTABLEPARAMETERFVPROC glGetColorTableParameterfv;
PFNGLGETCOLORTABLEPARAMETERIVPROC glGetColorTableParameteriv;
PFNGLCOLORSUBTABLEPROC glColorSubTable;
PFNGLCOPYCOLORSUBTABLEPROC glCopyColorSubTable;
PFNGLCONVOLUTIONFILTER1DPROC glConvolutionFilter1D;
PFNGLCONVOLUTIONFILTER2DPROC glConvolutionFilter2D;
PFNGLCONVOLUTIONPARAMETERFPROC glConvolutionParameterf;
PFNGLCONVOLUTIONPARAMETERFVPROC glConvolutionParameterfv;
PFNGLCONVOLUTIONPARAMETERIPROC glConvolutionParameteri;
PFNGLCONVOLUTIONPARAMETERIVPROC glConvolutionParameteriv;
PFNGLCOPYCONVOLUTIONFILTER1DPROC glCopyConvolutionFilter1D;
PFNGLCOPYCONVOLUTIONFILTER2DPROC glCopyConvolutionFilter2D;
PFNGLGETCONVOLUTIONFILTERPROC glGetConvolutionFilter;
PFNGLGETCONVOLUTIONPARAMETERFVPROC glGetConvolutionParameterfv;
PFNGLGETCONVOLUTIONPARAMETERIVPROC glGetConvolutionParameteriv;
PFNGLGETSEPARABLEFILTERPROC glGetSeparableFilter;
PFNGLSEPARABLEFILTER2DPROC glSeparableFilter2D;
PFNGLGETHISTOGRAMPROC glGetHistogram;
PFNGLGETHISTOGRAMPARAMETERFVPROC glGetHistogramParameterfv;
PFNGLGETHISTOGRAMPARAMETERIVPROC glGetHistogramParameteriv;
PFNGLGETMINMAXPROC glGetMinmax;
PFNGLGETMINMAXPARAMETERFVPROC glGetMinmaxParameterfv;
PFNGLGETMINMAXPARAMETERIVPROC glGetMinmaxParameteriv;
PFNGLHISTOGRAMPROC glHistogram;
PFNGLMINMAXPROC glMinmax;
PFNGLRESETHISTOGRAMPROC glResetHistogram;
PFNGLRESETMINMAXPROC glResetMinmax;
PFNGLACTIVETEXTUREPROC glActiveTexture;
PFNGLSAMPLECOVERAGEPROC glSampleCoverage;
PFNGLCOMPRESSEDTEXIMAGE3DPROC glCompressedTexImage3D;
PFNGLCOMPRESSEDTEXIMAGE2DPROC glCompressedTexImage2D;
PFNGLCOMPRESSEDTEXIMAGE1DPROC glCompressedTexImage1D;
PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC glCompressedTexSubImage3D;
PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC glCompressedTexSubImage2D;
PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC glCompressedTexSubImage1D;
PFNGLGETCOMPRESSEDTEXIMAGEPROC glGetCompressedTexImage;
PFNGLCLIENTACTIVETEXTUREPROC glClientActiveTexture;
PFNGLMULTITEXCOORD1DPROC glMultiTexCoord1d;
PFNGLMULTITEXCOORD1DVPROC glMultiTexCoord1dv;
PFNGLMULTITEXCOORD1FPROC glMultiTexCoord1f;
PFNGLMULTITEXCOORD1FVPROC glMultiTexCoord1fv;
PFNGLMULTITEXCOORD1IPROC glMultiTexCoord1i;
PFNGLMULTITEXCOORD1IVPROC glMultiTexCoord1iv;
PFNGLMULTITEXCOORD1SPROC glMultiTexCoord1s;
PFNGLMULTITEXCOORD1SVPROC glMultiTexCoord1sv;
PFNGLMULTITEXCOORD2DPROC glMultiTexCoord2d;
PFNGLMULTITEXCOORD2DVPROC glMultiTexCoord2dv;
PFNGLMULTITEXCOORD2FPROC glMultiTexCoord2f;
PFNGLMULTITEXCOORD2FVPROC glMultiTexCoord2fv;
PFNGLMULTITEXCOORD2IPROC glMultiTexCoord2i;
PFNGLMULTITEXCOORD2IVPROC glMultiTexCoord2iv;
PFNGLMULTITEXCOORD2SPROC glMultiTexCoord2s;
PFNGLMULTITEXCOORD2SVPROC glMultiTexCoord2sv;
PFNGLMULTITEXCOORD3DPROC glMultiTexCoord3d;
PFNGLMULTITEXCOORD3DVPROC glMultiTexCoord3dv;
PFNGLMULTITEXCOORD3FPROC glMultiTexCoord3f;
PFNGLMULTITEXCOORD3FVPROC glMultiTexCoord3fv;
PFNGLMULTITEXCOORD3IPROC glMultiTexCoord3i;
PFNGLMULTITEXCOORD3IVPROC glMultiTexCoord3iv;
PFNGLMULTITEXCOORD3SPROC glMultiTexCoord3s;
PFNGLMULTITEXCOORD3SVPROC glMultiTexCoord3sv;
PFNGLMULTITEXCOORD4DPROC glMultiTexCoord4d;
PFNGLMULTITEXCOORD4DVPROC glMultiTexCoord4dv;
PFNGLMULTITEXCOORD4FPROC glMultiTexCoord4f;
PFNGLMULTITEXCOORD4FVPROC glMultiTexCoord4fv;
PFNGLMULTITEXCOORD4IPROC glMultiTexCoord4i;
PFNGLMULTITEXCOORD4IVPROC glMultiTexCoord4iv;
PFNGLMULTITEXCOORD4SPROC glMultiTexCoord4s;
PFNGLMULTITEXCOORD4SVPROC glMultiTexCoord4sv;
PFNGLLOADTRANSPOSEMATRIXFPROC glLoadTransposeMatrixf;
PFNGLLOADTRANSPOSEMATRIXDPROC glLoadTransposeMatrixd;
PFNGLMULTTRANSPOSEMATRIXFPROC glMultTransposeMatrixf;
PFNGLMULTTRANSPOSEMATRIXDPROC glMultTransposeMatrixd;
PFNGLBLENDFUNCSEPARATEPROC glBlendFuncSeparate;
PFNGLMULTIDRAWARRAYSPROC glMultiDrawArrays;
PFNGLMULTIDRAWELEMENTSPROC glMultiDrawElements;
PFNGLPOINTPARAMETERFPROC glPointParameterf;
PFNGLPOINTPARAMETERFVPROC glPointParameterfv;
PFNGLPOINTPARAMETERIPROC glPointParameteri;
PFNGLPOINTPARAMETERIVPROC glPointParameteriv;
PFNGLFOGCOORDFPROC glFogCoordf;
PFNGLFOGCOORDFVPROC glFogCoordfv;
PFNGLFOGCOORDDPROC glFogCoordd;
PFNGLFOGCOORDDVPROC glFogCoorddv;
PFNGLFOGCOORDPOINTERPROC glFogCoordPointer;
PFNGLSECONDARYCOLOR3BPROC glSecondaryColor3b;
PFNGLSECONDARYCOLOR3BVPROC glSecondaryColor3bv;
PFNGLSECONDARYCOLOR3DPROC glSecondaryColor3d;
PFNGLSECONDARYCOLOR3DVPROC glSecondaryColor3dv;
PFNGLSECONDARYCOLOR3FPROC glSecondaryColor3f;
PFNGLSECONDARYCOLOR3FVPROC glSecondaryColor3fv;
PFNGLSECONDARYCOLOR3IPROC glSecondaryColor3i;
PFNGLSECONDARYCOLOR3IVPROC glSecondaryColor3iv;
PFNGLSECONDARYCOLOR3SPROC glSecondaryColor3s;
PFNGLSECONDARYCOLOR3SVPROC glSecondaryColor3sv;
PFNGLSECONDARYCOLOR3UBPROC glSecondaryColor3ub;
PFNGLSECONDARYCOLOR3UBVPROC glSecondaryColor3ubv;
PFNGLSECONDARYCOLOR3UIPROC glSecondaryColor3ui;
PFNGLSECONDARYCOLOR3UIVPROC glSecondaryColor3uiv;
PFNGLSECONDARYCOLOR3USPROC glSecondaryColor3us;
PFNGLSECONDARYCOLOR3USVPROC glSecondaryColor3usv;
PFNGLSECONDARYCOLORPOINTERPROC glSecondaryColorPointer;
PFNGLWINDOWPOS2DPROC glWindowPos2d;
PFNGLWINDOWPOS2DVPROC glWindowPos2dv;
PFNGLWINDOWPOS2FPROC glWindowPos2f;
PFNGLWINDOWPOS2FVPROC glWindowPos2fv;
PFNGLWINDOWPOS2IPROC glWindowPos2i;
PFNGLWINDOWPOS2IVPROC glWindowPos2iv;
PFNGLWINDOWPOS2SPROC glWindowPos2s;
PFNGLWINDOWPOS2SVPROC glWindowPos2sv;
PFNGLWINDOWPOS3DPROC glWindowPos3d;
PFNGLWINDOWPOS3DVPROC glWindowPos3dv;
PFNGLWINDOWPOS3FPROC glWindowPos3f;
PFNGLWINDOWPOS3FVPROC glWindowPos3fv;
PFNGLWINDOWPOS3IPROC glWindowPos3i;
PFNGLWINDOWPOS3IVPROC glWindowPos3iv;
PFNGLWINDOWPOS3SPROC glWindowPos3s;
PFNGLWINDOWPOS3SVPROC glWindowPos3sv;
PFNGLGENQUERIESPROC glGenQueries;
PFNGLDELETEQUERIESPROC glDeleteQueries;
PFNGLISQUERYPROC glIsQuery;
PFNGLBEGINQUERYPROC glBeginQuery;
PFNGLENDQUERYPROC glEndQuery;
PFNGLGETQUERYIVPROC glGetQueryiv;
PFNGLGETQUERYOBJECTIVPROC glGetQueryObjectiv;
PFNGLGETQUERYOBJECTUIVPROC glGetQueryObjectuiv;
PFNGLBINDBUFFERPROC glBindBuffer;
PFNGLDELETEBUFFERSPROC glDeleteBuffers;
PFNGLGENBUFFERSPROC glGenBuffers;
PFNGLISBUFFERPROC glIsBuffer;
PFNGLBUFFERDATAPROC glBufferData;
PFNGLBUFFERSUBDATAPROC glBufferSubData;
PFNGLGETBUFFERSUBDATAPROC glGetBufferSubData;
PFNGLMAPBUFFERPROC glMapBuffer;
PFNGLUNMAPBUFFERPROC glUnmapBuffer;
PFNGLGETBUFFERPARAMETERIVPROC glGetBufferParameteriv;
PFNGLGETBUFFERPOINTERVPROC glGetBufferPointerv;
PFNGLBLENDEQUATIONSEPARATEPROC glBlendEquationSeparate;
PFNGLDRAWBUFFERSPROC glDrawBuffers;
PFNGLSTENCILOPSEPARATEPROC glStencilOpSeparate;
PFNGLSTENCILFUNCSEPARATEPROC glStencilFuncSeparate;
PFNGLSTENCILMASKSEPARATEPROC glStencilMaskSeparate;
PFNGLATTACHSHADERPROC glAttachShader;
PFNGLBINDATTRIBLOCATIONPROC glBindAttribLocation;
PFNGLCOMPILESHADERPROC glCompileShader;
PFNGLCREATEPROGRAMPROC glCreateProgram;
PFNGLCREATESHADERPROC glCreateShader;
PFNGLDELETEPROGRAMPROC glDeleteProgram;
PFNGLDELETESHADERPROC glDeleteShader;
PFNGLDETACHSHADERPROC glDetachShader;
PFNGLDISABLEVERTEXATTRIBARRAYPROC glDisableVertexAttribArray;
PFNGLENABLEVERTEXATTRIBARRAYPROC glEnableVertexAttribArray;
PFNGLGETACTIVEATTRIBPROC glGetActiveAttrib;
PFNGLGETACTIVEUNIFORMPROC glGetActiveUniform;
PFNGLGETATTACHEDSHADERSPROC glGetAttachedShaders;
PFNGLGETATTRIBLOCATIONPROC glGetAttribLocation;
PFNGLGETPROGRAMIVPROC glGetProgramiv;
PFNGLGETPROGRAMINFOLOGPROC glGetProgramInfoLog;
PFNGLGETSHADERIVPROC glGetShaderiv;
PFNGLGETSHADERINFOLOGPROC glGetShaderInfoLog;
PFNGLGETSHADERSOURCEPROC glGetShaderSource;
PFNGLGETUNIFORMLOCATIONPROC glGetUniformLocation;
PFNGLGETUNIFORMFVPROC glGetUniformfv;
PFNGLGETUNIFORMIVPROC glGetUniformiv;
PFNGLGETVERTEXATTRIBDVPROC glGetVertexAttribdv;
PFNGLGETVERTEXATTRIBFVPROC glGetVertexAttribfv;
PFNGLGETVERTEXATTRIBIVPROC glGetVertexAttribiv;
PFNGLGETVERTEXATTRIBPOINTERVPROC glGetVertexAttribPointerv;
PFNGLISPROGRAMPROC glIsProgram;
PFNGLISSHADERPROC glIsShader;
PFNGLLINKPROGRAMPROC glLinkProgram;
PFNGLSHADERSOURCEPROC glShaderSource;
PFNGLUSEPROGRAMPROC glUseProgram;
PFNGLUNIFORM1FPROC glUniform1f;
PFNGLUNIFORM2FPROC glUniform2f;
PFNGLUNIFORM3FPROC glUniform3f;
PFNGLUNIFORM4FPROC glUniform4f;
PFNGLUNIFORM1IPROC glUniform1i;
PFNGLUNIFORM2IPROC glUniform2i;
PFNGLUNIFORM3IPROC glUniform3i;
PFNGLUNIFORM4IPROC glUniform4i;
PFNGLUNIFORM1FVPROC glUniform1fv;
PFNGLUNIFORM2FVPROC glUniform2fv;
PFNGLUNIFORM3FVPROC glUniform3fv;
PFNGLUNIFORM4FVPROC glUniform4fv;
PFNGLUNIFORM1IVPROC glUniform1iv;
PFNGLUNIFORM2IVPROC glUniform2iv;
PFNGLUNIFORM3IVPROC glUniform3iv;
PFNGLUNIFORM4IVPROC glUniform4iv;
PFNGLUNIFORMMATRIX2FVPROC glUniformMatrix2fv;
PFNGLUNIFORMMATRIX3FVPROC glUniformMatrix3fv;
PFNGLUNIFORMMATRIX4FVPROC glUniformMatrix4fv;
PFNGLVALIDATEPROGRAMPROC glValidateProgram;
PFNGLVERTEXATTRIB1DPROC glVertexAttrib1d;
PFNGLVERTEXATTRIB1DVPROC glVertexAttrib1dv;
PFNGLVERTEXATTRIB1FPROC glVertexAttrib1f;
PFNGLVERTEXATTRIB1FVPROC glVertexAttrib1fv;
PFNGLVERTEXATTRIB1SPROC glVertexAttrib1s;
PFNGLVERTEXATTRIB1SVPROC glVertexAttrib1sv;
PFNGLVERTEXATTRIB2DPROC glVertexAttrib2d;
PFNGLVERTEXATTRIB2DVPROC glVertexAttrib2dv;
PFNGLVERTEXATTRIB2FPROC glVertexAttrib2f;
PFNGLVERTEXATTRIB2FVPROC glVertexAttrib2fv;
PFNGLVERTEXATTRIB2SPROC glVertexAttrib2s;
PFNGLVERTEXATTRIB2SVPROC glVertexAttrib2sv;
PFNGLVERTEXATTRIB3DPROC glVertexAttrib3d;
PFNGLVERTEXATTRIB3DVPROC glVertexAttrib3dv;
PFNGLVERTEXATTRIB3FPROC glVertexAttrib3f;
PFNGLVERTEXATTRIB3FVPROC glVertexAttrib3fv;
PFNGLVERTEXATTRIB3SPROC glVertexAttrib3s;
PFNGLVERTEXATTRIB3SVPROC glVertexAttrib3sv;
PFNGLVERTEXATTRIB4NBVPROC glVertexAttrib4Nbv;
PFNGLVERTEXATTRIB4NIVPROC glVertexAttrib4Niv;
PFNGLVERTEXATTRIB4NSVPROC glVertexAttrib4Nsv;
PFNGLVERTEXATTRIB4NUBPROC glVertexAttrib4Nub;
PFNGLVERTEXATTRIB4NUBVPROC glVertexAttrib4Nubv;
PFNGLVERTEXATTRIB4NUIVPROC glVertexAttrib4Nuiv;
PFNGLVERTEXATTRIB4NUSVPROC glVertexAttrib4Nusv;
PFNGLVERTEXATTRIB4BVPROC glVertexAttrib4bv;
PFNGLVERTEXATTRIB4DPROC glVertexAttrib4d;
PFNGLVERTEXATTRIB4DVPROC glVertexAttrib4dv;
PFNGLVERTEXATTRIB4FPROC glVertexAttrib4f;
PFNGLVERTEXATTRIB4FVPROC glVertexAttrib4fv;
PFNGLVERTEXATTRIB4IVPROC glVertexAttrib4iv;
PFNGLVERTEXATTRIB4SPROC glVertexAttrib4s;
PFNGLVERTEXATTRIB4SVPROC glVertexAttrib4sv;
PFNGLVERTEXATTRIB4UBVPROC glVertexAttrib4ubv;
PFNGLVERTEXATTRIB4UIVPROC glVertexAttrib4uiv;
PFNGLVERTEXATTRIB4USVPROC glVertexAttrib4usv;
PFNGLVERTEXATTRIBPOINTERPROC glVertexAttribPointer;
PFNGLUNIFORMMATRIX2X3FVPROC glUniformMatrix2x3fv;
PFNGLUNIFORMMATRIX3X2FVPROC glUniformMatrix3x2fv;
PFNGLUNIFORMMATRIX2X4FVPROC glUniformMatrix2x4fv;
PFNGLUNIFORMMATRIX4X2FVPROC glUniformMatrix4x2fv;
PFNGLUNIFORMMATRIX3X4FVPROC glUniformMatrix3x4fv;
PFNGLUNIFORMMATRIX4X3FVPROC glUniformMatrix4x3fv;
PFNGLCOLORMASKIPROC glColorMaski;
PFNGLGETBOOLEANI_VPROC glGetBooleani_v;
PFNGLGETINTEGERI_VPROC glGetIntegeri_v;
PFNGLENABLEIPROC glEnablei;
PFNGLDISABLEIPROC glDisablei;
PFNGLISENABLEDIPROC glIsEnabledi;
PFNGLBEGINTRANSFORMFEEDBACKPROC glBeginTransformFeedback;
PFNGLENDTRANSFORMFEEDBACKPROC glEndTransformFeedback;
PFNGLBINDBUFFERRANGEPROC glBindBufferRange;
PFNGLBINDBUFFERBASEPROC glBindBufferBase;
PFNGLTRANSFORMFEEDBACKVARYINGSPROC glTransformFeedbackVaryings;
PFNGLGETTRANSFORMFEEDBACKVARYINGPROC glGetTransformFeedbackVarying;
PFNGLCLAMPCOLORPROC glClampColor;
PFNGLBEGINCONDITIONALRENDERPROC glBeginConditionalRender;
PFNGLENDCONDITIONALRENDERPROC glEndConditionalRender;
PFNGLVERTEXATTRIBIPOINTERPROC glVertexAttribIPointer;
PFNGLGETVERTEXATTRIBIIVPROC glGetVertexAttribIiv;
PFNGLGETVERTEXATTRIBIUIVPROC glGetVertexAttribIuiv;
PFNGLVERTEXATTRIBI1IPROC glVertexAttribI1i;
PFNGLVERTEXATTRIBI2IPROC glVertexAttribI2i;
PFNGLVERTEXATTRIBI3IPROC glVertexAttribI3i;
PFNGLVERTEXATTRIBI4IPROC glVertexAttribI4i;
PFNGLVERTEXATTRIBI1UIPROC glVertexAttribI1ui;
PFNGLVERTEXATTRIBI2UIPROC glVertexAttribI2ui;
PFNGLVERTEXATTRIBI3UIPROC glVertexAttribI3ui;
PFNGLVERTEXATTRIBI4UIPROC glVertexAttribI4ui;
PFNGLVERTEXATTRIBI1IVPROC glVertexAttribI1iv;
PFNGLVERTEXATTRIBI2IVPROC glVertexAttribI2iv;
PFNGLVERTEXATTRIBI3IVPROC glVertexAttribI3iv;
PFNGLVERTEXATTRIBI4IVPROC glVertexAttribI4iv;
PFNGLVERTEXATTRIBI1UIVPROC glVertexAttribI1uiv;
PFNGLVERTEXATTRIBI2UIVPROC glVertexAttribI2uiv;
PFNGLVERTEXATTRIBI3UIVPROC glVertexAttribI3uiv;
PFNGLVERTEXATTRIBI4UIVPROC glVertexAttribI4uiv;
PFNGLVERTEXATTRIBI4BVPROC glVertexAttribI4bv;
PFNGLVERTEXATTRIBI4SVPROC glVertexAttribI4sv;
PFNGLVERTEXATTRIBI4UBVPROC glVertexAttribI4ubv;
PFNGLVERTEXATTRIBI4USVPROC glVertexAttribI4usv;
PFNGLGETUNIFORMUIVPROC glGetUniformuiv;
PFNGLBINDFRAGDATALOCATIONPROC glBindFragDataLocation;
PFNGLGETFRAGDATALOCATIONPROC glGetFragDataLocation;
PFNGLUNIFORM1UIPROC glUniform1ui;
PFNGLUNIFORM2UIPROC glUniform2ui;
PFNGLUNIFORM3UIPROC glUniform3ui;
PFNGLUNIFORM4UIPROC glUniform4ui;
PFNGLUNIFORM1UIVPROC glUniform1uiv;
PFNGLUNIFORM2UIVPROC glUniform2uiv;
PFNGLUNIFORM3UIVPROC glUniform3uiv;
PFNGLUNIFORM4UIVPROC glUniform4uiv;
PFNGLTEXPARAMETERIIVPROC glTexParameterIiv;
PFNGLTEXPARAMETERIUIVPROC glTexParameterIuiv;
PFNGLGETTEXPARAMETERIIVPROC glGetTexParameterIiv;
PFNGLGETTEXPARAMETERIUIVPROC glGetTexParameterIuiv;
PFNGLCLEARBUFFERIVPROC glClearBufferiv;
PFNGLCLEARBUFFERUIVPROC glClearBufferuiv;
PFNGLCLEARBUFFERFVPROC glClearBufferfv;
PFNGLCLEARBUFFERFIPROC glClearBufferfi;
PFNGLGETSTRINGIPROC glGetStringi;
PFNGLDRAWARRAYSINSTANCEDPROC glDrawArraysInstanced;
PFNGLDRAWELEMENTSINSTANCEDPROC glDrawElementsInstanced;
PFNGLTEXBUFFERPROC glTexBuffer;
PFNGLPRIMITIVERESTARTINDEXPROC glPrimitiveRestartIndex;
PFNGLGETINTEGER64I_VPROC glGetInteger64i_v;
PFNGLGETBUFFERPARAMETERI64VPROC glGetBufferParameteri64v;
PFNGLFRAMEBUFFERTEXTUREPROC glFramebufferTexture;
PFNGLVERTEXATTRIBDIVISORPROC glVertexAttribDivisor;
PFNGLMINSAMPLESHADINGPROC glMinSampleShading;
PFNGLBLENDEQUATIONIPROC glBlendEquationi;
PFNGLBLENDEQUATIONSEPARATEIPROC glBlendEquationSeparatei;
PFNGLBLENDFUNCIPROC glBlendFunci;
PFNGLBLENDFUNCSEPARATEIPROC glBlendFuncSeparatei;
PFNGLACTIVETEXTUREARBPROC glActiveTextureARB;
PFNGLCLIENTACTIVETEXTUREARBPROC glClientActiveTextureARB;
PFNGLMULTITEXCOORD1DARBPROC glMultiTexCoord1dARB;
PFNGLMULTITEXCOORD1DVARBPROC glMultiTexCoord1dvARB;
PFNGLMULTITEXCOORD1FARBPROC glMultiTexCoord1fARB;
PFNGLMULTITEXCOORD1FVARBPROC glMultiTexCoord1fvARB;
PFNGLMULTITEXCOORD1IARBPROC glMultiTexCoord1iARB;
PFNGLMULTITEXCOORD1IVARBPROC glMultiTexCoord1ivARB;
PFNGLMULTITEXCOORD1SARBPROC glMultiTexCoord1sARB;
PFNGLMULTITEXCOORD1SVARBPROC glMultiTexCoord1svARB;
PFNGLMULTITEXCOORD2DARBPROC glMultiTexCoord2dARB;
PFNGLMULTITEXCOORD2DVARBPROC glMultiTexCoord2dvARB;
PFNGLMULTITEXCOORD2FARBPROC glMultiTexCoord2fARB;
PFNGLMULTITEXCOORD2FVARBPROC glMultiTexCoord2fvARB;
PFNGLMULTITEXCOORD2IARBPROC glMultiTexCoord2iARB;
PFNGLMULTITEXCOORD2IVARBPROC glMultiTexCoord2ivARB;
PFNGLMULTITEXCOORD2SARBPROC glMultiTexCoord2sARB;
PFNGLMULTITEXCOORD2SVARBPROC glMultiTexCoord2svARB;
PFNGLMULTITEXCOORD3DARBPROC glMultiTexCoord3dARB;
PFNGLMULTITEXCOORD3DVARBPROC glMultiTexCoord3dvARB;
PFNGLMULTITEXCOORD3FARBPROC glMultiTexCoord3fARB;
PFNGLMULTITEXCOORD3FVARBPROC glMultiTexCoord3fvARB;
PFNGLMULTITEXCOORD3IARBPROC glMultiTexCoord3iARB;
PFNGLMULTITEXCOORD3IVARBPROC glMultiTexCoord3ivARB;
PFNGLMULTITEXCOORD3SARBPROC glMultiTexCoord3sARB;
PFNGLMULTITEXCOORD3SVARBPROC glMultiTexCoord3svARB;
PFNGLMULTITEXCOORD4DARBPROC glMultiTexCoord4dARB;
PFNGLMULTITEXCOORD4DVARBPROC glMultiTexCoord4dvARB;
PFNGLMULTITEXCOORD4FARBPROC glMultiTexCoord4fARB;
PFNGLMULTITEXCOORD4FVARBPROC glMultiTexCoord4fvARB;
PFNGLMULTITEXCOORD4IARBPROC glMultiTexCoord4iARB;
PFNGLMULTITEXCOORD4IVARBPROC glMultiTexCoord4ivARB;
PFNGLMULTITEXCOORD4SARBPROC glMultiTexCoord4sARB;
PFNGLMULTITEXCOORD4SVARBPROC glMultiTexCoord4svARB;
PFNGLLOADTRANSPOSEMATRIXFARBPROC glLoadTransposeMatrixfARB;
PFNGLLOADTRANSPOSEMATRIXDARBPROC glLoadTransposeMatrixdARB;
PFNGLMULTTRANSPOSEMATRIXFARBPROC glMultTransposeMatrixfARB;
PFNGLMULTTRANSPOSEMATRIXDARBPROC glMultTransposeMatrixdARB;
PFNGLSAMPLECOVERAGEARBPROC glSampleCoverageARB;
PFNGLCOMPRESSEDTEXIMAGE3DARBPROC glCompressedTexImage3DARB;
PFNGLCOMPRESSEDTEXIMAGE2DARBPROC glCompressedTexImage2DARB;
PFNGLCOMPRESSEDTEXIMAGE1DARBPROC glCompressedTexImage1DARB;
PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC glCompressedTexSubImage3DARB;
PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC glCompressedTexSubImage2DARB;
PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC glCompressedTexSubImage1DARB;
PFNGLGETCOMPRESSEDTEXIMAGEARBPROC glGetCompressedTexImageARB;
PFNGLPOINTPARAMETERFARBPROC glPointParameterfARB;
PFNGLPOINTPARAMETERFVARBPROC glPointParameterfvARB;
PFNGLWEIGHTBVARBPROC glWeightbvARB;
PFNGLWEIGHTSVARBPROC glWeightsvARB;
PFNGLWEIGHTIVARBPROC glWeightivARB;
PFNGLWEIGHTFVARBPROC glWeightfvARB;
PFNGLWEIGHTDVARBPROC glWeightdvARB;
PFNGLWEIGHTUBVARBPROC glWeightubvARB;
PFNGLWEIGHTUSVARBPROC glWeightusvARB;
PFNGLWEIGHTUIVARBPROC glWeightuivARB;
PFNGLWEIGHTPOINTERARBPROC glWeightPointerARB;
PFNGLVERTEXBLENDARBPROC glVertexBlendARB;
PFNGLCURRENTPALETTEMATRIXARBPROC glCurrentPaletteMatrixARB;
PFNGLMATRIXINDEXUBVARBPROC glMatrixIndexubvARB;
PFNGLMATRIXINDEXUSVARBPROC glMatrixIndexusvARB;
PFNGLMATRIXINDEXUIVARBPROC glMatrixIndexuivARB;
PFNGLMATRIXINDEXPOINTERARBPROC glMatrixIndexPointerARB;
PFNGLWINDOWPOS2DARBPROC glWindowPos2dARB;
PFNGLWINDOWPOS2DVARBPROC glWindowPos2dvARB;
PFNGLWINDOWPOS2FARBPROC glWindowPos2fARB;
PFNGLWINDOWPOS2FVARBPROC glWindowPos2fvARB;
PFNGLWINDOWPOS2IARBPROC glWindowPos2iARB;
PFNGLWINDOWPOS2IVARBPROC glWindowPos2ivARB;
PFNGLWINDOWPOS2SARBPROC glWindowPos2sARB;
PFNGLWINDOWPOS2SVARBPROC glWindowPos2svARB;
PFNGLWINDOWPOS3DARBPROC glWindowPos3dARB;
PFNGLWINDOWPOS3DVARBPROC glWindowPos3dvARB;
PFNGLWINDOWPOS3FARBPROC glWindowPos3fARB;
PFNGLWINDOWPOS3FVARBPROC glWindowPos3fvARB;
PFNGLWINDOWPOS3IARBPROC glWindowPos3iARB;
PFNGLWINDOWPOS3IVARBPROC glWindowPos3ivARB;
PFNGLWINDOWPOS3SARBPROC glWindowPos3sARB;
PFNGLWINDOWPOS3SVARBPROC glWindowPos3svARB;
PFNGLVERTEXATTRIB1DARBPROC glVertexAttrib1dARB;
PFNGLVERTEXATTRIB1DVARBPROC glVertexAttrib1dvARB;
PFNGLVERTEXATTRIB1FARBPROC glVertexAttrib1fARB;
PFNGLVERTEXATTRIB1FVARBPROC glVertexAttrib1fvARB;
PFNGLVERTEXATTRIB1SARBPROC glVertexAttrib1sARB;
PFNGLVERTEXATTRIB1SVARBPROC glVertexAttrib1svARB;
PFNGLVERTEXATTRIB2DARBPROC glVertexAttrib2dARB;
PFNGLVERTEXATTRIB2DVARBPROC glVertexAttrib2dvARB;
PFNGLVERTEXATTRIB2FARBPROC glVertexAttrib2fARB;
PFNGLVERTEXATTRIB2FVARBPROC glVertexAttrib2fvARB;
PFNGLVERTEXATTRIB2SARBPROC glVertexAttrib2sARB;
PFNGLVERTEXATTRIB2SVARBPROC glVertexAttrib2svARB;
PFNGLVERTEXATTRIB3DARBPROC glVertexAttrib3dARB;
PFNGLVERTEXATTRIB3DVARBPROC glVertexAttrib3dvARB;
PFNGLVERTEXATTRIB3FARBPROC glVertexAttrib3fARB;
PFNGLVERTEXATTRIB3FVARBPROC glVertexAttrib3fvARB;
PFNGLVERTEXATTRIB3SARBPROC glVertexAttrib3sARB;
PFNGLVERTEXATTRIB3SVARBPROC glVertexAttrib3svARB;
PFNGLVERTEXATTRIB4NBVARBPROC glVertexAttrib4NbvARB;
PFNGLVERTEXATTRIB4NIVARBPROC glVertexAttrib4NivARB;
PFNGLVERTEXATTRIB4NSVARBPROC glVertexAttrib4NsvARB;
PFNGLVERTEXATTRIB4NUBARBPROC glVertexAttrib4NubARB;
PFNGLVERTEXATTRIB4NUBVARBPROC glVertexAttrib4NubvARB;
PFNGLVERTEXATTRIB4NUIVARBPROC glVertexAttrib4NuivARB;
PFNGLVERTEXATTRIB4NUSVARBPROC glVertexAttrib4NusvARB;
PFNGLVERTEXATTRIB4BVARBPROC glVertexAttrib4bvARB;
PFNGLVERTEXATTRIB4DARBPROC glVertexAttrib4dARB;
PFNGLVERTEXATTRIB4DVARBPROC glVertexAttrib4dvARB;
PFNGLVERTEXATTRIB4FARBPROC glVertexAttrib4fARB;
PFNGLVERTEXATTRIB4FVARBPROC glVertexAttrib4fvARB;
PFNGLVERTEXATTRIB4IVARBPROC glVertexAttrib4ivARB;
PFNGLVERTEXATTRIB4SARBPROC glVertexAttrib4sARB;
PFNGLVERTEXATTRIB4SVARBPROC glVertexAttrib4svARB;
PFNGLVERTEXATTRIB4UBVARBPROC glVertexAttrib4ubvARB;
PFNGLVERTEXATTRIB4UIVARBPROC glVertexAttrib4uivARB;
PFNGLVERTEXATTRIB4USVARBPROC glVertexAttrib4usvARB;
PFNGLVERTEXATTRIBPOINTERARBPROC glVertexAttribPointerARB;
PFNGLENABLEVERTEXATTRIBARRAYARBPROC glEnableVertexAttribArrayARB;
PFNGLDISABLEVERTEXATTRIBARRAYARBPROC glDisableVertexAttribArrayARB;
PFNGLPROGRAMSTRINGARBPROC glProgramStringARB;
PFNGLBINDPROGRAMARBPROC glBindProgramARB;
PFNGLDELETEPROGRAMSARBPROC glDeleteProgramsARB;
PFNGLGENPROGRAMSARBPROC glGenProgramsARB;
PFNGLPROGRAMENVPARAMETER4DARBPROC glProgramEnvParameter4dARB;
PFNGLPROGRAMENVPARAMETER4DVARBPROC glProgramEnvParameter4dvARB;
PFNGLPROGRAMENVPARAMETER4FARBPROC glProgramEnvParameter4fARB;
PFNGLPROGRAMENVPARAMETER4FVARBPROC glProgramEnvParameter4fvARB;
PFNGLPROGRAMLOCALPARAMETER4DARBPROC glProgramLocalParameter4dARB;
PFNGLPROGRAMLOCALPARAMETER4DVARBPROC glProgramLocalParameter4dvARB;
PFNGLPROGRAMLOCALPARAMETER4FARBPROC glProgramLocalParameter4fARB;
PFNGLPROGRAMLOCALPARAMETER4FVARBPROC glProgramLocalParameter4fvARB;
PFNGLGETPROGRAMENVPARAMETERDVARBPROC glGetProgramEnvParameterdvARB;
PFNGLGETPROGRAMENVPARAMETERFVARBPROC glGetProgramEnvParameterfvARB;
PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC glGetProgramLocalParameterdvARB;
PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC glGetProgramLocalParameterfvARB;
PFNGLGETPROGRAMIVARBPROC glGetProgramivARB;
PFNGLGETPROGRAMSTRINGARBPROC glGetProgramStringARB;
PFNGLGETVERTEXATTRIBDVARBPROC glGetVertexAttribdvARB;
PFNGLGETVERTEXATTRIBFVARBPROC glGetVertexAttribfvARB;
PFNGLGETVERTEXATTRIBIVARBPROC glGetVertexAttribivARB;
PFNGLGETVERTEXATTRIBPOINTERVARBPROC glGetVertexAttribPointervARB;
PFNGLISPROGRAMARBPROC glIsProgramARB;
PFNGLBINDBUFFERARBPROC glBindBufferARB;
PFNGLDELETEBUFFERSARBPROC glDeleteBuffersARB;
PFNGLGENBUFFERSARBPROC glGenBuffersARB;
PFNGLISBUFFERARBPROC glIsBufferARB;
PFNGLBUFFERDATAARBPROC glBufferDataARB;
PFNGLBUFFERSUBDATAARBPROC glBufferSubDataARB;
PFNGLGETBUFFERSUBDATAARBPROC glGetBufferSubDataARB;
PFNGLMAPBUFFERARBPROC glMapBufferARB;
PFNGLUNMAPBUFFERARBPROC glUnmapBufferARB;
PFNGLGETBUFFERPARAMETERIVARBPROC glGetBufferParameterivARB;
PFNGLGETBUFFERPOINTERVARBPROC glGetBufferPointervARB;
PFNGLGENQUERIESARBPROC glGenQueriesARB;
PFNGLDELETEQUERIESARBPROC glDeleteQueriesARB;
PFNGLISQUERYARBPROC glIsQueryARB;
PFNGLBEGINQUERYARBPROC glBeginQueryARB;
PFNGLENDQUERYARBPROC glEndQueryARB;
PFNGLGETQUERYIVARBPROC glGetQueryivARB;
PFNGLGETQUERYOBJECTIVARBPROC glGetQueryObjectivARB;
PFNGLGETQUERYOBJECTUIVARBPROC glGetQueryObjectuivARB;
PFNGLDELETEOBJECTARBPROC glDeleteObjectARB;
PFNGLGETHANDLEARBPROC glGetHandleARB;
PFNGLDETACHOBJECTARBPROC glDetachObjectARB;
PFNGLCREATESHADEROBJECTARBPROC glCreateShaderObjectARB;
PFNGLSHADERSOURCEARBPROC glShaderSourceARB;
PFNGLCOMPILESHADERARBPROC glCompileShaderARB;
PFNGLCREATEPROGRAMOBJECTARBPROC glCreateProgramObjectARB;
PFNGLATTACHOBJECTARBPROC glAttachObjectARB;
PFNGLLINKPROGRAMARBPROC glLinkProgramARB;
PFNGLUSEPROGRAMOBJECTARBPROC glUseProgramObjectARB;
PFNGLVALIDATEPROGRAMARBPROC glValidateProgramARB;
PFNGLUNIFORM1FARBPROC glUniform1fARB;
PFNGLUNIFORM2FARBPROC glUniform2fARB;
PFNGLUNIFORM3FARBPROC glUniform3fARB;
PFNGLUNIFORM4FARBPROC glUniform4fARB;
PFNGLUNIFORM1IARBPROC glUniform1iARB;
PFNGLUNIFORM2IARBPROC glUniform2iARB;
PFNGLUNIFORM3IARBPROC glUniform3iARB;
PFNGLUNIFORM4IARBPROC glUniform4iARB;
PFNGLUNIFORM1FVARBPROC glUniform1fvARB;
PFNGLUNIFORM2FVARBPROC glUniform2fvARB;
PFNGLUNIFORM3FVARBPROC glUniform3fvARB;
PFNGLUNIFORM4FVARBPROC glUniform4fvARB;
PFNGLUNIFORM1IVARBPROC glUniform1ivARB;
PFNGLUNIFORM2IVARBPROC glUniform2ivARB;
PFNGLUNIFORM3IVARBPROC glUniform3ivARB;
PFNGLUNIFORM4IVARBPROC glUniform4ivARB;
PFNGLUNIFORMMATRIX2FVARBPROC glUniformMatrix2fvARB;
PFNGLUNIFORMMATRIX3FVARBPROC glUniformMatrix3fvARB;
PFNGLUNIFORMMATRIX4FVARBPROC glUniformMatrix4fvARB;
PFNGLGETOBJECTPARAMETERFVARBPROC glGetObjectParameterfvARB;
PFNGLGETOBJECTPARAMETERIVARBPROC glGetObjectParameterivARB;
PFNGLGETINFOLOGARBPROC glGetInfoLogARB;
PFNGLGETATTACHEDOBJECTSARBPROC glGetAttachedObjectsARB;
PFNGLGETUNIFORMLOCATIONARBPROC glGetUniformLocationARB;
PFNGLGETACTIVEUNIFORMARBPROC glGetActiveUniformARB;
PFNGLGETUNIFORMFVARBPROC glGetUniformfvARB;
PFNGLGETUNIFORMIVARBPROC glGetUniformivARB;
PFNGLGETSHADERSOURCEARBPROC glGetShaderSourceARB;
PFNGLBINDATTRIBLOCATIONARBPROC glBindAttribLocationARB;
PFNGLGETACTIVEATTRIBARBPROC glGetActiveAttribARB;
PFNGLGETATTRIBLOCATIONARBPROC glGetAttribLocationARB;
PFNGLDRAWBUFFERSARBPROC glDrawBuffersARB;
PFNGLCLAMPCOLORARBPROC glClampColorARB;
PFNGLDRAWARRAYSINSTANCEDARBPROC glDrawArraysInstancedARB;
PFNGLDRAWELEMENTSINSTANCEDARBPROC glDrawElementsInstancedARB;
PFNGLISRENDERBUFFERPROC glIsRenderbuffer;
PFNGLBINDRENDERBUFFERPROC glBindRenderbuffer;
PFNGLDELETERENDERBUFFERSPROC glDeleteRenderbuffers;
PFNGLGENRENDERBUFFERSPROC glGenRenderbuffers;
PFNGLRENDERBUFFERSTORAGEPROC glRenderbufferStorage;
PFNGLGETRENDERBUFFERPARAMETERIVPROC glGetRenderbufferParameteriv;
PFNGLISFRAMEBUFFERPROC glIsFramebuffer;
PFNGLBINDFRAMEBUFFERPROC glBindFramebuffer;
PFNGLDELETEFRAMEBUFFERSPROC glDeleteFramebuffers;
PFNGLGENFRAMEBUFFERSPROC glGenFramebuffers;
PFNGLCHECKFRAMEBUFFERSTATUSPROC glCheckFramebufferStatus;
PFNGLFRAMEBUFFERTEXTURE1DPROC glFramebufferTexture1D;
PFNGLFRAMEBUFFERTEXTURE2DPROC glFramebufferTexture2D;
PFNGLFRAMEBUFFERTEXTURE3DPROC glFramebufferTexture3D;
PFNGLFRAMEBUFFERRENDERBUFFERPROC glFramebufferRenderbuffer;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC glGetFramebufferAttachmentParameteriv;
PFNGLGENERATEMIPMAPPROC glGenerateMipmap;
PFNGLBLITFRAMEBUFFERPROC glBlitFramebuffer;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC glRenderbufferStorageMultisample;
PFNGLFRAMEBUFFERTEXTURELAYERPROC glFramebufferTextureLayer;
PFNGLPROGRAMPARAMETERIARBPROC glProgramParameteriARB;
PFNGLFRAMEBUFFERTEXTUREARBPROC glFramebufferTextureARB;
PFNGLFRAMEBUFFERTEXTURELAYERARBPROC glFramebufferTextureLayerARB;
PFNGLFRAMEBUFFERTEXTUREFACEARBPROC glFramebufferTextureFaceARB;
PFNGLVERTEXATTRIBDIVISORARBPROC glVertexAttribDivisorARB;
PFNGLMAPBUFFERRANGEPROC glMapBufferRange;
PFNGLFLUSHMAPPEDBUFFERRANGEPROC glFlushMappedBufferRange;
PFNGLTEXBUFFERARBPROC glTexBufferARB;
PFNGLBINDVERTEXARRAYPROC glBindVertexArray;
PFNGLDELETEVERTEXARRAYSPROC glDeleteVertexArrays;
PFNGLGENVERTEXARRAYSPROC glGenVertexArrays;
PFNGLISVERTEXARRAYPROC glIsVertexArray;
PFNGLGETUNIFORMINDICESPROC glGetUniformIndices;
PFNGLGETACTIVEUNIFORMSIVPROC glGetActiveUniformsiv;
PFNGLGETACTIVEUNIFORMNAMEPROC glGetActiveUniformName;
PFNGLGETUNIFORMBLOCKINDEXPROC glGetUniformBlockIndex;
PFNGLGETACTIVEUNIFORMBLOCKIVPROC glGetActiveUniformBlockiv;
PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC glGetActiveUniformBlockName;
PFNGLUNIFORMBLOCKBINDINGPROC glUniformBlockBinding;
PFNGLCOPYBUFFERSUBDATAPROC glCopyBufferSubData;
PFNGLDRAWELEMENTSBASEVERTEXPROC glDrawElementsBaseVertex;
PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC glDrawRangeElementsBaseVertex;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC glDrawElementsInstancedBaseVertex;
PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC glMultiDrawElementsBaseVertex;
PFNGLPROVOKINGVERTEXPROC glProvokingVertex;
PFNGLFENCESYNCPROC glFenceSync;
PFNGLISSYNCPROC glIsSync;
PFNGLDELETESYNCPROC glDeleteSync;
PFNGLCLIENTWAITSYNCPROC glClientWaitSync;
PFNGLWAITSYNCPROC glWaitSync;
PFNGLGETINTEGER64VPROC glGetInteger64v;
PFNGLGETSYNCIVPROC glGetSynciv;
PFNGLTEXIMAGE2DMULTISAMPLEPROC glTexImage2DMultisample;
PFNGLTEXIMAGE3DMULTISAMPLEPROC glTexImage3DMultisample;
PFNGLGETMULTISAMPLEFVPROC glGetMultisamplefv;
PFNGLSAMPLEMASKIPROC glSampleMaski;
PFNGLBLENDEQUATIONIARBPROC glBlendEquationiARB;
PFNGLBLENDEQUATIONSEPARATEIARBPROC glBlendEquationSeparateiARB;
PFNGLBLENDFUNCIARBPROC glBlendFunciARB;
PFNGLBLENDFUNCSEPARATEIARBPROC glBlendFuncSeparateiARB;
PFNGLMINSAMPLESHADINGARBPROC glMinSampleShadingARB;
PFNGLNAMEDSTRINGARBPROC glNamedStringARB;
PFNGLDELETENAMEDSTRINGARBPROC glDeleteNamedStringARB;
PFNGLCOMPILESHADERINCLUDEARBPROC glCompileShaderIncludeARB;
PFNGLISNAMEDSTRINGARBPROC glIsNamedStringARB;
PFNGLGETNAMEDSTRINGARBPROC glGetNamedStringARB;
PFNGLGETNAMEDSTRINGIVARBPROC glGetNamedStringivARB;
PFNGLBINDFRAGDATALOCATIONINDEXEDPROC glBindFragDataLocationIndexed;
PFNGLGETFRAGDATAINDEXPROC glGetFragDataIndex;
PFNGLGENSAMPLERSPROC glGenSamplers;
PFNGLDELETESAMPLERSPROC glDeleteSamplers;
PFNGLISSAMPLERPROC glIsSampler;
PFNGLBINDSAMPLERPROC glBindSampler;
PFNGLSAMPLERPARAMETERIPROC glSamplerParameteri;
PFNGLSAMPLERPARAMETERIVPROC glSamplerParameteriv;
PFNGLSAMPLERPARAMETERFPROC glSamplerParameterf;
PFNGLSAMPLERPARAMETERFVPROC glSamplerParameterfv;
PFNGLSAMPLERPARAMETERIIVPROC glSamplerParameterIiv;
PFNGLSAMPLERPARAMETERIUIVPROC glSamplerParameterIuiv;
PFNGLGETSAMPLERPARAMETERIVPROC glGetSamplerParameteriv;
PFNGLGETSAMPLERPARAMETERIIVPROC glGetSamplerParameterIiv;
PFNGLGETSAMPLERPARAMETERFVPROC glGetSamplerParameterfv;
PFNGLGETSAMPLERPARAMETERIUIVPROC glGetSamplerParameterIuiv;
PFNGLQUERYCOUNTERPROC glQueryCounter;
PFNGLGETQUERYOBJECTI64VPROC glGetQueryObjecti64v;
PFNGLGETQUERYOBJECTUI64VPROC glGetQueryObjectui64v;
PFNGLVERTEXP2UIPROC glVertexP2ui;
PFNGLVERTEXP2UIVPROC glVertexP2uiv;
PFNGLVERTEXP3UIPROC glVertexP3ui;
PFNGLVERTEXP3UIVPROC glVertexP3uiv;
PFNGLVERTEXP4UIPROC glVertexP4ui;
PFNGLVERTEXP4UIVPROC glVertexP4uiv;
PFNGLTEXCOORDP1UIPROC glTexCoordP1ui;
PFNGLTEXCOORDP1UIVPROC glTexCoordP1uiv;
PFNGLTEXCOORDP2UIPROC glTexCoordP2ui;
PFNGLTEXCOORDP2UIVPROC glTexCoordP2uiv;
PFNGLTEXCOORDP3UIPROC glTexCoordP3ui;
PFNGLTEXCOORDP3UIVPROC glTexCoordP3uiv;
PFNGLTEXCOORDP4UIPROC glTexCoordP4ui;
PFNGLTEXCOORDP4UIVPROC glTexCoordP4uiv;
PFNGLMULTITEXCOORDP1UIPROC glMultiTexCoordP1ui;
PFNGLMULTITEXCOORDP1UIVPROC glMultiTexCoordP1uiv;
PFNGLMULTITEXCOORDP2UIPROC glMultiTexCoordP2ui;
PFNGLMULTITEXCOORDP2UIVPROC glMultiTexCoordP2uiv;
PFNGLMULTITEXCOORDP3UIPROC glMultiTexCoordP3ui;
PFNGLMULTITEXCOORDP3UIVPROC glMultiTexCoordP3uiv;
PFNGLMULTITEXCOORDP4UIPROC glMultiTexCoordP4ui;
PFNGLMULTITEXCOORDP4UIVPROC glMultiTexCoordP4uiv;
PFNGLNORMALP3UIPROC glNormalP3ui;
PFNGLNORMALP3UIVPROC glNormalP3uiv;
PFNGLCOLORP3UIPROC glColorP3ui;
PFNGLCOLORP3UIVPROC glColorP3uiv;
PFNGLCOLORP4UIPROC glColorP4ui;
PFNGLCOLORP4UIVPROC glColorP4uiv;
PFNGLSECONDARYCOLORP3UIPROC glSecondaryColorP3ui;
PFNGLSECONDARYCOLORP3UIVPROC glSecondaryColorP3uiv;
PFNGLVERTEXATTRIBP1UIPROC glVertexAttribP1ui;
PFNGLVERTEXATTRIBP1UIVPROC glVertexAttribP1uiv;
PFNGLVERTEXATTRIBP2UIPROC glVertexAttribP2ui;
PFNGLVERTEXATTRIBP2UIVPROC glVertexAttribP2uiv;
PFNGLVERTEXATTRIBP3UIPROC glVertexAttribP3ui;
PFNGLVERTEXATTRIBP3UIVPROC glVertexAttribP3uiv;
PFNGLVERTEXATTRIBP4UIPROC glVertexAttribP4ui;
PFNGLVERTEXATTRIBP4UIVPROC glVertexAttribP4uiv;
PFNGLDRAWARRAYSINDIRECTPROC glDrawArraysIndirect;
PFNGLDRAWELEMENTSINDIRECTPROC glDrawElementsIndirect;
PFNGLUNIFORM1DPROC glUniform1d;
PFNGLUNIFORM2DPROC glUniform2d;
PFNGLUNIFORM3DPROC glUniform3d;
PFNGLUNIFORM4DPROC glUniform4d;
PFNGLUNIFORM1DVPROC glUniform1dv;
PFNGLUNIFORM2DVPROC glUniform2dv;
PFNGLUNIFORM3DVPROC glUniform3dv;
PFNGLUNIFORM4DVPROC glUniform4dv;
PFNGLUNIFORMMATRIX2DVPROC glUniformMatrix2dv;
PFNGLUNIFORMMATRIX3DVPROC glUniformMatrix3dv;
PFNGLUNIFORMMATRIX4DVPROC glUniformMatrix4dv;
PFNGLUNIFORMMATRIX2X3DVPROC glUniformMatrix2x3dv;
PFNGLUNIFORMMATRIX2X4DVPROC glUniformMatrix2x4dv;
PFNGLUNIFORMMATRIX3X2DVPROC glUniformMatrix3x2dv;
PFNGLUNIFORMMATRIX3X4DVPROC glUniformMatrix3x4dv;
PFNGLUNIFORMMATRIX4X2DVPROC glUniformMatrix4x2dv;
PFNGLUNIFORMMATRIX4X3DVPROC glUniformMatrix4x3dv;
PFNGLGETUNIFORMDVPROC glGetUniformdv;
PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC glGetSubroutineUniformLocation;
PFNGLGETSUBROUTINEINDEXPROC glGetSubroutineIndex;
PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC glGetActiveSubroutineUniformiv;
PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC glGetActiveSubroutineUniformName;
PFNGLGETACTIVESUBROUTINENAMEPROC glGetActiveSubroutineName;
PFNGLUNIFORMSUBROUTINESUIVPROC glUniformSubroutinesuiv;
PFNGLGETUNIFORMSUBROUTINEUIVPROC glGetUniformSubroutineuiv;
PFNGLGETPROGRAMSTAGEIVPROC glGetProgramStageiv;
PFNGLPATCHPARAMETERIPROC glPatchParameteri;
PFNGLPATCHPARAMETERFVPROC glPatchParameterfv;
PFNGLBINDTRANSFORMFEEDBACKPROC glBindTransformFeedback;
PFNGLDELETETRANSFORMFEEDBACKSPROC glDeleteTransformFeedbacks;
PFNGLGENTRANSFORMFEEDBACKSPROC glGenTransformFeedbacks;
PFNGLISTRANSFORMFEEDBACKPROC glIsTransformFeedback;
PFNGLPAUSETRANSFORMFEEDBACKPROC glPauseTransformFeedback;
PFNGLRESUMETRANSFORMFEEDBACKPROC glResumeTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKPROC glDrawTransformFeedback;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC glDrawTransformFeedbackStream;
PFNGLBEGINQUERYINDEXEDPROC glBeginQueryIndexed;
PFNGLENDQUERYINDEXEDPROC glEndQueryIndexed;
PFNGLGETQUERYINDEXEDIVPROC glGetQueryIndexediv;
PFNGLRELEASESHADERCOMPILERPROC glReleaseShaderCompiler;
PFNGLSHADERBINARYPROC glShaderBinary;
PFNGLGETSHADERPRECISIONFORMATPROC glGetShaderPrecisionFormat;
PFNGLDEPTHRANGEFPROC glDepthRangef;
PFNGLCLEARDEPTHFPROC glClearDepthf;
PFNGLGETPROGRAMBINARYPROC glGetProgramBinary;
PFNGLPROGRAMBINARYPROC glProgramBinary;
PFNGLPROGRAMPARAMETERIPROC glProgramParameteri;
PFNGLUSEPROGRAMSTAGESPROC glUseProgramStages;
PFNGLACTIVESHADERPROGRAMPROC glActiveShaderProgram;
PFNGLCREATESHADERPROGRAMVPROC glCreateShaderProgramv;
PFNGLBINDPROGRAMPIPELINEPROC glBindProgramPipeline;
PFNGLDELETEPROGRAMPIPELINESPROC glDeleteProgramPipelines;
PFNGLGENPROGRAMPIPELINESPROC glGenProgramPipelines;
PFNGLISPROGRAMPIPELINEPROC glIsProgramPipeline;
PFNGLGETPROGRAMPIPELINEIVPROC glGetProgramPipelineiv;
PFNGLPROGRAMUNIFORM1IPROC glProgramUniform1i;
PFNGLPROGRAMUNIFORM1IVPROC glProgramUniform1iv;
PFNGLPROGRAMUNIFORM1FPROC glProgramUniform1f;
PFNGLPROGRAMUNIFORM1FVPROC glProgramUniform1fv;
PFNGLPROGRAMUNIFORM1DPROC glProgramUniform1d;
PFNGLPROGRAMUNIFORM1DVPROC glProgramUniform1dv;
PFNGLPROGRAMUNIFORM1UIPROC glProgramUniform1ui;
PFNGLPROGRAMUNIFORM1UIVPROC glProgramUniform1uiv;
PFNGLPROGRAMUNIFORM2IPROC glProgramUniform2i;
PFNGLPROGRAMUNIFORM2IVPROC glProgramUniform2iv;
PFNGLPROGRAMUNIFORM2FPROC glProgramUniform2f;
PFNGLPROGRAMUNIFORM2FVPROC glProgramUniform2fv;
PFNGLPROGRAMUNIFORM2DPROC glProgramUniform2d;
PFNGLPROGRAMUNIFORM2DVPROC glProgramUniform2dv;
PFNGLPROGRAMUNIFORM2UIPROC glProgramUniform2ui;
PFNGLPROGRAMUNIFORM2UIVPROC glProgramUniform2uiv;
PFNGLPROGRAMUNIFORM3IPROC glProgramUniform3i;
PFNGLPROGRAMUNIFORM3IVPROC glProgramUniform3iv;
PFNGLPROGRAMUNIFORM3FPROC glProgramUniform3f;
PFNGLPROGRAMUNIFORM3FVPROC glProgramUniform3fv;
PFNGLPROGRAMUNIFORM3DPROC glProgramUniform3d;
PFNGLPROGRAMUNIFORM3DVPROC glProgramUniform3dv;
PFNGLPROGRAMUNIFORM3UIPROC glProgramUniform3ui;
PFNGLPROGRAMUNIFORM3UIVPROC glProgramUniform3uiv;
PFNGLPROGRAMUNIFORM4IPROC glProgramUniform4i;
PFNGLPROGRAMUNIFORM4IVPROC glProgramUniform4iv;
PFNGLPROGRAMUNIFORM4FPROC glProgramUniform4f;
PFNGLPROGRAMUNIFORM4FVPROC glProgramUniform4fv;
PFNGLPROGRAMUNIFORM4DPROC glProgramUniform4d;
PFNGLPROGRAMUNIFORM4DVPROC glProgramUniform4dv;
PFNGLPROGRAMUNIFORM4UIPROC glProgramUniform4ui;
PFNGLPROGRAMUNIFORM4UIVPROC glProgramUniform4uiv;
PFNGLPROGRAMUNIFORMMATRIX2FVPROC glProgramUniformMatrix2fv;
PFNGLPROGRAMUNIFORMMATRIX3FVPROC glProgramUniformMatrix3fv;
PFNGLPROGRAMUNIFORMMATRIX4FVPROC glProgramUniformMatrix4fv;
PFNGLPROGRAMUNIFORMMATRIX2DVPROC glProgramUniformMatrix2dv;
PFNGLPROGRAMUNIFORMMATRIX3DVPROC glProgramUniformMatrix3dv;
PFNGLPROGRAMUNIFORMMATRIX4DVPROC glProgramUniformMatrix4dv;
PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC glProgramUniformMatrix2x3fv;
PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC glProgramUniformMatrix3x2fv;
PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC glProgramUniformMatrix2x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC glProgramUniformMatrix4x2fv;
PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC glProgramUniformMatrix3x4fv;
PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC glProgramUniformMatrix4x3fv;
PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC glProgramUniformMatrix2x3dv;
PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC glProgramUniformMatrix3x2dv;
PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC glProgramUniformMatrix2x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC glProgramUniformMatrix4x2dv;
PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC glProgramUniformMatrix3x4dv;
PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC glProgramUniformMatrix4x3dv;
PFNGLVALIDATEPROGRAMPIPELINEPROC glValidateProgramPipeline;
PFNGLGETPROGRAMPIPELINEINFOLOGPROC glGetProgramPipelineInfoLog;
PFNGLVERTEXATTRIBL1DPROC glVertexAttribL1d;
PFNGLVERTEXATTRIBL2DPROC glVertexAttribL2d;
PFNGLVERTEXATTRIBL3DPROC glVertexAttribL3d;
PFNGLVERTEXATTRIBL4DPROC glVertexAttribL4d;
PFNGLVERTEXATTRIBL1DVPROC glVertexAttribL1dv;
PFNGLVERTEXATTRIBL2DVPROC glVertexAttribL2dv;
PFNGLVERTEXATTRIBL3DVPROC glVertexAttribL3dv;
PFNGLVERTEXATTRIBL4DVPROC glVertexAttribL4dv;
PFNGLVERTEXATTRIBLPOINTERPROC glVertexAttribLPointer;
PFNGLGETVERTEXATTRIBLDVPROC glGetVertexAttribLdv;
PFNGLVIEWPORTARRAYVPROC glViewportArrayv;
PFNGLVIEWPORTINDEXEDFPROC glViewportIndexedf;
PFNGLVIEWPORTINDEXEDFVPROC glViewportIndexedfv;
PFNGLSCISSORARRAYVPROC glScissorArrayv;
PFNGLSCISSORINDEXEDPROC glScissorIndexed;
PFNGLSCISSORINDEXEDVPROC glScissorIndexedv;
PFNGLDEPTHRANGEARRAYVPROC glDepthRangeArrayv;
PFNGLDEPTHRANGEINDEXEDPROC glDepthRangeIndexed;
PFNGLGETFLOATI_VPROC glGetFloati_v;
PFNGLGETDOUBLEI_VPROC glGetDoublei_v;
PFNGLCREATESYNCFROMCLEVENTARBPROC glCreateSyncFromCLeventARB;
PFNGLDEBUGMESSAGECONTROLARBPROC glDebugMessageControlARB;
PFNGLDEBUGMESSAGEINSERTARBPROC glDebugMessageInsertARB;
PFNGLDEBUGMESSAGECALLBACKARBPROC glDebugMessageCallbackARB;
PFNGLGETDEBUGMESSAGELOGARBPROC glGetDebugMessageLogARB;
PFNGLGETGRAPHICSRESETSTATUSARBPROC glGetGraphicsResetStatusARB;
PFNGLGETNMAPDVARBPROC glGetnMapdvARB;
PFNGLGETNMAPFVARBPROC glGetnMapfvARB;
PFNGLGETNMAPIVARBPROC glGetnMapivARB;
PFNGLGETNPIXELMAPFVARBPROC glGetnPixelMapfvARB;
PFNGLGETNPIXELMAPUIVARBPROC glGetnPixelMapuivARB;
PFNGLGETNPIXELMAPUSVARBPROC glGetnPixelMapusvARB;
PFNGLGETNPOLYGONSTIPPLEARBPROC glGetnPolygonStippleARB;
PFNGLGETNCOLORTABLEARBPROC glGetnColorTableARB;
PFNGLGETNCONVOLUTIONFILTERARBPROC glGetnConvolutionFilterARB;
PFNGLGETNSEPARABLEFILTERARBPROC glGetnSeparableFilterARB;
PFNGLGETNHISTOGRAMARBPROC glGetnHistogramARB;
PFNGLGETNMINMAXARBPROC glGetnMinmaxARB;
PFNGLGETNTEXIMAGEARBPROC glGetnTexImageARB;
PFNGLREADNPIXELSARBPROC glReadnPixelsARB;
PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC glGetnCompressedTexImageARB;
PFNGLGETNUNIFORMFVARBPROC glGetnUniformfvARB;
PFNGLGETNUNIFORMIVARBPROC glGetnUniformivARB;
PFNGLGETNUNIFORMUIVARBPROC glGetnUniformuivARB;
PFNGLGETNUNIFORMDVARBPROC glGetnUniformdvARB;
PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC glDrawArraysInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC glDrawElementsInstancedBaseInstance;
PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC glDrawElementsInstancedBaseVertexBaseInstance;
PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC glDrawTransformFeedbackInstanced;
PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC glDrawTransformFeedbackStreamInstanced;
PFNGLGETINTERNALFORMATIVPROC glGetInternalformativ;
PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC glGetActiveAtomicCounterBufferiv;
PFNGLBINDIMAGETEXTUREPROC glBindImageTexture;
PFNGLMEMORYBARRIERPROC glMemoryBarrier;
PFNGLTEXSTORAGE1DPROC glTexStorage1D;
PFNGLTEXSTORAGE2DPROC glTexStorage2D;
PFNGLTEXSTORAGE3DPROC glTexStorage3D;
PFNGLTEXTURESTORAGE1DEXTPROC glTextureStorage1DEXT;
PFNGLTEXTURESTORAGE2DEXTPROC glTextureStorage2DEXT;
PFNGLTEXTURESTORAGE3DEXTPROC glTextureStorage3DEXT;
PFNGLDEBUGMESSAGECONTROLPROC glDebugMessageControl;
PFNGLDEBUGMESSAGEINSERTPROC glDebugMessageInsert;
PFNGLDEBUGMESSAGECALLBACKPROC glDebugMessageCallback;
PFNGLGETDEBUGMESSAGELOGPROC glGetDebugMessageLog;
PFNGLPUSHDEBUGGROUPPROC glPushDebugGroup;
PFNGLPOPDEBUGGROUPPROC glPopDebugGroup;
PFNGLOBJECTLABELPROC glObjectLabel;
PFNGLGETOBJECTLABELPROC glGetObjectLabel;
PFNGLOBJECTPTRLABELPROC glObjectPtrLabel;
PFNGLGETOBJECTPTRLABELPROC glGetObjectPtrLabel;
PFNGLCLEARBUFFERDATAPROC glClearBufferData;
PFNGLCLEARBUFFERSUBDATAPROC glClearBufferSubData;
PFNGLCLEARNAMEDBUFFERDATAEXTPROC glClearNamedBufferDataEXT;
PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC glClearNamedBufferSubDataEXT;
PFNGLDISPATCHCOMPUTEPROC glDispatchCompute;
PFNGLDISPATCHCOMPUTEINDIRECTPROC glDispatchComputeIndirect;
PFNGLCOPYIMAGESUBDATAPROC glCopyImageSubData;
PFNGLTEXTUREVIEWPROC glTextureView;
PFNGLBINDVERTEXBUFFERPROC glBindVertexBuffer;
PFNGLVERTEXATTRIBFORMATPROC glVertexAttribFormat;
PFNGLVERTEXATTRIBIFORMATPROC glVertexAttribIFormat;
PFNGLVERTEXATTRIBLFORMATPROC glVertexAttribLFormat;
PFNGLVERTEXATTRIBBINDINGPROC glVertexAttribBinding;
PFNGLVERTEXBINDINGDIVISORPROC glVertexBindingDivisor;
PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC glVertexArrayBindVertexBufferEXT;
PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC glVertexArrayVertexAttribFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC glVertexArrayVertexAttribIFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC glVertexArrayVertexAttribLFormatEXT;
PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC glVertexArrayVertexAttribBindingEXT;
PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC glVertexArrayVertexBindingDivisorEXT;
PFNGLFRAMEBUFFERPARAMETERIPROC glFramebufferParameteri;
PFNGLGETFRAMEBUFFERPARAMETERIVPROC glGetFramebufferParameteriv;
PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC glNamedFramebufferParameteriEXT;
PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC glGetNamedFramebufferParameterivEXT;
PFNGLGETINTERNALFORMATI64VPROC glGetInternalformati64v;
PFNGLINVALIDATETEXSUBIMAGEPROC glInvalidateTexSubImage;
PFNGLINVALIDATETEXIMAGEPROC glInvalidateTexImage;
PFNGLINVALIDATEBUFFERSUBDATAPROC glInvalidateBufferSubData;
PFNGLINVALIDATEBUFFERDATAPROC glInvalidateBufferData;
PFNGLINVALIDATEFRAMEBUFFERPROC glInvalidateFramebuffer;
PFNGLINVALIDATESUBFRAMEBUFFERPROC glInvalidateSubFramebuffer;
PFNGLMULTIDRAWARRAYSINDIRECTPROC glMultiDrawArraysIndirect;
PFNGLMULTIDRAWELEMENTSINDIRECTPROC glMultiDrawElementsIndirect;
PFNGLGETPROGRAMINTERFACEIVPROC glGetProgramInterfaceiv;
PFNGLGETPROGRAMRESOURCEINDEXPROC glGetProgramResourceIndex;
PFNGLGETPROGRAMRESOURCENAMEPROC glGetProgramResourceName;
PFNGLGETPROGRAMRESOURCEIVPROC glGetProgramResourceiv;
PFNGLGETPROGRAMRESOURCELOCATIONPROC glGetProgramResourceLocation;
PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC glGetProgramResourceLocationIndex;
PFNGLSHADERSTORAGEBLOCKBINDINGPROC glShaderStorageBlockBinding;
PFNGLTEXBUFFERRANGEPROC glTexBufferRange;
PFNGLTEXTUREBUFFERRANGEEXTPROC glTextureBufferRangeEXT;
PFNGLTEXSTORAGE2DMULTISAMPLEPROC glTexStorage2DMultisample;
PFNGLTEXSTORAGE3DMULTISAMPLEPROC glTexStorage3DMultisample;
PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC glTextureStorage2DMultisampleEXT;
PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC glTextureStorage3DMultisampleEXT;
PFNGLBLENDCOLOREXTPROC glBlendColorEXT;
PFNGLPOLYGONOFFSETEXTPROC glPolygonOffsetEXT;
PFNGLTEXIMAGE3DEXTPROC glTexImage3DEXT;
PFNGLTEXSUBIMAGE3DEXTPROC glTexSubImage3DEXT;
PFNGLGETTEXFILTERFUNCSGISPROC glGetTexFilterFuncSGIS;
PFNGLTEXFILTERFUNCSGISPROC glTexFilterFuncSGIS;
PFNGLTEXSUBIMAGE1DEXTPROC glTexSubImage1DEXT;
PFNGLTEXSUBIMAGE2DEXTPROC glTexSubImage2DEXT;
PFNGLCOPYTEXIMAGE1DEXTPROC glCopyTexImage1DEXT;
PFNGLCOPYTEXIMAGE2DEXTPROC glCopyTexImage2DEXT;
PFNGLCOPYTEXSUBIMAGE1DEXTPROC glCopyTexSubImage1DEXT;
PFNGLCOPYTEXSUBIMAGE2DEXTPROC glCopyTexSubImage2DEXT;
PFNGLCOPYTEXSUBIMAGE3DEXTPROC glCopyTexSubImage3DEXT;
PFNGLGETHISTOGRAMEXTPROC glGetHistogramEXT;
PFNGLGETHISTOGRAMPARAMETERFVEXTPROC glGetHistogramParameterfvEXT;
PFNGLGETHISTOGRAMPARAMETERIVEXTPROC glGetHistogramParameterivEXT;
PFNGLGETMINMAXEXTPROC glGetMinmaxEXT;
PFNGLGETMINMAXPARAMETERFVEXTPROC glGetMinmaxParameterfvEXT;
PFNGLGETMINMAXPARAMETERIVEXTPROC glGetMinmaxParameterivEXT;
PFNGLHISTOGRAMEXTPROC glHistogramEXT;
PFNGLMINMAXEXTPROC glMinmaxEXT;
PFNGLRESETHISTOGRAMEXTPROC glResetHistogramEXT;
PFNGLRESETMINMAXEXTPROC glResetMinmaxEXT;
PFNGLCONVOLUTIONFILTER1DEXTPROC glConvolutionFilter1DEXT;
PFNGLCONVOLUTIONFILTER2DEXTPROC glConvolutionFilter2DEXT;
PFNGLCONVOLUTIONPARAMETERFEXTPROC glConvolutionParameterfEXT;
PFNGLCONVOLUTIONPARAMETERFVEXTPROC glConvolutionParameterfvEXT;
PFNGLCONVOLUTIONPARAMETERIEXTPROC glConvolutionParameteriEXT;
PFNGLCONVOLUTIONPARAMETERIVEXTPROC glConvolutionParameterivEXT;
PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC glCopyConvolutionFilter1DEXT;
PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC glCopyConvolutionFilter2DEXT;
PFNGLGETCONVOLUTIONFILTEREXTPROC glGetConvolutionFilterEXT;
PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC glGetConvolutionParameterfvEXT;
PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC glGetConvolutionParameterivEXT;
PFNGLGETSEPARABLEFILTEREXTPROC glGetSeparableFilterEXT;
PFNGLSEPARABLEFILTER2DEXTPROC glSeparableFilter2DEXT;
PFNGLCOLORTABLESGIPROC glColorTableSGI;
PFNGLCOLORTABLEPARAMETERFVSGIPROC glColorTableParameterfvSGI;
PFNGLCOLORTABLEPARAMETERIVSGIPROC glColorTableParameterivSGI;
PFNGLCOPYCOLORTABLESGIPROC glCopyColorTableSGI;
PFNGLGETCOLORTABLESGIPROC glGetColorTableSGI;
PFNGLGETCOLORTABLEPARAMETERFVSGIPROC glGetColorTableParameterfvSGI;
PFNGLGETCOLORTABLEPARAMETERIVSGIPROC glGetColorTableParameterivSGI;
PFNGLPIXELTEXGENSGIXPROC glPixelTexGenSGIX;
PFNGLPIXELTEXGENPARAMETERISGISPROC glPixelTexGenParameteriSGIS;
PFNGLPIXELTEXGENPARAMETERIVSGISPROC glPixelTexGenParameterivSGIS;
PFNGLPIXELTEXGENPARAMETERFSGISPROC glPixelTexGenParameterfSGIS;
PFNGLPIXELTEXGENPARAMETERFVSGISPROC glPixelTexGenParameterfvSGIS;
PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC glGetPixelTexGenParameterivSGIS;
PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC glGetPixelTexGenParameterfvSGIS;
PFNGLTEXIMAGE4DSGISPROC glTexImage4DSGIS;
PFNGLTEXSUBIMAGE4DSGISPROC glTexSubImage4DSGIS;
PFNGLARETEXTURESRESIDENTEXTPROC glAreTexturesResidentEXT;
PFNGLBINDTEXTUREEXTPROC glBindTextureEXT;
PFNGLDELETETEXTURESEXTPROC glDeleteTexturesEXT;
PFNGLGENTEXTURESEXTPROC glGenTexturesEXT;
PFNGLISTEXTUREEXTPROC glIsTextureEXT;
PFNGLPRIORITIZETEXTURESEXTPROC glPrioritizeTexturesEXT;
PFNGLDETAILTEXFUNCSGISPROC glDetailTexFuncSGIS;
PFNGLGETDETAILTEXFUNCSGISPROC glGetDetailTexFuncSGIS;
PFNGLSHARPENTEXFUNCSGISPROC glSharpenTexFuncSGIS;
PFNGLGETSHARPENTEXFUNCSGISPROC glGetSharpenTexFuncSGIS;
PFNGLSAMPLEMASKSGISPROC glSampleMaskSGIS;
PFNGLSAMPLEPATTERNSGISPROC glSamplePatternSGIS;
PFNGLARRAYELEMENTEXTPROC glArrayElementEXT;
PFNGLCOLORPOINTEREXTPROC glColorPointerEXT;
PFNGLDRAWARRAYSEXTPROC glDrawArraysEXT;
PFNGLEDGEFLAGPOINTEREXTPROC glEdgeFlagPointerEXT;
PFNGLGETPOINTERVEXTPROC glGetPointervEXT;
PFNGLINDEXPOINTEREXTPROC glIndexPointerEXT;
PFNGLNORMALPOINTEREXTPROC glNormalPointerEXT;
PFNGLTEXCOORDPOINTEREXTPROC glTexCoordPointerEXT;
PFNGLVERTEXPOINTEREXTPROC glVertexPointerEXT;
PFNGLBLENDEQUATIONEXTPROC glBlendEquationEXT;
PFNGLSPRITEPARAMETERFSGIXPROC glSpriteParameterfSGIX;
PFNGLSPRITEPARAMETERFVSGIXPROC glSpriteParameterfvSGIX;
PFNGLSPRITEPARAMETERISGIXPROC glSpriteParameteriSGIX;
PFNGLSPRITEPARAMETERIVSGIXPROC glSpriteParameterivSGIX;
PFNGLPOINTPARAMETERFEXTPROC glPointParameterfEXT;
PFNGLPOINTPARAMETERFVEXTPROC glPointParameterfvEXT;
PFNGLPOINTPARAMETERFSGISPROC glPointParameterfSGIS;
PFNGLPOINTPARAMETERFVSGISPROC glPointParameterfvSGIS;
PFNGLGETINSTRUMENTSSGIXPROC glGetInstrumentsSGIX;
PFNGLINSTRUMENTSBUFFERSGIXPROC glInstrumentsBufferSGIX;
PFNGLPOLLINSTRUMENTSSGIXPROC glPollInstrumentsSGIX;
PFNGLREADINSTRUMENTSSGIXPROC glReadInstrumentsSGIX;
PFNGLSTARTINSTRUMENTSSGIXPROC glStartInstrumentsSGIX;
PFNGLSTOPINSTRUMENTSSGIXPROC glStopInstrumentsSGIX;
PFNGLFRAMEZOOMSGIXPROC glFrameZoomSGIX;
PFNGLTAGSAMPLEBUFFERSGIXPROC glTagSampleBufferSGIX;
PFNGLDEFORMATIONMAP3DSGIXPROC glDeformationMap3dSGIX;
PFNGLDEFORMATIONMAP3FSGIXPROC glDeformationMap3fSGIX;
PFNGLDEFORMSGIXPROC glDeformSGIX;
PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC glLoadIdentityDeformationMapSGIX;
PFNGLREFERENCEPLANESGIXPROC glReferencePlaneSGIX;
PFNGLFLUSHRASTERSGIXPROC glFlushRasterSGIX;
PFNGLFOGFUNCSGISPROC glFogFuncSGIS;
PFNGLGETFOGFUNCSGISPROC glGetFogFuncSGIS;
PFNGLIMAGETRANSFORMPARAMETERIHPPROC glImageTransformParameteriHP;
PFNGLIMAGETRANSFORMPARAMETERFHPPROC glImageTransformParameterfHP;
PFNGLIMAGETRANSFORMPARAMETERIVHPPROC glImageTransformParameterivHP;
PFNGLIMAGETRANSFORMPARAMETERFVHPPROC glImageTransformParameterfvHP;
PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC glGetImageTransformParameterivHP;
PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC glGetImageTransformParameterfvHP;
PFNGLCOLORSUBTABLEEXTPROC glColorSubTableEXT;
PFNGLCOPYCOLORSUBTABLEEXTPROC glCopyColorSubTableEXT;
PFNGLHINTPGIPROC glHintPGI;
PFNGLCOLORTABLEEXTPROC glColorTableEXT;
PFNGLGETCOLORTABLEEXTPROC glGetColorTableEXT;
PFNGLGETCOLORTABLEPARAMETERIVEXTPROC glGetColorTableParameterivEXT;
PFNGLGETCOLORTABLEPARAMETERFVEXTPROC glGetColorTableParameterfvEXT;
PFNGLGETLISTPARAMETERFVSGIXPROC glGetListParameterfvSGIX;
PFNGLGETLISTPARAMETERIVSGIXPROC glGetListParameterivSGIX;
PFNGLLISTPARAMETERFSGIXPROC glListParameterfSGIX;
PFNGLLISTPARAMETERFVSGIXPROC glListParameterfvSGIX;
PFNGLLISTPARAMETERISGIXPROC glListParameteriSGIX;
PFNGLLISTPARAMETERIVSGIXPROC glListParameterivSGIX;
PFNGLINDEXMATERIALEXTPROC glIndexMaterialEXT;
PFNGLINDEXFUNCEXTPROC glIndexFuncEXT;
PFNGLLOCKARRAYSEXTPROC glLockArraysEXT;
PFNGLUNLOCKARRAYSEXTPROC glUnlockArraysEXT;
PFNGLCULLPARAMETERDVEXTPROC glCullParameterdvEXT;
PFNGLCULLPARAMETERFVEXTPROC glCullParameterfvEXT;
PFNGLFRAGMENTCOLORMATERIALSGIXPROC glFragmentColorMaterialSGIX;
PFNGLFRAGMENTLIGHTFSGIXPROC glFragmentLightfSGIX;
PFNGLFRAGMENTLIGHTFVSGIXPROC glFragmentLightfvSGIX;
PFNGLFRAGMENTLIGHTISGIXPROC glFragmentLightiSGIX;
PFNGLFRAGMENTLIGHTIVSGIXPROC glFragmentLightivSGIX;
PFNGLFRAGMENTLIGHTMODELFSGIXPROC glFragmentLightModelfSGIX;
PFNGLFRAGMENTLIGHTMODELFVSGIXPROC glFragmentLightModelfvSGIX;
PFNGLFRAGMENTLIGHTMODELISGIXPROC glFragmentLightModeliSGIX;
PFNGLFRAGMENTLIGHTMODELIVSGIXPROC glFragmentLightModelivSGIX;
PFNGLFRAGMENTMATERIALFSGIXPROC glFragmentMaterialfSGIX;
PFNGLFRAGMENTMATERIALFVSGIXPROC glFragmentMaterialfvSGIX;
PFNGLFRAGMENTMATERIALISGIXPROC glFragmentMaterialiSGIX;
PFNGLFRAGMENTMATERIALIVSGIXPROC glFragmentMaterialivSGIX;
PFNGLGETFRAGMENTLIGHTFVSGIXPROC glGetFragmentLightfvSGIX;
PFNGLGETFRAGMENTLIGHTIVSGIXPROC glGetFragmentLightivSGIX;
PFNGLGETFRAGMENTMATERIALFVSGIXPROC glGetFragmentMaterialfvSGIX;
PFNGLGETFRAGMENTMATERIALIVSGIXPROC glGetFragmentMaterialivSGIX;
PFNGLLIGHTENVISGIXPROC glLightEnviSGIX;
PFNGLDRAWRANGEELEMENTSEXTPROC glDrawRangeElementsEXT;
PFNGLAPPLYTEXTUREEXTPROC glApplyTextureEXT;
PFNGLTEXTURELIGHTEXTPROC glTextureLightEXT;
PFNGLTEXTUREMATERIALEXTPROC glTextureMaterialEXT;
PFNGLASYNCMARKERSGIXPROC glAsyncMarkerSGIX;
PFNGLFINISHASYNCSGIXPROC glFinishAsyncSGIX;
PFNGLPOLLASYNCSGIXPROC glPollAsyncSGIX;
PFNGLGENASYNCMARKERSSGIXPROC glGenAsyncMarkersSGIX;
PFNGLDELETEASYNCMARKERSSGIXPROC glDeleteAsyncMarkersSGIX;
PFNGLISASYNCMARKERSGIXPROC glIsAsyncMarkerSGIX;
PFNGLVERTEXPOINTERVINTELPROC glVertexPointervINTEL;
PFNGLNORMALPOINTERVINTELPROC glNormalPointervINTEL;
PFNGLCOLORPOINTERVINTELPROC glColorPointervINTEL;
PFNGLTEXCOORDPOINTERVINTELPROC glTexCoordPointervINTEL;
PFNGLPIXELTRANSFORMPARAMETERIEXTPROC glPixelTransformParameteriEXT;
PFNGLPIXELTRANSFORMPARAMETERFEXTPROC glPixelTransformParameterfEXT;
PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC glPixelTransformParameterivEXT;
PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC glPixelTransformParameterfvEXT;
PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC glGetPixelTransformParameterivEXT;
PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC glGetPixelTransformParameterfvEXT;
PFNGLSECONDARYCOLOR3BEXTPROC glSecondaryColor3bEXT;
PFNGLSECONDARYCOLOR3BVEXTPROC glSecondaryColor3bvEXT;
PFNGLSECONDARYCOLOR3DEXTPROC glSecondaryColor3dEXT;
PFNGLSECONDARYCOLOR3DVEXTPROC glSecondaryColor3dvEXT;
PFNGLSECONDARYCOLOR3FEXTPROC glSecondaryColor3fEXT;
PFNGLSECONDARYCOLOR3FVEXTPROC glSecondaryColor3fvEXT;
PFNGLSECONDARYCOLOR3IEXTPROC glSecondaryColor3iEXT;
PFNGLSECONDARYCOLOR3IVEXTPROC glSecondaryColor3ivEXT;
PFNGLSECONDARYCOLOR3SEXTPROC glSecondaryColor3sEXT;
PFNGLSECONDARYCOLOR3SVEXTPROC glSecondaryColor3svEXT;
PFNGLSECONDARYCOLOR3UBEXTPROC glSecondaryColor3ubEXT;
PFNGLSECONDARYCOLOR3UBVEXTPROC glSecondaryColor3ubvEXT;
PFNGLSECONDARYCOLOR3UIEXTPROC glSecondaryColor3uiEXT;
PFNGLSECONDARYCOLOR3UIVEXTPROC glSecondaryColor3uivEXT;
PFNGLSECONDARYCOLOR3USEXTPROC glSecondaryColor3usEXT;
PFNGLSECONDARYCOLOR3USVEXTPROC glSecondaryColor3usvEXT;
PFNGLSECONDARYCOLORPOINTEREXTPROC glSecondaryColorPointerEXT;
PFNGLTEXTURENORMALEXTPROC glTextureNormalEXT;
PFNGLMULTIDRAWARRAYSEXTPROC glMultiDrawArraysEXT;
PFNGLMULTIDRAWELEMENTSEXTPROC glMultiDrawElementsEXT;
PFNGLFOGCOORDFEXTPROC glFogCoordfEXT;
PFNGLFOGCOORDFVEXTPROC glFogCoordfvEXT;
PFNGLFOGCOORDDEXTPROC glFogCoorddEXT;
PFNGLFOGCOORDDVEXTPROC glFogCoorddvEXT;
PFNGLFOGCOORDPOINTEREXTPROC glFogCoordPointerEXT;
PFNGLTANGENT3BEXTPROC glTangent3bEXT;
PFNGLTANGENT3BVEXTPROC glTangent3bvEXT;
PFNGLTANGENT3DEXTPROC glTangent3dEXT;
PFNGLTANGENT3DVEXTPROC glTangent3dvEXT;
PFNGLTANGENT3FEXTPROC glTangent3fEXT;
PFNGLTANGENT3FVEXTPROC glTangent3fvEXT;
PFNGLTANGENT3IEXTPROC glTangent3iEXT;
PFNGLTANGENT3IVEXTPROC glTangent3ivEXT;
PFNGLTANGENT3SEXTPROC glTangent3sEXT;
PFNGLTANGENT3SVEXTPROC glTangent3svEXT;
PFNGLBINORMAL3BEXTPROC glBinormal3bEXT;
PFNGLBINORMAL3BVEXTPROC glBinormal3bvEXT;
PFNGLBINORMAL3DEXTPROC glBinormal3dEXT;
PFNGLBINORMAL3DVEXTPROC glBinormal3dvEXT;
PFNGLBINORMAL3FEXTPROC glBinormal3fEXT;
PFNGLBINORMAL3FVEXTPROC glBinormal3fvEXT;
PFNGLBINORMAL3IEXTPROC glBinormal3iEXT;
PFNGLBINORMAL3IVEXTPROC glBinormal3ivEXT;
PFNGLBINORMAL3SEXTPROC glBinormal3sEXT;
PFNGLBINORMAL3SVEXTPROC glBinormal3svEXT;
PFNGLTANGENTPOINTEREXTPROC glTangentPointerEXT;
PFNGLBINORMALPOINTEREXTPROC glBinormalPointerEXT;
PFNGLFINISHTEXTURESUNXPROC glFinishTextureSUNX;
PFNGLGLOBALALPHAFACTORBSUNPROC glGlobalAlphaFactorbSUN;
PFNGLGLOBALALPHAFACTORSSUNPROC glGlobalAlphaFactorsSUN;
PFNGLGLOBALALPHAFACTORISUNPROC glGlobalAlphaFactoriSUN;
PFNGLGLOBALALPHAFACTORFSUNPROC glGlobalAlphaFactorfSUN;
PFNGLGLOBALALPHAFACTORDSUNPROC glGlobalAlphaFactordSUN;
PFNGLGLOBALALPHAFACTORUBSUNPROC glGlobalAlphaFactorubSUN;
PFNGLGLOBALALPHAFACTORUSSUNPROC glGlobalAlphaFactorusSUN;
PFNGLGLOBALALPHAFACTORUISUNPROC glGlobalAlphaFactoruiSUN;
PFNGLREPLACEMENTCODEUISUNPROC glReplacementCodeuiSUN;
PFNGLREPLACEMENTCODEUSSUNPROC glReplacementCodeusSUN;
PFNGLREPLACEMENTCODEUBSUNPROC glReplacementCodeubSUN;
PFNGLREPLACEMENTCODEUIVSUNPROC glReplacementCodeuivSUN;
PFNGLREPLACEMENTCODEUSVSUNPROC glReplacementCodeusvSUN;
PFNGLREPLACEMENTCODEUBVSUNPROC glReplacementCodeubvSUN;
PFNGLREPLACEMENTCODEPOINTERSUNPROC glReplacementCodePointerSUN;
PFNGLCOLOR4UBVERTEX2FSUNPROC glColor4ubVertex2fSUN;
PFNGLCOLOR4UBVERTEX2FVSUNPROC glColor4ubVertex2fvSUN;
PFNGLCOLOR4UBVERTEX3FSUNPROC glColor4ubVertex3fSUN;
PFNGLCOLOR4UBVERTEX3FVSUNPROC glColor4ubVertex3fvSUN;
PFNGLCOLOR3FVERTEX3FSUNPROC glColor3fVertex3fSUN;
PFNGLCOLOR3FVERTEX3FVSUNPROC glColor3fVertex3fvSUN;
PFNGLNORMAL3FVERTEX3FSUNPROC glNormal3fVertex3fSUN;
PFNGLNORMAL3FVERTEX3FVSUNPROC glNormal3fVertex3fvSUN;
PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC glColor4fNormal3fVertex3fSUN;
PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC glColor4fNormal3fVertex3fvSUN;
PFNGLTEXCOORD2FVERTEX3FSUNPROC glTexCoord2fVertex3fSUN;
PFNGLTEXCOORD2FVERTEX3FVSUNPROC glTexCoord2fVertex3fvSUN;
PFNGLTEXCOORD4FVERTEX4FSUNPROC glTexCoord4fVertex4fSUN;
PFNGLTEXCOORD4FVERTEX4FVSUNPROC glTexCoord4fVertex4fvSUN;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC glTexCoord2fColor4ubVertex3fSUN;
PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC glTexCoord2fColor4ubVertex3fvSUN;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC glTexCoord2fColor3fVertex3fSUN;
PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC glTexCoord2fColor3fVertex3fvSUN;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC glTexCoord2fNormal3fVertex3fSUN;
PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fNormal3fVertex3fvSUN;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glTexCoord2fColor4fNormal3fVertex3fSUN;
PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glTexCoord2fColor4fNormal3fVertex3fvSUN;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC glTexCoord4fColor4fNormal3fVertex4fSUN;
PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC glTexCoord4fColor4fNormal3fVertex4fvSUN;
PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC glReplacementCodeuiVertex3fSUN;
PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC glReplacementCodeuiVertex3fvSUN;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC glReplacementCodeuiColor4ubVertex3fSUN;
PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC glReplacementCodeuiColor4ubVertex3fvSUN;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC glReplacementCodeuiColor3fVertex3fSUN;
PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC glReplacementCodeuiColor3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC glReplacementCodeuiNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiNormal3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiColor4fNormal3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fVertex3fSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fVertex3fvSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN;
PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN;
PFNGLBLENDFUNCSEPARATEEXTPROC glBlendFuncSeparateEXT;
PFNGLBLENDFUNCSEPARATEINGRPROC glBlendFuncSeparateINGR;
PFNGLVERTEXWEIGHTFEXTPROC glVertexWeightfEXT;
PFNGLVERTEXWEIGHTFVEXTPROC glVertexWeightfvEXT;
PFNGLVERTEXWEIGHTPOINTEREXTPROC glVertexWeightPointerEXT;
PFNGLFLUSHVERTEXARRAYRANGENVPROC glFlushVertexArrayRangeNV;
PFNGLVERTEXARRAYRANGENVPROC glVertexArrayRangeNV;
PFNGLCOMBINERPARAMETERFVNVPROC glCombinerParameterfvNV;
PFNGLCOMBINERPARAMETERFNVPROC glCombinerParameterfNV;
PFNGLCOMBINERPARAMETERIVNVPROC glCombinerParameterivNV;
PFNGLCOMBINERPARAMETERINVPROC glCombinerParameteriNV;
PFNGLCOMBINERINPUTNVPROC glCombinerInputNV;
PFNGLCOMBINEROUTPUTNVPROC glCombinerOutputNV;
PFNGLFINALCOMBINERINPUTNVPROC glFinalCombinerInputNV;
PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC glGetCombinerInputParameterfvNV;
PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC glGetCombinerInputParameterivNV;
PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC glGetCombinerOutputParameterfvNV;
PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC glGetCombinerOutputParameterivNV;
PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC glGetFinalCombinerInputParameterfvNV;
PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC glGetFinalCombinerInputParameterivNV;
PFNGLRESIZEBUFFERSMESAPROC glResizeBuffersMESA;
PFNGLWINDOWPOS2DMESAPROC glWindowPos2dMESA;
PFNGLWINDOWPOS2DVMESAPROC glWindowPos2dvMESA;
PFNGLWINDOWPOS2FMESAPROC glWindowPos2fMESA;
PFNGLWINDOWPOS2FVMESAPROC glWindowPos2fvMESA;
PFNGLWINDOWPOS2IMESAPROC glWindowPos2iMESA;
PFNGLWINDOWPOS2IVMESAPROC glWindowPos2ivMESA;
PFNGLWINDOWPOS2SMESAPROC glWindowPos2sMESA;
PFNGLWINDOWPOS2SVMESAPROC glWindowPos2svMESA;
PFNGLWINDOWPOS3DMESAPROC glWindowPos3dMESA;
PFNGLWINDOWPOS3DVMESAPROC glWindowPos3dvMESA;
PFNGLWINDOWPOS3FMESAPROC glWindowPos3fMESA;
PFNGLWINDOWPOS3FVMESAPROC glWindowPos3fvMESA;
PFNGLWINDOWPOS3IMESAPROC glWindowPos3iMESA;
PFNGLWINDOWPOS3IVMESAPROC glWindowPos3ivMESA;
PFNGLWINDOWPOS3SMESAPROC glWindowPos3sMESA;
PFNGLWINDOWPOS3SVMESAPROC glWindowPos3svMESA;
PFNGLWINDOWPOS4DMESAPROC glWindowPos4dMESA;
PFNGLWINDOWPOS4DVMESAPROC glWindowPos4dvMESA;
PFNGLWINDOWPOS4FMESAPROC glWindowPos4fMESA;
PFNGLWINDOWPOS4FVMESAPROC glWindowPos4fvMESA;
PFNGLWINDOWPOS4IMESAPROC glWindowPos4iMESA;
PFNGLWINDOWPOS4IVMESAPROC glWindowPos4ivMESA;
PFNGLWINDOWPOS4SMESAPROC glWindowPos4sMESA;
PFNGLWINDOWPOS4SVMESAPROC glWindowPos4svMESA;
PFNGLMULTIMODEDRAWARRAYSIBMPROC glMultiModeDrawArraysIBM;
PFNGLMULTIMODEDRAWELEMENTSIBMPROC glMultiModeDrawElementsIBM;
PFNGLCOLORPOINTERLISTIBMPROC glColorPointerListIBM;
PFNGLSECONDARYCOLORPOINTERLISTIBMPROC glSecondaryColorPointerListIBM;
PFNGLEDGEFLAGPOINTERLISTIBMPROC glEdgeFlagPointerListIBM;
PFNGLFOGCOORDPOINTERLISTIBMPROC glFogCoordPointerListIBM;
PFNGLINDEXPOINTERLISTIBMPROC glIndexPointerListIBM;
PFNGLNORMALPOINTERLISTIBMPROC glNormalPointerListIBM;
PFNGLTEXCOORDPOINTERLISTIBMPROC glTexCoordPointerListIBM;
PFNGLVERTEXPOINTERLISTIBMPROC glVertexPointerListIBM;
PFNGLTBUFFERMASK3DFXPROC glTbufferMask3DFX;
PFNGLSAMPLEMASKEXTPROC glSampleMaskEXT;
PFNGLSAMPLEPATTERNEXTPROC glSamplePatternEXT;
PFNGLTEXTURECOLORMASKSGISPROC glTextureColorMaskSGIS;
PFNGLIGLOOINTERFACESGIXPROC glIglooInterfaceSGIX;
PFNGLDELETEFENCESNVPROC glDeleteFencesNV;
PFNGLGENFENCESNVPROC glGenFencesNV;
PFNGLISFENCENVPROC glIsFenceNV;
PFNGLTESTFENCENVPROC glTestFenceNV;
PFNGLGETFENCEIVNVPROC glGetFenceivNV;
PFNGLFINISHFENCENVPROC glFinishFenceNV;
PFNGLSETFENCENVPROC glSetFenceNV;
PFNGLFLUSHSTATICDATAIBMPROC glFlushStaticDataIBM;
PFNGLMAPCONTROLPOINTSNVPROC glMapControlPointsNV;
PFNGLMAPPARAMETERIVNVPROC glMapParameterivNV;
PFNGLMAPPARAMETERFVNVPROC glMapParameterfvNV;
PFNGLGETMAPCONTROLPOINTSNVPROC glGetMapControlPointsNV;
PFNGLGETMAPPARAMETERIVNVPROC glGetMapParameterivNV;
PFNGLGETMAPPARAMETERFVNVPROC glGetMapParameterfvNV;
PFNGLGETMAPATTRIBPARAMETERIVNVPROC glGetMapAttribParameterivNV;
PFNGLGETMAPATTRIBPARAMETERFVNVPROC glGetMapAttribParameterfvNV;
PFNGLEVALMAPSNVPROC glEvalMapsNV;
PFNGLCOMBINERSTAGEPARAMETERFVNVPROC glCombinerStageParameterfvNV;
PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC glGetCombinerStageParameterfvNV;
PFNGLAREPROGRAMSRESIDENTNVPROC glAreProgramsResidentNV;
PFNGLBINDPROGRAMNVPROC glBindProgramNV;
PFNGLDELETEPROGRAMSNVPROC glDeleteProgramsNV;
PFNGLEXECUTEPROGRAMNVPROC glExecuteProgramNV;
PFNGLGENPROGRAMSNVPROC glGenProgramsNV;
PFNGLGETPROGRAMPARAMETERDVNVPROC glGetProgramParameterdvNV;
PFNGLGETPROGRAMPARAMETERFVNVPROC glGetProgramParameterfvNV;
PFNGLGETPROGRAMIVNVPROC glGetProgramivNV;
PFNGLGETPROGRAMSTRINGNVPROC glGetProgramStringNV;
PFNGLGETTRACKMATRIXIVNVPROC glGetTrackMatrixivNV;
PFNGLGETVERTEXATTRIBDVNVPROC glGetVertexAttribdvNV;
PFNGLGETVERTEXATTRIBFVNVPROC glGetVertexAttribfvNV;
PFNGLGETVERTEXATTRIBIVNVPROC glGetVertexAttribivNV;
PFNGLGETVERTEXATTRIBPOINTERVNVPROC glGetVertexAttribPointervNV;
PFNGLISPROGRAMNVPROC glIsProgramNV;
PFNGLLOADPROGRAMNVPROC glLoadProgramNV;
PFNGLPROGRAMPARAMETER4DNVPROC glProgramParameter4dNV;
PFNGLPROGRAMPARAMETER4DVNVPROC glProgramParameter4dvNV;
PFNGLPROGRAMPARAMETER4FNVPROC glProgramParameter4fNV;
PFNGLPROGRAMPARAMETER4FVNVPROC glProgramParameter4fvNV;
PFNGLPROGRAMPARAMETERS4DVNVPROC glProgramParameters4dvNV;
PFNGLPROGRAMPARAMETERS4FVNVPROC glProgramParameters4fvNV;
PFNGLREQUESTRESIDENTPROGRAMSNVPROC glRequestResidentProgramsNV;
PFNGLTRACKMATRIXNVPROC glTrackMatrixNV;
PFNGLVERTEXATTRIBPOINTERNVPROC glVertexAttribPointerNV;
PFNGLVERTEXATTRIB1DNVPROC glVertexAttrib1dNV;
PFNGLVERTEXATTRIB1DVNVPROC glVertexAttrib1dvNV;
PFNGLVERTEXATTRIB1FNVPROC glVertexAttrib1fNV;
PFNGLVERTEXATTRIB1FVNVPROC glVertexAttrib1fvNV;
PFNGLVERTEXATTRIB1SNVPROC glVertexAttrib1sNV;
PFNGLVERTEXATTRIB1SVNVPROC glVertexAttrib1svNV;
PFNGLVERTEXATTRIB2DNVPROC glVertexAttrib2dNV;
PFNGLVERTEXATTRIB2DVNVPROC glVertexAttrib2dvNV;
PFNGLVERTEXATTRIB2FNVPROC glVertexAttrib2fNV;
PFNGLVERTEXATTRIB2FVNVPROC glVertexAttrib2fvNV;
PFNGLVERTEXATTRIB2SNVPROC glVertexAttrib2sNV;
PFNGLVERTEXATTRIB2SVNVPROC glVertexAttrib2svNV;
PFNGLVERTEXATTRIB3DNVPROC glVertexAttrib3dNV;
PFNGLVERTEXATTRIB3DVNVPROC glVertexAttrib3dvNV;
PFNGLVERTEXATTRIB3FNVPROC glVertexAttrib3fNV;
PFNGLVERTEXATTRIB3FVNVPROC glVertexAttrib3fvNV;
PFNGLVERTEXATTRIB3SNVPROC glVertexAttrib3sNV;
PFNGLVERTEXATTRIB3SVNVPROC glVertexAttrib3svNV;
PFNGLVERTEXATTRIB4DNVPROC glVertexAttrib4dNV;
PFNGLVERTEXATTRIB4DVNVPROC glVertexAttrib4dvNV;
PFNGLVERTEXATTRIB4FNVPROC glVertexAttrib4fNV;
PFNGLVERTEXATTRIB4FVNVPROC glVertexAttrib4fvNV;
PFNGLVERTEXATTRIB4SNVPROC glVertexAttrib4sNV;
PFNGLVERTEXATTRIB4SVNVPROC glVertexAttrib4svNV;
PFNGLVERTEXATTRIB4UBNVPROC glVertexAttrib4ubNV;
PFNGLVERTEXATTRIB4UBVNVPROC glVertexAttrib4ubvNV;
PFNGLVERTEXATTRIBS1DVNVPROC glVertexAttribs1dvNV;
PFNGLVERTEXATTRIBS1FVNVPROC glVertexAttribs1fvNV;
PFNGLVERTEXATTRIBS1SVNVPROC glVertexAttribs1svNV;
PFNGLVERTEXATTRIBS2DVNVPROC glVertexAttribs2dvNV;
PFNGLVERTEXATTRIBS2FVNVPROC glVertexAttribs2fvNV;
PFNGLVERTEXATTRIBS2SVNVPROC glVertexAttribs2svNV;
PFNGLVERTEXATTRIBS3DVNVPROC glVertexAttribs3dvNV;
PFNGLVERTEXATTRIBS3FVNVPROC glVertexAttribs3fvNV;
PFNGLVERTEXATTRIBS3SVNVPROC glVertexAttribs3svNV;
PFNGLVERTEXATTRIBS4DVNVPROC glVertexAttribs4dvNV;
PFNGLVERTEXATTRIBS4FVNVPROC glVertexAttribs4fvNV;
PFNGLVERTEXATTRIBS4SVNVPROC glVertexAttribs4svNV;
PFNGLVERTEXATTRIBS4UBVNVPROC glVertexAttribs4ubvNV;
PFNGLTEXBUMPPARAMETERIVATIPROC glTexBumpParameterivATI;
PFNGLTEXBUMPPARAMETERFVATIPROC glTexBumpParameterfvATI;
PFNGLGETTEXBUMPPARAMETERIVATIPROC glGetTexBumpParameterivATI;
PFNGLGETTEXBUMPPARAMETERFVATIPROC glGetTexBumpParameterfvATI;
PFNGLGENFRAGMENTSHADERSATIPROC glGenFragmentShadersATI;
PFNGLBINDFRAGMENTSHADERATIPROC glBindFragmentShaderATI;
PFNGLDELETEFRAGMENTSHADERATIPROC glDeleteFragmentShaderATI;
PFNGLBEGINFRAGMENTSHADERATIPROC glBeginFragmentShaderATI;
PFNGLENDFRAGMENTSHADERATIPROC glEndFragmentShaderATI;
PFNGLPASSTEXCOORDATIPROC glPassTexCoordATI;
PFNGLSAMPLEMAPATIPROC glSampleMapATI;
PFNGLCOLORFRAGMENTOP1ATIPROC glColorFragmentOp1ATI;
PFNGLCOLORFRAGMENTOP2ATIPROC glColorFragmentOp2ATI;
PFNGLCOLORFRAGMENTOP3ATIPROC glColorFragmentOp3ATI;
PFNGLALPHAFRAGMENTOP1ATIPROC glAlphaFragmentOp1ATI;
PFNGLALPHAFRAGMENTOP2ATIPROC glAlphaFragmentOp2ATI;
PFNGLALPHAFRAGMENTOP3ATIPROC glAlphaFragmentOp3ATI;
PFNGLSETFRAGMENTSHADERCONSTANTATIPROC glSetFragmentShaderConstantATI;
PFNGLPNTRIANGLESIATIPROC glPNTrianglesiATI;
PFNGLPNTRIANGLESFATIPROC glPNTrianglesfATI;
PFNGLNEWOBJECTBUFFERATIPROC glNewObjectBufferATI;
PFNGLISOBJECTBUFFERATIPROC glIsObjectBufferATI;
PFNGLUPDATEOBJECTBUFFERATIPROC glUpdateObjectBufferATI;
PFNGLGETOBJECTBUFFERFVATIPROC glGetObjectBufferfvATI;
PFNGLGETOBJECTBUFFERIVATIPROC glGetObjectBufferivATI;
PFNGLFREEOBJECTBUFFERATIPROC glFreeObjectBufferATI;
PFNGLARRAYOBJECTATIPROC glArrayObjectATI;
PFNGLGETARRAYOBJECTFVATIPROC glGetArrayObjectfvATI;
PFNGLGETARRAYOBJECTIVATIPROC glGetArrayObjectivATI;
PFNGLVARIANTARRAYOBJECTATIPROC glVariantArrayObjectATI;
PFNGLGETVARIANTARRAYOBJECTFVATIPROC glGetVariantArrayObjectfvATI;
PFNGLGETVARIANTARRAYOBJECTIVATIPROC glGetVariantArrayObjectivATI;
PFNGLBEGINVERTEXSHADEREXTPROC glBeginVertexShaderEXT;
PFNGLENDVERTEXSHADEREXTPROC glEndVertexShaderEXT;
PFNGLBINDVERTEXSHADEREXTPROC glBindVertexShaderEXT;
PFNGLGENVERTEXSHADERSEXTPROC glGenVertexShadersEXT;
PFNGLDELETEVERTEXSHADEREXTPROC glDeleteVertexShaderEXT;
PFNGLSHADEROP1EXTPROC glShaderOp1EXT;
PFNGLSHADEROP2EXTPROC glShaderOp2EXT;
PFNGLSHADEROP3EXTPROC glShaderOp3EXT;
PFNGLSWIZZLEEXTPROC glSwizzleEXT;
PFNGLWRITEMASKEXTPROC glWriteMaskEXT;
PFNGLINSERTCOMPONENTEXTPROC glInsertComponentEXT;
PFNGLEXTRACTCOMPONENTEXTPROC glExtractComponentEXT;
PFNGLGENSYMBOLSEXTPROC glGenSymbolsEXT;
PFNGLSETINVARIANTEXTPROC glSetInvariantEXT;
PFNGLSETLOCALCONSTANTEXTPROC glSetLocalConstantEXT;
PFNGLVARIANTBVEXTPROC glVariantbvEXT;
PFNGLVARIANTSVEXTPROC glVariantsvEXT;
PFNGLVARIANTIVEXTPROC glVariantivEXT;
PFNGLVARIANTFVEXTPROC glVariantfvEXT;
PFNGLVARIANTDVEXTPROC glVariantdvEXT;
PFNGLVARIANTUBVEXTPROC glVariantubvEXT;
PFNGLVARIANTUSVEXTPROC glVariantusvEXT;
PFNGLVARIANTUIVEXTPROC glVariantuivEXT;
PFNGLVARIANTPOINTEREXTPROC glVariantPointerEXT;
PFNGLENABLEVARIANTCLIENTSTATEEXTPROC glEnableVariantClientStateEXT;
PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC glDisableVariantClientStateEXT;
PFNGLBINDLIGHTPARAMETEREXTPROC glBindLightParameterEXT;
PFNGLBINDMATERIALPARAMETEREXTPROC glBindMaterialParameterEXT;
PFNGLBINDTEXGENPARAMETEREXTPROC glBindTexGenParameterEXT;
PFNGLBINDTEXTUREUNITPARAMETEREXTPROC glBindTextureUnitParameterEXT;
PFNGLBINDPARAMETEREXTPROC glBindParameterEXT;
PFNGLISVARIANTENABLEDEXTPROC glIsVariantEnabledEXT;
PFNGLGETVARIANTBOOLEANVEXTPROC glGetVariantBooleanvEXT;
PFNGLGETVARIANTINTEGERVEXTPROC glGetVariantIntegervEXT;
PFNGLGETVARIANTFLOATVEXTPROC glGetVariantFloatvEXT;
PFNGLGETVARIANTPOINTERVEXTPROC glGetVariantPointervEXT;
PFNGLGETINVARIANTBOOLEANVEXTPROC glGetInvariantBooleanvEXT;
PFNGLGETINVARIANTINTEGERVEXTPROC glGetInvariantIntegervEXT;
PFNGLGETINVARIANTFLOATVEXTPROC glGetInvariantFloatvEXT;
PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC glGetLocalConstantBooleanvEXT;
PFNGLGETLOCALCONSTANTINTEGERVEXTPROC glGetLocalConstantIntegervEXT;
PFNGLGETLOCALCONSTANTFLOATVEXTPROC glGetLocalConstantFloatvEXT;
PFNGLVERTEXSTREAM1SATIPROC glVertexStream1sATI;
PFNGLVERTEXSTREAM1SVATIPROC glVertexStream1svATI;
PFNGLVERTEXSTREAM1IATIPROC glVertexStream1iATI;
PFNGLVERTEXSTREAM1IVATIPROC glVertexStream1ivATI;
PFNGLVERTEXSTREAM1FATIPROC glVertexStream1fATI;
PFNGLVERTEXSTREAM1FVATIPROC glVertexStream1fvATI;
PFNGLVERTEXSTREAM1DATIPROC glVertexStream1dATI;
PFNGLVERTEXSTREAM1DVATIPROC glVertexStream1dvATI;
PFNGLVERTEXSTREAM2SATIPROC glVertexStream2sATI;
PFNGLVERTEXSTREAM2SVATIPROC glVertexStream2svATI;
PFNGLVERTEXSTREAM2IATIPROC glVertexStream2iATI;
PFNGLVERTEXSTREAM2IVATIPROC glVertexStream2ivATI;
PFNGLVERTEXSTREAM2FATIPROC glVertexStream2fATI;
PFNGLVERTEXSTREAM2FVATIPROC glVertexStream2fvATI;
PFNGLVERTEXSTREAM2DATIPROC glVertexStream2dATI;
PFNGLVERTEXSTREAM2DVATIPROC glVertexStream2dvATI;
PFNGLVERTEXSTREAM3SATIPROC glVertexStream3sATI;
PFNGLVERTEXSTREAM3SVATIPROC glVertexStream3svATI;
PFNGLVERTEXSTREAM3IATIPROC glVertexStream3iATI;
PFNGLVERTEXSTREAM3IVATIPROC glVertexStream3ivATI;
PFNGLVERTEXSTREAM3FATIPROC glVertexStream3fATI;
PFNGLVERTEXSTREAM3FVATIPROC glVertexStream3fvATI;
PFNGLVERTEXSTREAM3DATIPROC glVertexStream3dATI;
PFNGLVERTEXSTREAM3DVATIPROC glVertexStream3dvATI;
PFNGLVERTEXSTREAM4SATIPROC glVertexStream4sATI;
PFNGLVERTEXSTREAM4SVATIPROC glVertexStream4svATI;
PFNGLVERTEXSTREAM4IATIPROC glVertexStream4iATI;
PFNGLVERTEXSTREAM4IVATIPROC glVertexStream4ivATI;
PFNGLVERTEXSTREAM4FATIPROC glVertexStream4fATI;
PFNGLVERTEXSTREAM4FVATIPROC glVertexStream4fvATI;
PFNGLVERTEXSTREAM4DATIPROC glVertexStream4dATI;
PFNGLVERTEXSTREAM4DVATIPROC glVertexStream4dvATI;
PFNGLNORMALSTREAM3BATIPROC glNormalStream3bATI;
PFNGLNORMALSTREAM3BVATIPROC glNormalStream3bvATI;
PFNGLNORMALSTREAM3SATIPROC glNormalStream3sATI;
PFNGLNORMALSTREAM3SVATIPROC glNormalStream3svATI;
PFNGLNORMALSTREAM3IATIPROC glNormalStream3iATI;
PFNGLNORMALSTREAM3IVATIPROC glNormalStream3ivATI;
PFNGLNORMALSTREAM3FATIPROC glNormalStream3fATI;
PFNGLNORMALSTREAM3FVATIPROC glNormalStream3fvATI;
PFNGLNORMALSTREAM3DATIPROC glNormalStream3dATI;
PFNGLNORMALSTREAM3DVATIPROC glNormalStream3dvATI;
PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC glClientActiveVertexStreamATI;
PFNGLVERTEXBLENDENVIATIPROC glVertexBlendEnviATI;
PFNGLVERTEXBLENDENVFATIPROC glVertexBlendEnvfATI;
PFNGLELEMENTPOINTERATIPROC glElementPointerATI;
PFNGLDRAWELEMENTARRAYATIPROC glDrawElementArrayATI;
PFNGLDRAWRANGEELEMENTARRAYATIPROC glDrawRangeElementArrayATI;
PFNGLDRAWMESHARRAYSSUNPROC glDrawMeshArraysSUN;
PFNGLGENOCCLUSIONQUERIESNVPROC glGenOcclusionQueriesNV;
PFNGLDELETEOCCLUSIONQUERIESNVPROC glDeleteOcclusionQueriesNV;
PFNGLISOCCLUSIONQUERYNVPROC glIsOcclusionQueryNV;
PFNGLBEGINOCCLUSIONQUERYNVPROC glBeginOcclusionQueryNV;
PFNGLENDOCCLUSIONQUERYNVPROC glEndOcclusionQueryNV;
PFNGLGETOCCLUSIONQUERYIVNVPROC glGetOcclusionQueryivNV;
PFNGLGETOCCLUSIONQUERYUIVNVPROC glGetOcclusionQueryuivNV;
PFNGLPOINTPARAMETERINVPROC glPointParameteriNV;
PFNGLPOINTPARAMETERIVNVPROC glPointParameterivNV;
PFNGLACTIVESTENCILFACEEXTPROC glActiveStencilFaceEXT;
PFNGLELEMENTPOINTERAPPLEPROC glElementPointerAPPLE;
PFNGLDRAWELEMENTARRAYAPPLEPROC glDrawElementArrayAPPLE;
PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC glDrawRangeElementArrayAPPLE;
PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC glMultiDrawElementArrayAPPLE;
PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC glMultiDrawRangeElementArrayAPPLE;
PFNGLGENFENCESAPPLEPROC glGenFencesAPPLE;
PFNGLDELETEFENCESAPPLEPROC glDeleteFencesAPPLE;
PFNGLSETFENCEAPPLEPROC glSetFenceAPPLE;
PFNGLISFENCEAPPLEPROC glIsFenceAPPLE;
PFNGLTESTFENCEAPPLEPROC glTestFenceAPPLE;
PFNGLFINISHFENCEAPPLEPROC glFinishFenceAPPLE;
PFNGLTESTOBJECTAPPLEPROC glTestObjectAPPLE;
PFNGLFINISHOBJECTAPPLEPROC glFinishObjectAPPLE;
PFNGLBINDVERTEXARRAYAPPLEPROC glBindVertexArrayAPPLE;
PFNGLDELETEVERTEXARRAYSAPPLEPROC glDeleteVertexArraysAPPLE;
PFNGLGENVERTEXARRAYSAPPLEPROC glGenVertexArraysAPPLE;
PFNGLISVERTEXARRAYAPPLEPROC glIsVertexArrayAPPLE;
PFNGLVERTEXARRAYRANGEAPPLEPROC glVertexArrayRangeAPPLE;
PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC glFlushVertexArrayRangeAPPLE;
PFNGLVERTEXARRAYPARAMETERIAPPLEPROC glVertexArrayParameteriAPPLE;
PFNGLDRAWBUFFERSATIPROC glDrawBuffersATI;
PFNGLPROGRAMNAMEDPARAMETER4FNVPROC glProgramNamedParameter4fNV;
PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC glProgramNamedParameter4fvNV;
PFNGLPROGRAMNAMEDPARAMETER4DNVPROC glProgramNamedParameter4dNV;
PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC glProgramNamedParameter4dvNV;
PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC glGetProgramNamedParameterfvNV;
PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC glGetProgramNamedParameterdvNV;
PFNGLVERTEX2HNVPROC glVertex2hNV;
PFNGLVERTEX2HVNVPROC glVertex2hvNV;
PFNGLVERTEX3HNVPROC glVertex3hNV;
PFNGLVERTEX3HVNVPROC glVertex3hvNV;
PFNGLVERTEX4HNVPROC glVertex4hNV;
PFNGLVERTEX4HVNVPROC glVertex4hvNV;
PFNGLNORMAL3HNVPROC glNormal3hNV;
PFNGLNORMAL3HVNVPROC glNormal3hvNV;
PFNGLCOLOR3HNVPROC glColor3hNV;
PFNGLCOLOR3HVNVPROC glColor3hvNV;
PFNGLCOLOR4HNVPROC glColor4hNV;
PFNGLCOLOR4HVNVPROC glColor4hvNV;
PFNGLTEXCOORD1HNVPROC glTexCoord1hNV;
PFNGLTEXCOORD1HVNVPROC glTexCoord1hvNV;
PFNGLTEXCOORD2HNVPROC glTexCoord2hNV;
PFNGLTEXCOORD2HVNVPROC glTexCoord2hvNV;
PFNGLTEXCOORD3HNVPROC glTexCoord3hNV;
PFNGLTEXCOORD3HVNVPROC glTexCoord3hvNV;
PFNGLTEXCOORD4HNVPROC glTexCoord4hNV;
PFNGLTEXCOORD4HVNVPROC glTexCoord4hvNV;
PFNGLMULTITEXCOORD1HNVPROC glMultiTexCoord1hNV;
PFNGLMULTITEXCOORD1HVNVPROC glMultiTexCoord1hvNV;
PFNGLMULTITEXCOORD2HNVPROC glMultiTexCoord2hNV;
PFNGLMULTITEXCOORD2HVNVPROC glMultiTexCoord2hvNV;
PFNGLMULTITEXCOORD3HNVPROC glMultiTexCoord3hNV;
PFNGLMULTITEXCOORD3HVNVPROC glMultiTexCoord3hvNV;
PFNGLMULTITEXCOORD4HNVPROC glMultiTexCoord4hNV;
PFNGLMULTITEXCOORD4HVNVPROC glMultiTexCoord4hvNV;
PFNGLFOGCOORDHNVPROC glFogCoordhNV;
PFNGLFOGCOORDHVNVPROC glFogCoordhvNV;
PFNGLSECONDARYCOLOR3HNVPROC glSecondaryColor3hNV;
PFNGLSECONDARYCOLOR3HVNVPROC glSecondaryColor3hvNV;
PFNGLVERTEXWEIGHTHNVPROC glVertexWeighthNV;
PFNGLVERTEXWEIGHTHVNVPROC glVertexWeighthvNV;
PFNGLVERTEXATTRIB1HNVPROC glVertexAttrib1hNV;
PFNGLVERTEXATTRIB1HVNVPROC glVertexAttrib1hvNV;
PFNGLVERTEXATTRIB2HNVPROC glVertexAttrib2hNV;
PFNGLVERTEXATTRIB2HVNVPROC glVertexAttrib2hvNV;
PFNGLVERTEXATTRIB3HNVPROC glVertexAttrib3hNV;
PFNGLVERTEXATTRIB3HVNVPROC glVertexAttrib3hvNV;
PFNGLVERTEXATTRIB4HNVPROC glVertexAttrib4hNV;
PFNGLVERTEXATTRIB4HVNVPROC glVertexAttrib4hvNV;
PFNGLVERTEXATTRIBS1HVNVPROC glVertexAttribs1hvNV;
PFNGLVERTEXATTRIBS2HVNVPROC glVertexAttribs2hvNV;
PFNGLVERTEXATTRIBS3HVNVPROC glVertexAttribs3hvNV;
PFNGLVERTEXATTRIBS4HVNVPROC glVertexAttribs4hvNV;
PFNGLPIXELDATARANGENVPROC glPixelDataRangeNV;
PFNGLFLUSHPIXELDATARANGENVPROC glFlushPixelDataRangeNV;
PFNGLPRIMITIVERESTARTNVPROC glPrimitiveRestartNV;
PFNGLPRIMITIVERESTARTINDEXNVPROC glPrimitiveRestartIndexNV;
PFNGLMAPOBJECTBUFFERATIPROC glMapObjectBufferATI;
PFNGLUNMAPOBJECTBUFFERATIPROC glUnmapObjectBufferATI;
PFNGLSTENCILOPSEPARATEATIPROC glStencilOpSeparateATI;
PFNGLSTENCILFUNCSEPARATEATIPROC glStencilFuncSeparateATI;
PFNGLVERTEXATTRIBARRAYOBJECTATIPROC glVertexAttribArrayObjectATI;
PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC glGetVertexAttribArrayObjectfvATI;
PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC glGetVertexAttribArrayObjectivATI;
PFNGLMULTITEXCOORD1BOESPROC glMultiTexCoord1bOES;
PFNGLMULTITEXCOORD1BVOESPROC glMultiTexCoord1bvOES;
PFNGLMULTITEXCOORD2BOESPROC glMultiTexCoord2bOES;
PFNGLMULTITEXCOORD2BVOESPROC glMultiTexCoord2bvOES;
PFNGLMULTITEXCOORD3BOESPROC glMultiTexCoord3bOES;
PFNGLMULTITEXCOORD3BVOESPROC glMultiTexCoord3bvOES;
PFNGLMULTITEXCOORD4BOESPROC glMultiTexCoord4bOES;
PFNGLMULTITEXCOORD4BVOESPROC glMultiTexCoord4bvOES;
PFNGLTEXCOORD1BOESPROC glTexCoord1bOES;
PFNGLTEXCOORD1BVOESPROC glTexCoord1bvOES;
PFNGLTEXCOORD2BOESPROC glTexCoord2bOES;
PFNGLTEXCOORD2BVOESPROC glTexCoord2bvOES;
PFNGLTEXCOORD3BOESPROC glTexCoord3bOES;
PFNGLTEXCOORD3BVOESPROC glTexCoord3bvOES;
PFNGLTEXCOORD4BOESPROC glTexCoord4bOES;
PFNGLTEXCOORD4BVOESPROC glTexCoord4bvOES;
PFNGLVERTEX2BOESPROC glVertex2bOES;
PFNGLVERTEX2BVOESPROC glVertex2bvOES;
PFNGLVERTEX3BOESPROC glVertex3bOES;
PFNGLVERTEX3BVOESPROC glVertex3bvOES;
PFNGLVERTEX4BOESPROC glVertex4bOES;
PFNGLVERTEX4BVOESPROC glVertex4bvOES;
PFNGLACCUMXOESPROC glAccumxOES;
PFNGLALPHAFUNCXOESPROC glAlphaFuncxOES;
PFNGLBITMAPXOESPROC glBitmapxOES;
PFNGLBLENDCOLORXOESPROC glBlendColorxOES;
PFNGLCLEARACCUMXOESPROC glClearAccumxOES;
PFNGLCLEARCOLORXOESPROC glClearColorxOES;
PFNGLCLEARDEPTHXOESPROC glClearDepthxOES;
PFNGLCLIPPLANEXOESPROC glClipPlanexOES;
PFNGLCOLOR3XOESPROC glColor3xOES;
PFNGLCOLOR4XOESPROC glColor4xOES;
PFNGLCOLOR3XVOESPROC glColor3xvOES;
PFNGLCOLOR4XVOESPROC glColor4xvOES;
PFNGLCONVOLUTIONPARAMETERXOESPROC glConvolutionParameterxOES;
PFNGLCONVOLUTIONPARAMETERXVOESPROC glConvolutionParameterxvOES;
PFNGLDEPTHRANGEXOESPROC glDepthRangexOES;
PFNGLEVALCOORD1XOESPROC glEvalCoord1xOES;
PFNGLEVALCOORD2XOESPROC glEvalCoord2xOES;
PFNGLEVALCOORD1XVOESPROC glEvalCoord1xvOES;
PFNGLEVALCOORD2XVOESPROC glEvalCoord2xvOES;
PFNGLFEEDBACKBUFFERXOESPROC glFeedbackBufferxOES;
PFNGLFOGXOESPROC glFogxOES;
PFNGLFOGXVOESPROC glFogxvOES;
PFNGLFRUSTUMXOESPROC glFrustumxOES;
PFNGLGETCLIPPLANEXOESPROC glGetClipPlanexOES;
PFNGLGETCONVOLUTIONPARAMETERXVOESPROC glGetConvolutionParameterxvOES;
PFNGLGETFIXEDVOESPROC glGetFixedvOES;
PFNGLGETHISTOGRAMPARAMETERXVOESPROC glGetHistogramParameterxvOES;
PFNGLGETLIGHTXOESPROC glGetLightxOES;
PFNGLGETMAPXVOESPROC glGetMapxvOES;
PFNGLGETMATERIALXOESPROC glGetMaterialxOES;
PFNGLGETPIXELMAPXVPROC glGetPixelMapxv;
PFNGLGETTEXENVXVOESPROC glGetTexEnvxvOES;
PFNGLGETTEXGENXVOESPROC glGetTexGenxvOES;
PFNGLGETTEXLEVELPARAMETERXVOESPROC glGetTexLevelParameterxvOES;
PFNGLGETTEXPARAMETERXVOESPROC glGetTexParameterxvOES;
PFNGLINDEXXOESPROC glIndexxOES;
PFNGLINDEXXVOESPROC glIndexxvOES;
PFNGLLIGHTMODELXOESPROC glLightModelxOES;
PFNGLLIGHTMODELXVOESPROC glLightModelxvOES;
PFNGLLIGHTXOESPROC glLightxOES;
PFNGLLIGHTXVOESPROC glLightxvOES;
PFNGLLINEWIDTHXOESPROC glLineWidthxOES;
PFNGLLOADMATRIXXOESPROC glLoadMatrixxOES;
PFNGLLOADTRANSPOSEMATRIXXOESPROC glLoadTransposeMatrixxOES;
PFNGLMAP1XOESPROC glMap1xOES;
PFNGLMAP2XOESPROC glMap2xOES;
PFNGLMAPGRID1XOESPROC glMapGrid1xOES;
PFNGLMAPGRID2XOESPROC glMapGrid2xOES;
PFNGLMATERIALXOESPROC glMaterialxOES;
PFNGLMATERIALXVOESPROC glMaterialxvOES;
PFNGLMULTMATRIXXOESPROC glMultMatrixxOES;
PFNGLMULTTRANSPOSEMATRIXXOESPROC glMultTransposeMatrixxOES;
PFNGLMULTITEXCOORD1XOESPROC glMultiTexCoord1xOES;
PFNGLMULTITEXCOORD2XOESPROC glMultiTexCoord2xOES;
PFNGLMULTITEXCOORD3XOESPROC glMultiTexCoord3xOES;
PFNGLMULTITEXCOORD4XOESPROC glMultiTexCoord4xOES;
PFNGLMULTITEXCOORD1XVOESPROC glMultiTexCoord1xvOES;
PFNGLMULTITEXCOORD2XVOESPROC glMultiTexCoord2xvOES;
PFNGLMULTITEXCOORD3XVOESPROC glMultiTexCoord3xvOES;
PFNGLMULTITEXCOORD4XVOESPROC glMultiTexCoord4xvOES;
PFNGLNORMAL3XOESPROC glNormal3xOES;
PFNGLNORMAL3XVOESPROC glNormal3xvOES;
PFNGLORTHOXOESPROC glOrthoxOES;
PFNGLPASSTHROUGHXOESPROC glPassThroughxOES;
PFNGLPIXELMAPXPROC glPixelMapx;
PFNGLPIXELSTOREXPROC glPixelStorex;
PFNGLPIXELTRANSFERXOESPROC glPixelTransferxOES;
PFNGLPIXELZOOMXOESPROC glPixelZoomxOES;
PFNGLPOINTPARAMETERXVOESPROC glPointParameterxvOES;
PFNGLPOINTSIZEXOESPROC glPointSizexOES;
PFNGLPOLYGONOFFSETXOESPROC glPolygonOffsetxOES;
PFNGLPRIORITIZETEXTURESXOESPROC glPrioritizeTexturesxOES;
PFNGLRASTERPOS2XOESPROC glRasterPos2xOES;
PFNGLRASTERPOS3XOESPROC glRasterPos3xOES;
PFNGLRASTERPOS4XOESPROC glRasterPos4xOES;
PFNGLRASTERPOS2XVOESPROC glRasterPos2xvOES;
PFNGLRASTERPOS3XVOESPROC glRasterPos3xvOES;
PFNGLRASTERPOS4XVOESPROC glRasterPos4xvOES;
PFNGLRECTXOESPROC glRectxOES;
PFNGLRECTXVOESPROC glRectxvOES;
PFNGLROTATEXOESPROC glRotatexOES;
PFNGLSAMPLECOVERAGEOESPROC glSampleCoverageOES;
PFNGLSCALEXOESPROC glScalexOES;
PFNGLTEXCOORD1XOESPROC glTexCoord1xOES;
PFNGLTEXCOORD2XOESPROC glTexCoord2xOES;
PFNGLTEXCOORD3XOESPROC glTexCoord3xOES;
PFNGLTEXCOORD4XOESPROC glTexCoord4xOES;
PFNGLTEXCOORD1XVOESPROC glTexCoord1xvOES;
PFNGLTEXCOORD2XVOESPROC glTexCoord2xvOES;
PFNGLTEXCOORD3XVOESPROC glTexCoord3xvOES;
PFNGLTEXCOORD4XVOESPROC glTexCoord4xvOES;
PFNGLTEXENVXOESPROC glTexEnvxOES;
PFNGLTEXENVXVOESPROC glTexEnvxvOES;
PFNGLTEXGENXOESPROC glTexGenxOES;
PFNGLTEXGENXVOESPROC glTexGenxvOES;
PFNGLTEXPARAMETERXOESPROC glTexParameterxOES;
PFNGLTEXPARAMETERXVOESPROC glTexParameterxvOES;
PFNGLTRANSLATEXOESPROC glTranslatexOES;
PFNGLVERTEX2XOESPROC glVertex2xOES;
PFNGLVERTEX3XOESPROC glVertex3xOES;
PFNGLVERTEX4XOESPROC glVertex4xOES;
PFNGLVERTEX2XVOESPROC glVertex2xvOES;
PFNGLVERTEX3XVOESPROC glVertex3xvOES;
PFNGLVERTEX4XVOESPROC glVertex4xvOES;
PFNGLDEPTHRANGEFOESPROC glDepthRangefOES;
PFNGLFRUSTUMFOESPROC glFrustumfOES;
PFNGLORTHOFOESPROC glOrthofOES;
PFNGLCLIPPLANEFOESPROC glClipPlanefOES;
PFNGLCLEARDEPTHFOESPROC glClearDepthfOES;
PFNGLGETCLIPPLANEFOESPROC glGetClipPlanefOES;
PFNGLQUERYMATRIXXOESPROC glQueryMatrixxOES;
PFNGLDEPTHBOUNDSEXTPROC glDepthBoundsEXT;
PFNGLBLENDEQUATIONSEPARATEEXTPROC glBlendEquationSeparateEXT;
PFNGLISRENDERBUFFEREXTPROC glIsRenderbufferEXT;
PFNGLBINDRENDERBUFFEREXTPROC glBindRenderbufferEXT;
PFNGLDELETERENDERBUFFERSEXTPROC glDeleteRenderbuffersEXT;
PFNGLGENRENDERBUFFERSEXTPROC glGenRenderbuffersEXT;
PFNGLRENDERBUFFERSTORAGEEXTPROC glRenderbufferStorageEXT;
PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC glGetRenderbufferParameterivEXT;
PFNGLISFRAMEBUFFEREXTPROC glIsFramebufferEXT;
PFNGLBINDFRAMEBUFFEREXTPROC glBindFramebufferEXT;
PFNGLDELETEFRAMEBUFFERSEXTPROC glDeleteFramebuffersEXT;
PFNGLGENFRAMEBUFFERSEXTPROC glGenFramebuffersEXT;
PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC glCheckFramebufferStatusEXT;
PFNGLFRAMEBUFFERTEXTURE1DEXTPROC glFramebufferTexture1DEXT;
PFNGLFRAMEBUFFERTEXTURE2DEXTPROC glFramebufferTexture2DEXT;
PFNGLFRAMEBUFFERTEXTURE3DEXTPROC glFramebufferTexture3DEXT;
PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC glFramebufferRenderbufferEXT;
PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetFramebufferAttachmentParameterivEXT;
PFNGLGENERATEMIPMAPEXTPROC glGenerateMipmapEXT;
PFNGLSTRINGMARKERGREMEDYPROC glStringMarkerGREMEDY;
PFNGLSTENCILCLEARTAGEXTPROC glStencilClearTagEXT;
PFNGLBLITFRAMEBUFFEREXTPROC glBlitFramebufferEXT;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glRenderbufferStorageMultisampleEXT;
PFNGLGETQUERYOBJECTI64VEXTPROC glGetQueryObjecti64vEXT;
PFNGLGETQUERYOBJECTUI64VEXTPROC glGetQueryObjectui64vEXT;
PFNGLPROGRAMENVPARAMETERS4FVEXTPROC glProgramEnvParameters4fvEXT;
PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC glProgramLocalParameters4fvEXT;
PFNGLBUFFERPARAMETERIAPPLEPROC glBufferParameteriAPPLE;
PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC glFlushMappedBufferRangeAPPLE;
PFNGLPROGRAMLOCALPARAMETERI4INVPROC glProgramLocalParameterI4iNV;
PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC glProgramLocalParameterI4ivNV;
PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC glProgramLocalParametersI4ivNV;
PFNGLPROGRAMLOCALPARAMETERI4UINVPROC glProgramLocalParameterI4uiNV;
PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC glProgramLocalParameterI4uivNV;
PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC glProgramLocalParametersI4uivNV;
PFNGLPROGRAMENVPARAMETERI4INVPROC glProgramEnvParameterI4iNV;
PFNGLPROGRAMENVPARAMETERI4IVNVPROC glProgramEnvParameterI4ivNV;
PFNGLPROGRAMENVPARAMETERSI4IVNVPROC glProgramEnvParametersI4ivNV;
PFNGLPROGRAMENVPARAMETERI4UINVPROC glProgramEnvParameterI4uiNV;
PFNGLPROGRAMENVPARAMETERI4UIVNVPROC glProgramEnvParameterI4uivNV;
PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC glProgramEnvParametersI4uivNV;
PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC glGetProgramLocalParameterIivNV;
PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC glGetProgramLocalParameterIuivNV;
PFNGLGETPROGRAMENVPARAMETERIIVNVPROC glGetProgramEnvParameterIivNV;
PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC glGetProgramEnvParameterIuivNV;
PFNGLPROGRAMVERTEXLIMITNVPROC glProgramVertexLimitNV;
PFNGLFRAMEBUFFERTEXTUREEXTPROC glFramebufferTextureEXT;
PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC glFramebufferTextureLayerEXT;
PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC glFramebufferTextureFaceEXT;
PFNGLPROGRAMPARAMETERIEXTPROC glProgramParameteriEXT;
PFNGLVERTEXATTRIBI1IEXTPROC glVertexAttribI1iEXT;
PFNGLVERTEXATTRIBI2IEXTPROC glVertexAttribI2iEXT;
PFNGLVERTEXATTRIBI3IEXTPROC glVertexAttribI3iEXT;
PFNGLVERTEXATTRIBI4IEXTPROC glVertexAttribI4iEXT;
PFNGLVERTEXATTRIBI1UIEXTPROC glVertexAttribI1uiEXT;
PFNGLVERTEXATTRIBI2UIEXTPROC glVertexAttribI2uiEXT;
PFNGLVERTEXATTRIBI3UIEXTPROC glVertexAttribI3uiEXT;
PFNGLVERTEXATTRIBI4UIEXTPROC glVertexAttribI4uiEXT;
PFNGLVERTEXATTRIBI1IVEXTPROC glVertexAttribI1ivEXT;
PFNGLVERTEXATTRIBI2IVEXTPROC glVertexAttribI2ivEXT;
PFNGLVERTEXATTRIBI3IVEXTPROC glVertexAttribI3ivEXT;
PFNGLVERTEXATTRIBI4IVEXTPROC glVertexAttribI4ivEXT;
PFNGLVERTEXATTRIBI1UIVEXTPROC glVertexAttribI1uivEXT;
PFNGLVERTEXATTRIBI2UIVEXTPROC glVertexAttribI2uivEXT;
PFNGLVERTEXATTRIBI3UIVEXTPROC glVertexAttribI3uivEXT;
PFNGLVERTEXATTRIBI4UIVEXTPROC glVertexAttribI4uivEXT;
PFNGLVERTEXATTRIBI4BVEXTPROC glVertexAttribI4bvEXT;
PFNGLVERTEXATTRIBI4SVEXTPROC glVertexAttribI4svEXT;
PFNGLVERTEXATTRIBI4UBVEXTPROC glVertexAttribI4ubvEXT;
PFNGLVERTEXATTRIBI4USVEXTPROC glVertexAttribI4usvEXT;
PFNGLVERTEXATTRIBIPOINTEREXTPROC glVertexAttribIPointerEXT;
PFNGLGETVERTEXATTRIBIIVEXTPROC glGetVertexAttribIivEXT;
PFNGLGETVERTEXATTRIBIUIVEXTPROC glGetVertexAttribIuivEXT;
PFNGLGETUNIFORMUIVEXTPROC glGetUniformuivEXT;
PFNGLBINDFRAGDATALOCATIONEXTPROC glBindFragDataLocationEXT;
PFNGLGETFRAGDATALOCATIONEXTPROC glGetFragDataLocationEXT;
PFNGLUNIFORM1UIEXTPROC glUniform1uiEXT;
PFNGLUNIFORM2UIEXTPROC glUniform2uiEXT;
PFNGLUNIFORM3UIEXTPROC glUniform3uiEXT;
PFNGLUNIFORM4UIEXTPROC glUniform4uiEXT;
PFNGLUNIFORM1UIVEXTPROC glUniform1uivEXT;
PFNGLUNIFORM2UIVEXTPROC glUniform2uivEXT;
PFNGLUNIFORM3UIVEXTPROC glUniform3uivEXT;
PFNGLUNIFORM4UIVEXTPROC glUniform4uivEXT;
PFNGLDRAWARRAYSINSTANCEDEXTPROC glDrawArraysInstancedEXT;
PFNGLDRAWELEMENTSINSTANCEDEXTPROC glDrawElementsInstancedEXT;
PFNGLTEXBUFFEREXTPROC glTexBufferEXT;
PFNGLDEPTHRANGEDNVPROC glDepthRangedNV;
PFNGLCLEARDEPTHDNVPROC glClearDepthdNV;
PFNGLDEPTHBOUNDSDNVPROC glDepthBoundsdNV;
PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC glRenderbufferStorageMultisampleCoverageNV;
PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC glProgramBufferParametersfvNV;
PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC glProgramBufferParametersIivNV;
PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC glProgramBufferParametersIuivNV;
PFNGLCOLORMASKINDEXEDEXTPROC glColorMaskIndexedEXT;
PFNGLGETBOOLEANINDEXEDVEXTPROC glGetBooleanIndexedvEXT;
PFNGLGETINTEGERINDEXEDVEXTPROC glGetIntegerIndexedvEXT;
PFNGLENABLEINDEXEDEXTPROC glEnableIndexedEXT;
PFNGLDISABLEINDEXEDEXTPROC glDisableIndexedEXT;
PFNGLISENABLEDINDEXEDEXTPROC glIsEnabledIndexedEXT;
PFNGLBEGINTRANSFORMFEEDBACKNVPROC glBeginTransformFeedbackNV;
PFNGLENDTRANSFORMFEEDBACKNVPROC glEndTransformFeedbackNV;
PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC glTransformFeedbackAttribsNV;
PFNGLBINDBUFFERRANGENVPROC glBindBufferRangeNV;
PFNGLBINDBUFFEROFFSETNVPROC glBindBufferOffsetNV;
PFNGLBINDBUFFERBASENVPROC glBindBufferBaseNV;
PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC glTransformFeedbackVaryingsNV;
PFNGLACTIVEVARYINGNVPROC glActiveVaryingNV;
PFNGLGETVARYINGLOCATIONNVPROC glGetVaryingLocationNV;
PFNGLGETACTIVEVARYINGNVPROC glGetActiveVaryingNV;
PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC glGetTransformFeedbackVaryingNV;
PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC glTransformFeedbackStreamAttribsNV;
PFNGLUNIFORMBUFFEREXTPROC glUniformBufferEXT;
PFNGLGETUNIFORMBUFFERSIZEEXTPROC glGetUniformBufferSizeEXT;
PFNGLGETUNIFORMOFFSETEXTPROC glGetUniformOffsetEXT;
PFNGLTEXPARAMETERIIVEXTPROC glTexParameterIivEXT;
PFNGLTEXPARAMETERIUIVEXTPROC glTexParameterIuivEXT;
PFNGLGETTEXPARAMETERIIVEXTPROC glGetTexParameterIivEXT;
PFNGLGETTEXPARAMETERIUIVEXTPROC glGetTexParameterIuivEXT;
PFNGLCLEARCOLORIIEXTPROC glClearColorIiEXT;
PFNGLCLEARCOLORIUIEXTPROC glClearColorIuiEXT;
PFNGLFRAMETERMINATORGREMEDYPROC glFrameTerminatorGREMEDY;
PFNGLBEGINCONDITIONALRENDERNVPROC glBeginConditionalRenderNV;
PFNGLENDCONDITIONALRENDERNVPROC glEndConditionalRenderNV;
PFNGLPRESENTFRAMEKEYEDNVPROC glPresentFrameKeyedNV;
PFNGLPRESENTFRAMEDUALFILLNVPROC glPresentFrameDualFillNV;
PFNGLGETVIDEOIVNVPROC glGetVideoivNV;
PFNGLGETVIDEOUIVNVPROC glGetVideouivNV;
PFNGLGETVIDEOI64VNVPROC glGetVideoi64vNV;
PFNGLGETVIDEOUI64VNVPROC glGetVideoui64vNV;
PFNGLBEGINTRANSFORMFEEDBACKEXTPROC glBeginTransformFeedbackEXT;
PFNGLENDTRANSFORMFEEDBACKEXTPROC glEndTransformFeedbackEXT;
PFNGLBINDBUFFERRANGEEXTPROC glBindBufferRangeEXT;
PFNGLBINDBUFFEROFFSETEXTPROC glBindBufferOffsetEXT;
PFNGLBINDBUFFERBASEEXTPROC glBindBufferBaseEXT;
PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC glTransformFeedbackVaryingsEXT;
PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC glGetTransformFeedbackVaryingEXT;
PFNGLCLIENTATTRIBDEFAULTEXTPROC glClientAttribDefaultEXT;
PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC glPushClientAttribDefaultEXT;
PFNGLMATRIXLOADFEXTPROC glMatrixLoadfEXT;
PFNGLMATRIXLOADDEXTPROC glMatrixLoaddEXT;
PFNGLMATRIXMULTFEXTPROC glMatrixMultfEXT;
PFNGLMATRIXMULTDEXTPROC glMatrixMultdEXT;
PFNGLMATRIXLOADIDENTITYEXTPROC glMatrixLoadIdentityEXT;
PFNGLMATRIXROTATEFEXTPROC glMatrixRotatefEXT;
PFNGLMATRIXROTATEDEXTPROC glMatrixRotatedEXT;
PFNGLMATRIXSCALEFEXTPROC glMatrixScalefEXT;
PFNGLMATRIXSCALEDEXTPROC glMatrixScaledEXT;
PFNGLMATRIXTRANSLATEFEXTPROC glMatrixTranslatefEXT;
PFNGLMATRIXTRANSLATEDEXTPROC glMatrixTranslatedEXT;
PFNGLMATRIXFRUSTUMEXTPROC glMatrixFrustumEXT;
PFNGLMATRIXORTHOEXTPROC glMatrixOrthoEXT;
PFNGLMATRIXPOPEXTPROC glMatrixPopEXT;
PFNGLMATRIXPUSHEXTPROC glMatrixPushEXT;
PFNGLMATRIXLOADTRANSPOSEFEXTPROC glMatrixLoadTransposefEXT;
PFNGLMATRIXLOADTRANSPOSEDEXTPROC glMatrixLoadTransposedEXT;
PFNGLMATRIXMULTTRANSPOSEFEXTPROC glMatrixMultTransposefEXT;
PFNGLMATRIXMULTTRANSPOSEDEXTPROC glMatrixMultTransposedEXT;
PFNGLTEXTUREPARAMETERFEXTPROC glTextureParameterfEXT;
PFNGLTEXTUREPARAMETERFVEXTPROC glTextureParameterfvEXT;
PFNGLTEXTUREPARAMETERIEXTPROC glTextureParameteriEXT;
PFNGLTEXTUREPARAMETERIVEXTPROC glTextureParameterivEXT;
PFNGLTEXTUREIMAGE1DEXTPROC glTextureImage1DEXT;
PFNGLTEXTUREIMAGE2DEXTPROC glTextureImage2DEXT;
PFNGLTEXTURESUBIMAGE1DEXTPROC glTextureSubImage1DEXT;
PFNGLTEXTURESUBIMAGE2DEXTPROC glTextureSubImage2DEXT;
PFNGLCOPYTEXTUREIMAGE1DEXTPROC glCopyTextureImage1DEXT;
PFNGLCOPYTEXTUREIMAGE2DEXTPROC glCopyTextureImage2DEXT;
PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC glCopyTextureSubImage1DEXT;
PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC glCopyTextureSubImage2DEXT;
PFNGLGETTEXTUREIMAGEEXTPROC glGetTextureImageEXT;
PFNGLGETTEXTUREPARAMETERFVEXTPROC glGetTextureParameterfvEXT;
PFNGLGETTEXTUREPARAMETERIVEXTPROC glGetTextureParameterivEXT;
PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC glGetTextureLevelParameterfvEXT;
PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC glGetTextureLevelParameterivEXT;
PFNGLTEXTUREIMAGE3DEXTPROC glTextureImage3DEXT;
PFNGLTEXTURESUBIMAGE3DEXTPROC glTextureSubImage3DEXT;
PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC glCopyTextureSubImage3DEXT;
PFNGLMULTITEXPARAMETERFEXTPROC glMultiTexParameterfEXT;
PFNGLMULTITEXPARAMETERFVEXTPROC glMultiTexParameterfvEXT;
PFNGLMULTITEXPARAMETERIEXTPROC glMultiTexParameteriEXT;
PFNGLMULTITEXPARAMETERIVEXTPROC glMultiTexParameterivEXT;
PFNGLMULTITEXIMAGE1DEXTPROC glMultiTexImage1DEXT;
PFNGLMULTITEXIMAGE2DEXTPROC glMultiTexImage2DEXT;
PFNGLMULTITEXSUBIMAGE1DEXTPROC glMultiTexSubImage1DEXT;
PFNGLMULTITEXSUBIMAGE2DEXTPROC glMultiTexSubImage2DEXT;
PFNGLCOPYMULTITEXIMAGE1DEXTPROC glCopyMultiTexImage1DEXT;
PFNGLCOPYMULTITEXIMAGE2DEXTPROC glCopyMultiTexImage2DEXT;
PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC glCopyMultiTexSubImage1DEXT;
PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC glCopyMultiTexSubImage2DEXT;
PFNGLGETMULTITEXIMAGEEXTPROC glGetMultiTexImageEXT;
PFNGLGETMULTITEXPARAMETERFVEXTPROC glGetMultiTexParameterfvEXT;
PFNGLGETMULTITEXPARAMETERIVEXTPROC glGetMultiTexParameterivEXT;
PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC glGetMultiTexLevelParameterfvEXT;
PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC glGetMultiTexLevelParameterivEXT;
PFNGLMULTITEXIMAGE3DEXTPROC glMultiTexImage3DEXT;
PFNGLMULTITEXSUBIMAGE3DEXTPROC glMultiTexSubImage3DEXT;
PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC glCopyMultiTexSubImage3DEXT;
PFNGLBINDMULTITEXTUREEXTPROC glBindMultiTextureEXT;
PFNGLENABLECLIENTSTATEINDEXEDEXTPROC glEnableClientStateIndexedEXT;
PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC glDisableClientStateIndexedEXT;
PFNGLMULTITEXCOORDPOINTEREXTPROC glMultiTexCoordPointerEXT;
PFNGLMULTITEXENVFEXTPROC glMultiTexEnvfEXT;
PFNGLMULTITEXENVFVEXTPROC glMultiTexEnvfvEXT;
PFNGLMULTITEXENVIEXTPROC glMultiTexEnviEXT;
PFNGLMULTITEXENVIVEXTPROC glMultiTexEnvivEXT;
PFNGLMULTITEXGENDEXTPROC glMultiTexGendEXT;
PFNGLMULTITEXGENDVEXTPROC glMultiTexGendvEXT;
PFNGLMULTITEXGENFEXTPROC glMultiTexGenfEXT;
PFNGLMULTITEXGENFVEXTPROC glMultiTexGenfvEXT;
PFNGLMULTITEXGENIEXTPROC glMultiTexGeniEXT;
PFNGLMULTITEXGENIVEXTPROC glMultiTexGenivEXT;
PFNGLGETMULTITEXENVFVEXTPROC glGetMultiTexEnvfvEXT;
PFNGLGETMULTITEXENVIVEXTPROC glGetMultiTexEnvivEXT;
PFNGLGETMULTITEXGENDVEXTPROC glGetMultiTexGendvEXT;
PFNGLGETMULTITEXGENFVEXTPROC glGetMultiTexGenfvEXT;
PFNGLGETMULTITEXGENIVEXTPROC glGetMultiTexGenivEXT;
PFNGLGETFLOATINDEXEDVEXTPROC glGetFloatIndexedvEXT;
PFNGLGETDOUBLEINDEXEDVEXTPROC glGetDoubleIndexedvEXT;
PFNGLGETPOINTERINDEXEDVEXTPROC glGetPointerIndexedvEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC glCompressedTextureImage3DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC glCompressedTextureImage2DEXT;
PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC glCompressedTextureImage1DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC glCompressedTextureSubImage3DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC glCompressedTextureSubImage2DEXT;
PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC glCompressedTextureSubImage1DEXT;
PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC glGetCompressedTextureImageEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC glCompressedMultiTexImage3DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC glCompressedMultiTexImage2DEXT;
PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC glCompressedMultiTexImage1DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC glCompressedMultiTexSubImage3DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC glCompressedMultiTexSubImage2DEXT;
PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC glCompressedMultiTexSubImage1DEXT;
PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC glGetCompressedMultiTexImageEXT;
PFNGLNAMEDPROGRAMSTRINGEXTPROC glNamedProgramStringEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC glNamedProgramLocalParameter4dEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC glNamedProgramLocalParameter4dvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC glNamedProgramLocalParameter4fEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC glNamedProgramLocalParameter4fvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC glGetNamedProgramLocalParameterdvEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC glGetNamedProgramLocalParameterfvEXT;
PFNGLGETNAMEDPROGRAMIVEXTPROC glGetNamedProgramivEXT;
PFNGLGETNAMEDPROGRAMSTRINGEXTPROC glGetNamedProgramStringEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC glNamedProgramLocalParameters4fvEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC glNamedProgramLocalParameterI4iEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC glNamedProgramLocalParameterI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC glNamedProgramLocalParametersI4ivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC glNamedProgramLocalParameterI4uiEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC glNamedProgramLocalParameterI4uivEXT;
PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC glNamedProgramLocalParametersI4uivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC glGetNamedProgramLocalParameterIivEXT;
PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC glGetNamedProgramLocalParameterIuivEXT;
PFNGLTEXTUREPARAMETERIIVEXTPROC glTextureParameterIivEXT;
PFNGLTEXTUREPARAMETERIUIVEXTPROC glTextureParameterIuivEXT;
PFNGLGETTEXTUREPARAMETERIIVEXTPROC glGetTextureParameterIivEXT;
PFNGLGETTEXTUREPARAMETERIUIVEXTPROC glGetTextureParameterIuivEXT;
PFNGLMULTITEXPARAMETERIIVEXTPROC glMultiTexParameterIivEXT;
PFNGLMULTITEXPARAMETERIUIVEXTPROC glMultiTexParameterIuivEXT;
PFNGLGETMULTITEXPARAMETERIIVEXTPROC glGetMultiTexParameterIivEXT;
PFNGLGETMULTITEXPARAMETERIUIVEXTPROC glGetMultiTexParameterIuivEXT;
PFNGLPROGRAMUNIFORM1FEXTPROC glProgramUniform1fEXT;
PFNGLPROGRAMUNIFORM2FEXTPROC glProgramUniform2fEXT;
PFNGLPROGRAMUNIFORM3FEXTPROC glProgramUniform3fEXT;
PFNGLPROGRAMUNIFORM4FEXTPROC glProgramUniform4fEXT;
PFNGLPROGRAMUNIFORM1IEXTPROC glProgramUniform1iEXT;
PFNGLPROGRAMUNIFORM2IEXTPROC glProgramUniform2iEXT;
PFNGLPROGRAMUNIFORM3IEXTPROC glProgramUniform3iEXT;
PFNGLPROGRAMUNIFORM4IEXTPROC glProgramUniform4iEXT;
PFNGLPROGRAMUNIFORM1FVEXTPROC glProgramUniform1fvEXT;
PFNGLPROGRAMUNIFORM2FVEXTPROC glProgramUniform2fvEXT;
PFNGLPROGRAMUNIFORM3FVEXTPROC glProgramUniform3fvEXT;
PFNGLPROGRAMUNIFORM4FVEXTPROC glProgramUniform4fvEXT;
PFNGLPROGRAMUNIFORM1IVEXTPROC glProgramUniform1ivEXT;
PFNGLPROGRAMUNIFORM2IVEXTPROC glProgramUniform2ivEXT;
PFNGLPROGRAMUNIFORM3IVEXTPROC glProgramUniform3ivEXT;
PFNGLPROGRAMUNIFORM4IVEXTPROC glProgramUniform4ivEXT;
PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC glProgramUniformMatrix2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC glProgramUniformMatrix3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC glProgramUniformMatrix4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC glProgramUniformMatrix2x3fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC glProgramUniformMatrix3x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC glProgramUniformMatrix2x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC glProgramUniformMatrix4x2fvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC glProgramUniformMatrix3x4fvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC glProgramUniformMatrix4x3fvEXT;
PFNGLPROGRAMUNIFORM1UIEXTPROC glProgramUniform1uiEXT;
PFNGLPROGRAMUNIFORM2UIEXTPROC glProgramUniform2uiEXT;
PFNGLPROGRAMUNIFORM3UIEXTPROC glProgramUniform3uiEXT;
PFNGLPROGRAMUNIFORM4UIEXTPROC glProgramUniform4uiEXT;
PFNGLPROGRAMUNIFORM1UIVEXTPROC glProgramUniform1uivEXT;
PFNGLPROGRAMUNIFORM2UIVEXTPROC glProgramUniform2uivEXT;
PFNGLPROGRAMUNIFORM3UIVEXTPROC glProgramUniform3uivEXT;
PFNGLPROGRAMUNIFORM4UIVEXTPROC glProgramUniform4uivEXT;
PFNGLNAMEDBUFFERDATAEXTPROC glNamedBufferDataEXT;
PFNGLNAMEDBUFFERSUBDATAEXTPROC glNamedBufferSubDataEXT;
PFNGLMAPNAMEDBUFFEREXTPROC glMapNamedBufferEXT;
PFNGLUNMAPNAMEDBUFFEREXTPROC glUnmapNamedBufferEXT;
PFNGLMAPNAMEDBUFFERRANGEEXTPROC glMapNamedBufferRangeEXT;
PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC glFlushMappedNamedBufferRangeEXT;
PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC glNamedCopyBufferSubDataEXT;
PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC glGetNamedBufferParameterivEXT;
PFNGLGETNAMEDBUFFERPOINTERVEXTPROC glGetNamedBufferPointervEXT;
PFNGLGETNAMEDBUFFERSUBDATAEXTPROC glGetNamedBufferSubDataEXT;
PFNGLTEXTUREBUFFEREXTPROC glTextureBufferEXT;
PFNGLMULTITEXBUFFEREXTPROC glMultiTexBufferEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC glNamedRenderbufferStorageEXT;
PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC glGetNamedRenderbufferParameterivEXT;
PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC glCheckNamedFramebufferStatusEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC glNamedFramebufferTexture1DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC glNamedFramebufferTexture2DEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC glNamedFramebufferTexture3DEXT;
PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC glNamedFramebufferRenderbufferEXT;
PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC glGetNamedFramebufferAttachmentParameterivEXT;
PFNGLGENERATETEXTUREMIPMAPEXTPROC glGenerateTextureMipmapEXT;
PFNGLGENERATEMULTITEXMIPMAPEXTPROC glGenerateMultiTexMipmapEXT;
PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC glFramebufferDrawBufferEXT;
PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC glFramebufferDrawBuffersEXT;
PFNGLFRAMEBUFFERREADBUFFEREXTPROC glFramebufferReadBufferEXT;
PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC glGetFramebufferParameterivEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC glNamedRenderbufferStorageMultisampleEXT;
PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC glNamedRenderbufferStorageMultisampleCoverageEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC glNamedFramebufferTextureEXT;
PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC glNamedFramebufferTextureLayerEXT;
PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC glNamedFramebufferTextureFaceEXT;
PFNGLTEXTURERENDERBUFFEREXTPROC glTextureRenderbufferEXT;
PFNGLMULTITEXRENDERBUFFEREXTPROC glMultiTexRenderbufferEXT;
PFNGLPROGRAMUNIFORM1DEXTPROC glProgramUniform1dEXT;
PFNGLPROGRAMUNIFORM2DEXTPROC glProgramUniform2dEXT;
PFNGLPROGRAMUNIFORM3DEXTPROC glProgramUniform3dEXT;
PFNGLPROGRAMUNIFORM4DEXTPROC glProgramUniform4dEXT;
PFNGLPROGRAMUNIFORM1DVEXTPROC glProgramUniform1dvEXT;
PFNGLPROGRAMUNIFORM2DVEXTPROC glProgramUniform2dvEXT;
PFNGLPROGRAMUNIFORM3DVEXTPROC glProgramUniform3dvEXT;
PFNGLPROGRAMUNIFORM4DVEXTPROC glProgramUniform4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC glProgramUniformMatrix2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC glProgramUniformMatrix3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC glProgramUniformMatrix4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC glProgramUniformMatrix2x3dvEXT;
PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC glProgramUniformMatrix2x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC glProgramUniformMatrix3x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC glProgramUniformMatrix3x4dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC glProgramUniformMatrix4x2dvEXT;
PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC glProgramUniformMatrix4x3dvEXT;
PFNGLGETMULTISAMPLEFVNVPROC glGetMultisamplefvNV;
PFNGLSAMPLEMASKINDEXEDNVPROC glSampleMaskIndexedNV;
PFNGLTEXRENDERBUFFERNVPROC glTexRenderbufferNV;
PFNGLBINDTRANSFORMFEEDBACKNVPROC glBindTransformFeedbackNV;
PFNGLDELETETRANSFORMFEEDBACKSNVPROC glDeleteTransformFeedbacksNV;
PFNGLGENTRANSFORMFEEDBACKSNVPROC glGenTransformFeedbacksNV;
PFNGLISTRANSFORMFEEDBACKNVPROC glIsTransformFeedbackNV;
PFNGLPAUSETRANSFORMFEEDBACKNVPROC glPauseTransformFeedbackNV;
PFNGLRESUMETRANSFORMFEEDBACKNVPROC glResumeTransformFeedbackNV;
PFNGLDRAWTRANSFORMFEEDBACKNVPROC glDrawTransformFeedbackNV;
PFNGLGETPERFMONITORGROUPSAMDPROC glGetPerfMonitorGroupsAMD;
PFNGLGETPERFMONITORCOUNTERSAMDPROC glGetPerfMonitorCountersAMD;
PFNGLGETPERFMONITORGROUPSTRINGAMDPROC glGetPerfMonitorGroupStringAMD;
PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC glGetPerfMonitorCounterStringAMD;
PFNGLGETPERFMONITORCOUNTERINFOAMDPROC glGetPerfMonitorCounterInfoAMD;
PFNGLGENPERFMONITORSAMDPROC glGenPerfMonitorsAMD;
PFNGLDELETEPERFMONITORSAMDPROC glDeletePerfMonitorsAMD;
PFNGLSELECTPERFMONITORCOUNTERSAMDPROC glSelectPerfMonitorCountersAMD;
PFNGLBEGINPERFMONITORAMDPROC glBeginPerfMonitorAMD;
PFNGLENDPERFMONITORAMDPROC glEndPerfMonitorAMD;
PFNGLGETPERFMONITORCOUNTERDATAAMDPROC glGetPerfMonitorCounterDataAMD;
PFNGLTESSELLATIONFACTORAMDPROC glTessellationFactorAMD;
PFNGLTESSELLATIONMODEAMDPROC glTessellationModeAMD;
PFNGLPROVOKINGVERTEXEXTPROC glProvokingVertexEXT;
PFNGLBLENDFUNCINDEXEDAMDPROC glBlendFuncIndexedAMD;
PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC glBlendFuncSeparateIndexedAMD;
PFNGLBLENDEQUATIONINDEXEDAMDPROC glBlendEquationIndexedAMD;
PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC glBlendEquationSeparateIndexedAMD;
PFNGLTEXTURERANGEAPPLEPROC glTextureRangeAPPLE;
PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC glGetTexParameterPointervAPPLE;
PFNGLENABLEVERTEXATTRIBAPPLEPROC glEnableVertexAttribAPPLE;
PFNGLDISABLEVERTEXATTRIBAPPLEPROC glDisableVertexAttribAPPLE;
PFNGLISVERTEXATTRIBENABLEDAPPLEPROC glIsVertexAttribEnabledAPPLE;
PFNGLMAPVERTEXATTRIB1DAPPLEPROC glMapVertexAttrib1dAPPLE;
PFNGLMAPVERTEXATTRIB1FAPPLEPROC glMapVertexAttrib1fAPPLE;
PFNGLMAPVERTEXATTRIB2DAPPLEPROC glMapVertexAttrib2dAPPLE;
PFNGLMAPVERTEXATTRIB2FAPPLEPROC glMapVertexAttrib2fAPPLE;
PFNGLOBJECTPURGEABLEAPPLEPROC glObjectPurgeableAPPLE;
PFNGLOBJECTUNPURGEABLEAPPLEPROC glObjectUnpurgeableAPPLE;
PFNGLGETOBJECTPARAMETERIVAPPLEPROC glGetObjectParameterivAPPLE;
PFNGLBEGINVIDEOCAPTURENVPROC glBeginVideoCaptureNV;
PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC glBindVideoCaptureStreamBufferNV;
PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC glBindVideoCaptureStreamTextureNV;
PFNGLENDVIDEOCAPTURENVPROC glEndVideoCaptureNV;
PFNGLGETVIDEOCAPTUREIVNVPROC glGetVideoCaptureivNV;
PFNGLGETVIDEOCAPTURESTREAMIVNVPROC glGetVideoCaptureStreamivNV;
PFNGLGETVIDEOCAPTURESTREAMFVNVPROC glGetVideoCaptureStreamfvNV;
PFNGLGETVIDEOCAPTURESTREAMDVNVPROC glGetVideoCaptureStreamdvNV;
PFNGLVIDEOCAPTURENVPROC glVideoCaptureNV;
PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC glVideoCaptureStreamParameterivNV;
PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC glVideoCaptureStreamParameterfvNV;
PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC glVideoCaptureStreamParameterdvNV;
PFNGLCOPYIMAGESUBDATANVPROC glCopyImageSubDataNV;
PFNGLUSESHADERPROGRAMEXTPROC glUseShaderProgramEXT;
PFNGLACTIVEPROGRAMEXTPROC glActiveProgramEXT;
PFNGLCREATESHADERPROGRAMEXTPROC glCreateShaderProgramEXT;
PFNGLMAKEBUFFERRESIDENTNVPROC glMakeBufferResidentNV;
PFNGLMAKEBUFFERNONRESIDENTNVPROC glMakeBufferNonResidentNV;
PFNGLISBUFFERRESIDENTNVPROC glIsBufferResidentNV;
PFNGLMAKENAMEDBUFFERRESIDENTNVPROC glMakeNamedBufferResidentNV;
PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC glMakeNamedBufferNonResidentNV;
PFNGLISNAMEDBUFFERRESIDENTNVPROC glIsNamedBufferResidentNV;
PFNGLGETBUFFERPARAMETERUI64VNVPROC glGetBufferParameterui64vNV;
PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC glGetNamedBufferParameterui64vNV;
PFNGLGETINTEGERUI64VNVPROC glGetIntegerui64vNV;
PFNGLUNIFORMUI64NVPROC glUniformui64NV;
PFNGLUNIFORMUI64VNVPROC glUniformui64vNV;
PFNGLGETUNIFORMUI64VNVPROC glGetUniformui64vNV;
PFNGLPROGRAMUNIFORMUI64NVPROC glProgramUniformui64NV;
PFNGLPROGRAMUNIFORMUI64VNVPROC glProgramUniformui64vNV;
PFNGLBUFFERADDRESSRANGENVPROC glBufferAddressRangeNV;
PFNGLVERTEXFORMATNVPROC glVertexFormatNV;
PFNGLNORMALFORMATNVPROC glNormalFormatNV;
PFNGLCOLORFORMATNVPROC glColorFormatNV;
PFNGLINDEXFORMATNVPROC glIndexFormatNV;
PFNGLTEXCOORDFORMATNVPROC glTexCoordFormatNV;
PFNGLEDGEFLAGFORMATNVPROC glEdgeFlagFormatNV;
PFNGLSECONDARYCOLORFORMATNVPROC glSecondaryColorFormatNV;
PFNGLFOGCOORDFORMATNVPROC glFogCoordFormatNV;
PFNGLVERTEXATTRIBFORMATNVPROC glVertexAttribFormatNV;
PFNGLVERTEXATTRIBIFORMATNVPROC glVertexAttribIFormatNV;
PFNGLGETINTEGERUI64I_VNVPROC glGetIntegerui64i_vNV;
PFNGLTEXTUREBARRIERNVPROC glTextureBarrierNV;
PFNGLBINDIMAGETEXTUREEXTPROC glBindImageTextureEXT;
PFNGLMEMORYBARRIEREXTPROC glMemoryBarrierEXT;
PFNGLVERTEXATTRIBL1DEXTPROC glVertexAttribL1dEXT;
PFNGLVERTEXATTRIBL2DEXTPROC glVertexAttribL2dEXT;
PFNGLVERTEXATTRIBL3DEXTPROC glVertexAttribL3dEXT;
PFNGLVERTEXATTRIBL4DEXTPROC glVertexAttribL4dEXT;
PFNGLVERTEXATTRIBL1DVEXTPROC glVertexAttribL1dvEXT;
PFNGLVERTEXATTRIBL2DVEXTPROC glVertexAttribL2dvEXT;
PFNGLVERTEXATTRIBL3DVEXTPROC glVertexAttribL3dvEXT;
PFNGLVERTEXATTRIBL4DVEXTPROC glVertexAttribL4dvEXT;
PFNGLVERTEXATTRIBLPOINTEREXTPROC glVertexAttribLPointerEXT;
PFNGLGETVERTEXATTRIBLDVEXTPROC glGetVertexAttribLdvEXT;
PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC glVertexArrayVertexAttribLOffsetEXT;
PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC glProgramSubroutineParametersuivNV;
PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC glGetProgramSubroutineParameteruivNV;
PFNGLUNIFORM1I64NVPROC glUniform1i64NV;
PFNGLUNIFORM2I64NVPROC glUniform2i64NV;
PFNGLUNIFORM3I64NVPROC glUniform3i64NV;
PFNGLUNIFORM4I64NVPROC glUniform4i64NV;
PFNGLUNIFORM1I64VNVPROC glUniform1i64vNV;
PFNGLUNIFORM2I64VNVPROC glUniform2i64vNV;
PFNGLUNIFORM3I64VNVPROC glUniform3i64vNV;
PFNGLUNIFORM4I64VNVPROC glUniform4i64vNV;
PFNGLUNIFORM1UI64NVPROC glUniform1ui64NV;
PFNGLUNIFORM2UI64NVPROC glUniform2ui64NV;
PFNGLUNIFORM3UI64NVPROC glUniform3ui64NV;
PFNGLUNIFORM4UI64NVPROC glUniform4ui64NV;
PFNGLUNIFORM1UI64VNVPROC glUniform1ui64vNV;
PFNGLUNIFORM2UI64VNVPROC glUniform2ui64vNV;
PFNGLUNIFORM3UI64VNVPROC glUniform3ui64vNV;
PFNGLUNIFORM4UI64VNVPROC glUniform4ui64vNV;
PFNGLGETUNIFORMI64VNVPROC glGetUniformi64vNV;
PFNGLPROGRAMUNIFORM1I64NVPROC glProgramUniform1i64NV;
PFNGLPROGRAMUNIFORM2I64NVPROC glProgramUniform2i64NV;
PFNGLPROGRAMUNIFORM3I64NVPROC glProgramUniform3i64NV;
PFNGLPROGRAMUNIFORM4I64NVPROC glProgramUniform4i64NV;
PFNGLPROGRAMUNIFORM1I64VNVPROC glProgramUniform1i64vNV;
PFNGLPROGRAMUNIFORM2I64VNVPROC glProgramUniform2i64vNV;
PFNGLPROGRAMUNIFORM3I64VNVPROC glProgramUniform3i64vNV;
PFNGLPROGRAMUNIFORM4I64VNVPROC glProgramUniform4i64vNV;
PFNGLPROGRAMUNIFORM1UI64NVPROC glProgramUniform1ui64NV;
PFNGLPROGRAMUNIFORM2UI64NVPROC glProgramUniform2ui64NV;
PFNGLPROGRAMUNIFORM3UI64NVPROC glProgramUniform3ui64NV;
PFNGLPROGRAMUNIFORM4UI64NVPROC glProgramUniform4ui64NV;
PFNGLPROGRAMUNIFORM1UI64VNVPROC glProgramUniform1ui64vNV;
PFNGLPROGRAMUNIFORM2UI64VNVPROC glProgramUniform2ui64vNV;
PFNGLPROGRAMUNIFORM3UI64VNVPROC glProgramUniform3ui64vNV;
PFNGLPROGRAMUNIFORM4UI64VNVPROC glProgramUniform4ui64vNV;
PFNGLVERTEXATTRIBL1I64NVPROC glVertexAttribL1i64NV;
PFNGLVERTEXATTRIBL2I64NVPROC glVertexAttribL2i64NV;
PFNGLVERTEXATTRIBL3I64NVPROC glVertexAttribL3i64NV;
PFNGLVERTEXATTRIBL4I64NVPROC glVertexAttribL4i64NV;
PFNGLVERTEXATTRIBL1I64VNVPROC glVertexAttribL1i64vNV;
PFNGLVERTEXATTRIBL2I64VNVPROC glVertexAttribL2i64vNV;
PFNGLVERTEXATTRIBL3I64VNVPROC glVertexAttribL3i64vNV;
PFNGLVERTEXATTRIBL4I64VNVPROC glVertexAttribL4i64vNV;
PFNGLVERTEXATTRIBL1UI64NVPROC glVertexAttribL1ui64NV;
PFNGLVERTEXATTRIBL2UI64NVPROC glVertexAttribL2ui64NV;
PFNGLVERTEXATTRIBL3UI64NVPROC glVertexAttribL3ui64NV;
PFNGLVERTEXATTRIBL4UI64NVPROC glVertexAttribL4ui64NV;
PFNGLVERTEXATTRIBL1UI64VNVPROC glVertexAttribL1ui64vNV;
PFNGLVERTEXATTRIBL2UI64VNVPROC glVertexAttribL2ui64vNV;
PFNGLVERTEXATTRIBL3UI64VNVPROC glVertexAttribL3ui64vNV;
PFNGLVERTEXATTRIBL4UI64VNVPROC glVertexAttribL4ui64vNV;
PFNGLGETVERTEXATTRIBLI64VNVPROC glGetVertexAttribLi64vNV;
PFNGLGETVERTEXATTRIBLUI64VNVPROC glGetVertexAttribLui64vNV;
PFNGLVERTEXATTRIBLFORMATNVPROC glVertexAttribLFormatNV;
PFNGLGENNAMESAMDPROC glGenNamesAMD;
PFNGLDELETENAMESAMDPROC glDeleteNamesAMD;
PFNGLISNAMEAMDPROC glIsNameAMD;
PFNGLDEBUGMESSAGEENABLEAMDPROC glDebugMessageEnableAMD;
PFNGLDEBUGMESSAGEINSERTAMDPROC glDebugMessageInsertAMD;
PFNGLDEBUGMESSAGECALLBACKAMDPROC glDebugMessageCallbackAMD;
PFNGLGETDEBUGMESSAGELOGAMDPROC glGetDebugMessageLogAMD;
PFNGLVDPAUINITNVPROC glVDPAUInitNV;
PFNGLVDPAUFININVPROC glVDPAUFiniNV;
PFNGLVDPAUREGISTERVIDEOSURFACENVPROC glVDPAURegisterVideoSurfaceNV;
PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC glVDPAURegisterOutputSurfaceNV;
PFNGLVDPAUISSURFACENVPROC glVDPAUIsSurfaceNV;
PFNGLVDPAUUNREGISTERSURFACENVPROC glVDPAUUnregisterSurfaceNV;
PFNGLVDPAUGETSURFACEIVNVPROC glVDPAUGetSurfaceivNV;
PFNGLVDPAUSURFACEACCESSNVPROC glVDPAUSurfaceAccessNV;
PFNGLVDPAUMAPSURFACESNVPROC glVDPAUMapSurfacesNV;
PFNGLVDPAUUNMAPSURFACESNVPROC glVDPAUUnmapSurfacesNV;
PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC glTexImage2DMultisampleCoverageNV;
PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC glTexImage3DMultisampleCoverageNV;
PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC glTextureImage2DMultisampleNV;
PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC glTextureImage3DMultisampleNV;
PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC glTextureImage2DMultisampleCoverageNV;
PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC glTextureImage3DMultisampleCoverageNV;
PFNGLSETMULTISAMPLEFVAMDPROC glSetMultisamplefvAMD;
PFNGLIMPORTSYNCEXTPROC glImportSyncEXT;
PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC glMultiDrawArraysIndirectAMD;
PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC glMultiDrawElementsIndirectAMD;
PFNGLGENPATHSNVPROC glGenPathsNV;
PFNGLDELETEPATHSNVPROC glDeletePathsNV;
PFNGLISPATHNVPROC glIsPathNV;
PFNGLPATHCOMMANDSNVPROC glPathCommandsNV;
PFNGLPATHCOORDSNVPROC glPathCoordsNV;
PFNGLPATHSUBCOMMANDSNVPROC glPathSubCommandsNV;
PFNGLPATHSUBCOORDSNVPROC glPathSubCoordsNV;
PFNGLPATHSTRINGNVPROC glPathStringNV;
PFNGLPATHGLYPHSNVPROC glPathGlyphsNV;
PFNGLPATHGLYPHRANGENVPROC glPathGlyphRangeNV;
PFNGLWEIGHTPATHSNVPROC glWeightPathsNV;
PFNGLCOPYPATHNVPROC glCopyPathNV;
PFNGLINTERPOLATEPATHSNVPROC glInterpolatePathsNV;
PFNGLTRANSFORMPATHNVPROC glTransformPathNV;
PFNGLPATHPARAMETERIVNVPROC glPathParameterivNV;
PFNGLPATHPARAMETERINVPROC glPathParameteriNV;
PFNGLPATHPARAMETERFVNVPROC glPathParameterfvNV;
PFNGLPATHPARAMETERFNVPROC glPathParameterfNV;
PFNGLPATHDASHARRAYNVPROC glPathDashArrayNV;
PFNGLPATHSTENCILFUNCNVPROC glPathStencilFuncNV;
PFNGLPATHSTENCILDEPTHOFFSETNVPROC glPathStencilDepthOffsetNV;
PFNGLSTENCILFILLPATHNVPROC glStencilFillPathNV;
PFNGLSTENCILSTROKEPATHNVPROC glStencilStrokePathNV;
PFNGLSTENCILFILLPATHINSTANCEDNVPROC glStencilFillPathInstancedNV;
PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC glStencilStrokePathInstancedNV;
PFNGLPATHCOVERDEPTHFUNCNVPROC glPathCoverDepthFuncNV;
PFNGLPATHCOLORGENNVPROC glPathColorGenNV;
PFNGLPATHTEXGENNVPROC glPathTexGenNV;
PFNGLPATHFOGGENNVPROC glPathFogGenNV;
PFNGLCOVERFILLPATHNVPROC glCoverFillPathNV;
PFNGLCOVERSTROKEPATHNVPROC glCoverStrokePathNV;
PFNGLCOVERFILLPATHINSTANCEDNVPROC glCoverFillPathInstancedNV;
PFNGLCOVERSTROKEPATHINSTANCEDNVPROC glCoverStrokePathInstancedNV;
PFNGLGETPATHPARAMETERIVNVPROC glGetPathParameterivNV;
PFNGLGETPATHPARAMETERFVNVPROC glGetPathParameterfvNV;
PFNGLGETPATHCOMMANDSNVPROC glGetPathCommandsNV;
PFNGLGETPATHCOORDSNVPROC glGetPathCoordsNV;
PFNGLGETPATHDASHARRAYNVPROC glGetPathDashArrayNV;
PFNGLGETPATHMETRICSNVPROC glGetPathMetricsNV;
PFNGLGETPATHMETRICRANGENVPROC glGetPathMetricRangeNV;
PFNGLGETPATHSPACINGNVPROC glGetPathSpacingNV;
PFNGLGETPATHCOLORGENIVNVPROC glGetPathColorGenivNV;
PFNGLGETPATHCOLORGENFVNVPROC glGetPathColorGenfvNV;
PFNGLGETPATHTEXGENIVNVPROC glGetPathTexGenivNV;
PFNGLGETPATHTEXGENFVNVPROC glGetPathTexGenfvNV;
PFNGLISPOINTINFILLPATHNVPROC glIsPointInFillPathNV;
PFNGLISPOINTINSTROKEPATHNVPROC glIsPointInStrokePathNV;
PFNGLGETPATHLENGTHNVPROC glGetPathLengthNV;
PFNGLPOINTALONGPATHNVPROC glPointAlongPathNV;
PFNGLSTENCILOPVALUEAMDPROC glStencilOpValueAMD;
PFNGLGETTEXTUREHANDLENVPROC glGetTextureHandleNV;
PFNGLGETTEXTURESAMPLERHANDLENVPROC glGetTextureSamplerHandleNV;
PFNGLMAKETEXTUREHANDLERESIDENTNVPROC glMakeTextureHandleResidentNV;
PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC glMakeTextureHandleNonResidentNV;
PFNGLGETIMAGEHANDLENVPROC glGetImageHandleNV;
PFNGLMAKEIMAGEHANDLERESIDENTNVPROC glMakeImageHandleResidentNV;
PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC glMakeImageHandleNonResidentNV;
PFNGLUNIFORMHANDLEUI64NVPROC glUniformHandleui64NV;
PFNGLUNIFORMHANDLEUI64VNVPROC glUniformHandleui64vNV;
PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC glProgramUniformHandleui64NV;
PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC glProgramUniformHandleui64vNV;
PFNGLISTEXTUREHANDLERESIDENTNVPROC glIsTextureHandleResidentNV;
PFNGLISIMAGEHANDLERESIDENTNVPROC glIsImageHandleResidentNV;
PFNGLBEGINCONDITIONALRENDERNVXPROC glBeginConditionalRenderNVX;
PFNGLENDCONDITIONALRENDERNVXPROC glEndConditionalRenderNVX;
PFNGLTEXSTORAGESPARSEAMDPROC glTexStorageSparseAMD;
PFNGLTEXTURESTORAGESPARSEAMDPROC glTextureStorageSparseAMD;
PFNGLSYNCTEXTUREINTELPROC glSyncTextureINTEL;
PFNGLUNMAPTEXTURE2DINTELPROC glUnmapTexture2DINTEL;
PFNGLMAPTEXTURE2DINTELPROC glMapTexture2DINTEL;
PFNGLDRAWTEXTURENVPROC glDrawTextureNV;

static inline void initGLExtFunc()
{
  glBlendColor = (PFNGLBLENDCOLORPROC)glfwGetProcAddress("glBlendColor");
  glBlendEquation = (PFNGLBLENDEQUATIONPROC)glfwGetProcAddress("glBlendEquation");
  glDrawRangeElements = (PFNGLDRAWRANGEELEMENTSPROC)glfwGetProcAddress("glDrawRangeElements");
  glTexImage3D = (PFNGLTEXIMAGE3DPROC)glfwGetProcAddress("glTexImage3D");
  glTexSubImage3D = (PFNGLTEXSUBIMAGE3DPROC)glfwGetProcAddress("glTexSubImage3D");
  glCopyTexSubImage3D = (PFNGLCOPYTEXSUBIMAGE3DPROC)glfwGetProcAddress("glCopyTexSubImage3D");
  glColorTable = (PFNGLCOLORTABLEPROC)glfwGetProcAddress("glColorTable");
  glColorTableParameterfv = (PFNGLCOLORTABLEPARAMETERFVPROC)glfwGetProcAddress("glColorTableParameterfv");
  glColorTableParameteriv = (PFNGLCOLORTABLEPARAMETERIVPROC)glfwGetProcAddress("glColorTableParameteriv");
  glCopyColorTable = (PFNGLCOPYCOLORTABLEPROC)glfwGetProcAddress("glCopyColorTable");
  glGetColorTable = (PFNGLGETCOLORTABLEPROC)glfwGetProcAddress("glGetColorTable");
  glGetColorTableParameterfv = (PFNGLGETCOLORTABLEPARAMETERFVPROC)glfwGetProcAddress("glGetColorTableParameterfv");
  glGetColorTableParameteriv = (PFNGLGETCOLORTABLEPARAMETERIVPROC)glfwGetProcAddress("glGetColorTableParameteriv");
  glColorSubTable = (PFNGLCOLORSUBTABLEPROC)glfwGetProcAddress("glColorSubTable");
  glCopyColorSubTable = (PFNGLCOPYCOLORSUBTABLEPROC)glfwGetProcAddress("glCopyColorSubTable");
  glConvolutionFilter1D = (PFNGLCONVOLUTIONFILTER1DPROC)glfwGetProcAddress("glConvolutionFilter1D");
  glConvolutionFilter2D = (PFNGLCONVOLUTIONFILTER2DPROC)glfwGetProcAddress("glConvolutionFilter2D");
  glConvolutionParameterf = (PFNGLCONVOLUTIONPARAMETERFPROC)glfwGetProcAddress("glConvolutionParameterf");
  glConvolutionParameterfv = (PFNGLCONVOLUTIONPARAMETERFVPROC)glfwGetProcAddress("glConvolutionParameterfv");
  glConvolutionParameteri = (PFNGLCONVOLUTIONPARAMETERIPROC)glfwGetProcAddress("glConvolutionParameteri");
  glConvolutionParameteriv = (PFNGLCONVOLUTIONPARAMETERIVPROC)glfwGetProcAddress("glConvolutionParameteriv");
  glCopyConvolutionFilter1D = (PFNGLCOPYCONVOLUTIONFILTER1DPROC)glfwGetProcAddress("glCopyConvolutionFilter1D");
  glCopyConvolutionFilter2D = (PFNGLCOPYCONVOLUTIONFILTER2DPROC)glfwGetProcAddress("glCopyConvolutionFilter2D");
  glGetConvolutionFilter = (PFNGLGETCONVOLUTIONFILTERPROC)glfwGetProcAddress("glGetConvolutionFilter");
  glGetConvolutionParameterfv = (PFNGLGETCONVOLUTIONPARAMETERFVPROC)glfwGetProcAddress("glGetConvolutionParameterfv");
  glGetConvolutionParameteriv = (PFNGLGETCONVOLUTIONPARAMETERIVPROC)glfwGetProcAddress("glGetConvolutionParameteriv");
  glGetSeparableFilter = (PFNGLGETSEPARABLEFILTERPROC)glfwGetProcAddress("glGetSeparableFilter");
  glSeparableFilter2D = (PFNGLSEPARABLEFILTER2DPROC)glfwGetProcAddress("glSeparableFilter2D");
  glGetHistogram = (PFNGLGETHISTOGRAMPROC)glfwGetProcAddress("glGetHistogram");
  glGetHistogramParameterfv = (PFNGLGETHISTOGRAMPARAMETERFVPROC)glfwGetProcAddress("glGetHistogramParameterfv");
  glGetHistogramParameteriv = (PFNGLGETHISTOGRAMPARAMETERIVPROC)glfwGetProcAddress("glGetHistogramParameteriv");
  glGetMinmax = (PFNGLGETMINMAXPROC)glfwGetProcAddress("glGetMinmax");
  glGetMinmaxParameterfv = (PFNGLGETMINMAXPARAMETERFVPROC)glfwGetProcAddress("glGetMinmaxParameterfv");
  glGetMinmaxParameteriv = (PFNGLGETMINMAXPARAMETERIVPROC)glfwGetProcAddress("glGetMinmaxParameteriv");
  glHistogram = (PFNGLHISTOGRAMPROC)glfwGetProcAddress("glHistogram");
  glMinmax = (PFNGLMINMAXPROC)glfwGetProcAddress("glMinmax");
  glResetHistogram = (PFNGLRESETHISTOGRAMPROC)glfwGetProcAddress("glResetHistogram");
  glResetMinmax = (PFNGLRESETMINMAXPROC)glfwGetProcAddress("glResetMinmax");
  glActiveTexture = (PFNGLACTIVETEXTUREPROC)glfwGetProcAddress("glActiveTexture");
  glSampleCoverage = (PFNGLSAMPLECOVERAGEPROC)glfwGetProcAddress("glSampleCoverage");
  glCompressedTexImage3D = (PFNGLCOMPRESSEDTEXIMAGE3DPROC)glfwGetProcAddress("glCompressedTexImage3D");
  glCompressedTexImage2D = (PFNGLCOMPRESSEDTEXIMAGE2DPROC)glfwGetProcAddress("glCompressedTexImage2D");
  glCompressedTexImage1D = (PFNGLCOMPRESSEDTEXIMAGE1DPROC)glfwGetProcAddress("glCompressedTexImage1D");
  glCompressedTexSubImage3D = (PFNGLCOMPRESSEDTEXSUBIMAGE3DPROC)glfwGetProcAddress("glCompressedTexSubImage3D");
  glCompressedTexSubImage2D = (PFNGLCOMPRESSEDTEXSUBIMAGE2DPROC)glfwGetProcAddress("glCompressedTexSubImage2D");
  glCompressedTexSubImage1D = (PFNGLCOMPRESSEDTEXSUBIMAGE1DPROC)glfwGetProcAddress("glCompressedTexSubImage1D");
  glGetCompressedTexImage = (PFNGLGETCOMPRESSEDTEXIMAGEPROC)glfwGetProcAddress("glGetCompressedTexImage");
  glClientActiveTexture = (PFNGLCLIENTACTIVETEXTUREPROC)glfwGetProcAddress("glClientActiveTexture");
  glMultiTexCoord1d = (PFNGLMULTITEXCOORD1DPROC)glfwGetProcAddress("glMultiTexCoord1d");
  glMultiTexCoord1dv = (PFNGLMULTITEXCOORD1DVPROC)glfwGetProcAddress("glMultiTexCoord1dv");
  glMultiTexCoord1f = (PFNGLMULTITEXCOORD1FPROC)glfwGetProcAddress("glMultiTexCoord1f");
  glMultiTexCoord1fv = (PFNGLMULTITEXCOORD1FVPROC)glfwGetProcAddress("glMultiTexCoord1fv");
  glMultiTexCoord1i = (PFNGLMULTITEXCOORD1IPROC)glfwGetProcAddress("glMultiTexCoord1i");
  glMultiTexCoord1iv = (PFNGLMULTITEXCOORD1IVPROC)glfwGetProcAddress("glMultiTexCoord1iv");
  glMultiTexCoord1s = (PFNGLMULTITEXCOORD1SPROC)glfwGetProcAddress("glMultiTexCoord1s");
  glMultiTexCoord1sv = (PFNGLMULTITEXCOORD1SVPROC)glfwGetProcAddress("glMultiTexCoord1sv");
  glMultiTexCoord2d = (PFNGLMULTITEXCOORD2DPROC)glfwGetProcAddress("glMultiTexCoord2d");
  glMultiTexCoord2dv = (PFNGLMULTITEXCOORD2DVPROC)glfwGetProcAddress("glMultiTexCoord2dv");
  glMultiTexCoord2f = (PFNGLMULTITEXCOORD2FPROC)glfwGetProcAddress("glMultiTexCoord2f");
  glMultiTexCoord2fv = (PFNGLMULTITEXCOORD2FVPROC)glfwGetProcAddress("glMultiTexCoord2fv");
  glMultiTexCoord2i = (PFNGLMULTITEXCOORD2IPROC)glfwGetProcAddress("glMultiTexCoord2i");
  glMultiTexCoord2iv = (PFNGLMULTITEXCOORD2IVPROC)glfwGetProcAddress("glMultiTexCoord2iv");
  glMultiTexCoord2s = (PFNGLMULTITEXCOORD2SPROC)glfwGetProcAddress("glMultiTexCoord2s");
  glMultiTexCoord2sv = (PFNGLMULTITEXCOORD2SVPROC)glfwGetProcAddress("glMultiTexCoord2sv");
  glMultiTexCoord3d = (PFNGLMULTITEXCOORD3DPROC)glfwGetProcAddress("glMultiTexCoord3d");
  glMultiTexCoord3dv = (PFNGLMULTITEXCOORD3DVPROC)glfwGetProcAddress("glMultiTexCoord3dv");
  glMultiTexCoord3f = (PFNGLMULTITEXCOORD3FPROC)glfwGetProcAddress("glMultiTexCoord3f");
  glMultiTexCoord3fv = (PFNGLMULTITEXCOORD3FVPROC)glfwGetProcAddress("glMultiTexCoord3fv");
  glMultiTexCoord3i = (PFNGLMULTITEXCOORD3IPROC)glfwGetProcAddress("glMultiTexCoord3i");
  glMultiTexCoord3iv = (PFNGLMULTITEXCOORD3IVPROC)glfwGetProcAddress("glMultiTexCoord3iv");
  glMultiTexCoord3s = (PFNGLMULTITEXCOORD3SPROC)glfwGetProcAddress("glMultiTexCoord3s");
  glMultiTexCoord3sv = (PFNGLMULTITEXCOORD3SVPROC)glfwGetProcAddress("glMultiTexCoord3sv");
  glMultiTexCoord4d = (PFNGLMULTITEXCOORD4DPROC)glfwGetProcAddress("glMultiTexCoord4d");
  glMultiTexCoord4dv = (PFNGLMULTITEXCOORD4DVPROC)glfwGetProcAddress("glMultiTexCoord4dv");
  glMultiTexCoord4f = (PFNGLMULTITEXCOORD4FPROC)glfwGetProcAddress("glMultiTexCoord4f");
  glMultiTexCoord4fv = (PFNGLMULTITEXCOORD4FVPROC)glfwGetProcAddress("glMultiTexCoord4fv");
  glMultiTexCoord4i = (PFNGLMULTITEXCOORD4IPROC)glfwGetProcAddress("glMultiTexCoord4i");
  glMultiTexCoord4iv = (PFNGLMULTITEXCOORD4IVPROC)glfwGetProcAddress("glMultiTexCoord4iv");
  glMultiTexCoord4s = (PFNGLMULTITEXCOORD4SPROC)glfwGetProcAddress("glMultiTexCoord4s");
  glMultiTexCoord4sv = (PFNGLMULTITEXCOORD4SVPROC)glfwGetProcAddress("glMultiTexCoord4sv");
  glLoadTransposeMatrixf = (PFNGLLOADTRANSPOSEMATRIXFPROC)glfwGetProcAddress("glLoadTransposeMatrixf");
  glLoadTransposeMatrixd = (PFNGLLOADTRANSPOSEMATRIXDPROC)glfwGetProcAddress("glLoadTransposeMatrixd");
  glMultTransposeMatrixf = (PFNGLMULTTRANSPOSEMATRIXFPROC)glfwGetProcAddress("glMultTransposeMatrixf");
  glMultTransposeMatrixd = (PFNGLMULTTRANSPOSEMATRIXDPROC)glfwGetProcAddress("glMultTransposeMatrixd");
  glBlendFuncSeparate = (PFNGLBLENDFUNCSEPARATEPROC)glfwGetProcAddress("glBlendFuncSeparate");
  glMultiDrawArrays = (PFNGLMULTIDRAWARRAYSPROC)glfwGetProcAddress("glMultiDrawArrays");
  glMultiDrawElements = (PFNGLMULTIDRAWELEMENTSPROC)glfwGetProcAddress("glMultiDrawElements");
  glPointParameterf = (PFNGLPOINTPARAMETERFPROC)glfwGetProcAddress("glPointParameterf");
  glPointParameterfv = (PFNGLPOINTPARAMETERFVPROC)glfwGetProcAddress("glPointParameterfv");
  glPointParameteri = (PFNGLPOINTPARAMETERIPROC)glfwGetProcAddress("glPointParameteri");
  glPointParameteriv = (PFNGLPOINTPARAMETERIVPROC)glfwGetProcAddress("glPointParameteriv");
  glFogCoordf = (PFNGLFOGCOORDFPROC)glfwGetProcAddress("glFogCoordf");
  glFogCoordfv = (PFNGLFOGCOORDFVPROC)glfwGetProcAddress("glFogCoordfv");
  glFogCoordd = (PFNGLFOGCOORDDPROC)glfwGetProcAddress("glFogCoordd");
  glFogCoorddv = (PFNGLFOGCOORDDVPROC)glfwGetProcAddress("glFogCoorddv");
  glFogCoordPointer = (PFNGLFOGCOORDPOINTERPROC)glfwGetProcAddress("glFogCoordPointer");
  glSecondaryColor3b = (PFNGLSECONDARYCOLOR3BPROC)glfwGetProcAddress("glSecondaryColor3b");
  glSecondaryColor3bv = (PFNGLSECONDARYCOLOR3BVPROC)glfwGetProcAddress("glSecondaryColor3bv");
  glSecondaryColor3d = (PFNGLSECONDARYCOLOR3DPROC)glfwGetProcAddress("glSecondaryColor3d");
  glSecondaryColor3dv = (PFNGLSECONDARYCOLOR3DVPROC)glfwGetProcAddress("glSecondaryColor3dv");
  glSecondaryColor3f = (PFNGLSECONDARYCOLOR3FPROC)glfwGetProcAddress("glSecondaryColor3f");
  glSecondaryColor3fv = (PFNGLSECONDARYCOLOR3FVPROC)glfwGetProcAddress("glSecondaryColor3fv");
  glSecondaryColor3i = (PFNGLSECONDARYCOLOR3IPROC)glfwGetProcAddress("glSecondaryColor3i");
  glSecondaryColor3iv = (PFNGLSECONDARYCOLOR3IVPROC)glfwGetProcAddress("glSecondaryColor3iv");
  glSecondaryColor3s = (PFNGLSECONDARYCOLOR3SPROC)glfwGetProcAddress("glSecondaryColor3s");
  glSecondaryColor3sv = (PFNGLSECONDARYCOLOR3SVPROC)glfwGetProcAddress("glSecondaryColor3sv");
  glSecondaryColor3ub = (PFNGLSECONDARYCOLOR3UBPROC)glfwGetProcAddress("glSecondaryColor3ub");
  glSecondaryColor3ubv = (PFNGLSECONDARYCOLOR3UBVPROC)glfwGetProcAddress("glSecondaryColor3ubv");
  glSecondaryColor3ui = (PFNGLSECONDARYCOLOR3UIPROC)glfwGetProcAddress("glSecondaryColor3ui");
  glSecondaryColor3uiv = (PFNGLSECONDARYCOLOR3UIVPROC)glfwGetProcAddress("glSecondaryColor3uiv");
  glSecondaryColor3us = (PFNGLSECONDARYCOLOR3USPROC)glfwGetProcAddress("glSecondaryColor3us");
  glSecondaryColor3usv = (PFNGLSECONDARYCOLOR3USVPROC)glfwGetProcAddress("glSecondaryColor3usv");
  glSecondaryColorPointer = (PFNGLSECONDARYCOLORPOINTERPROC)glfwGetProcAddress("glSecondaryColorPointer");
  glWindowPos2d = (PFNGLWINDOWPOS2DPROC)glfwGetProcAddress("glWindowPos2d");
  glWindowPos2dv = (PFNGLWINDOWPOS2DVPROC)glfwGetProcAddress("glWindowPos2dv");
  glWindowPos2f = (PFNGLWINDOWPOS2FPROC)glfwGetProcAddress("glWindowPos2f");
  glWindowPos2fv = (PFNGLWINDOWPOS2FVPROC)glfwGetProcAddress("glWindowPos2fv");
  glWindowPos2i = (PFNGLWINDOWPOS2IPROC)glfwGetProcAddress("glWindowPos2i");
  glWindowPos2iv = (PFNGLWINDOWPOS2IVPROC)glfwGetProcAddress("glWindowPos2iv");
  glWindowPos2s = (PFNGLWINDOWPOS2SPROC)glfwGetProcAddress("glWindowPos2s");
  glWindowPos2sv = (PFNGLWINDOWPOS2SVPROC)glfwGetProcAddress("glWindowPos2sv");
  glWindowPos3d = (PFNGLWINDOWPOS3DPROC)glfwGetProcAddress("glWindowPos3d");
  glWindowPos3dv = (PFNGLWINDOWPOS3DVPROC)glfwGetProcAddress("glWindowPos3dv");
  glWindowPos3f = (PFNGLWINDOWPOS3FPROC)glfwGetProcAddress("glWindowPos3f");
  glWindowPos3fv = (PFNGLWINDOWPOS3FVPROC)glfwGetProcAddress("glWindowPos3fv");
  glWindowPos3i = (PFNGLWINDOWPOS3IPROC)glfwGetProcAddress("glWindowPos3i");
  glWindowPos3iv = (PFNGLWINDOWPOS3IVPROC)glfwGetProcAddress("glWindowPos3iv");
  glWindowPos3s = (PFNGLWINDOWPOS3SPROC)glfwGetProcAddress("glWindowPos3s");
  glWindowPos3sv = (PFNGLWINDOWPOS3SVPROC)glfwGetProcAddress("glWindowPos3sv");
  glGenQueries = (PFNGLGENQUERIESPROC)glfwGetProcAddress("glGenQueries");
  glDeleteQueries = (PFNGLDELETEQUERIESPROC)glfwGetProcAddress("glDeleteQueries");
  glIsQuery = (PFNGLISQUERYPROC)glfwGetProcAddress("glIsQuery");
  glBeginQuery = (PFNGLBEGINQUERYPROC)glfwGetProcAddress("glBeginQuery");
  glEndQuery = (PFNGLENDQUERYPROC)glfwGetProcAddress("glEndQuery");
  glGetQueryiv = (PFNGLGETQUERYIVPROC)glfwGetProcAddress("glGetQueryiv");
  glGetQueryObjectiv = (PFNGLGETQUERYOBJECTIVPROC)glfwGetProcAddress("glGetQueryObjectiv");
  glGetQueryObjectuiv = (PFNGLGETQUERYOBJECTUIVPROC)glfwGetProcAddress("glGetQueryObjectuiv");
  glBindBuffer = (PFNGLBINDBUFFERPROC)glfwGetProcAddress("glBindBuffer");
  glDeleteBuffers = (PFNGLDELETEBUFFERSPROC)glfwGetProcAddress("glDeleteBuffers");
  glGenBuffers = (PFNGLGENBUFFERSPROC)glfwGetProcAddress("glGenBuffers");
  glIsBuffer = (PFNGLISBUFFERPROC)glfwGetProcAddress("glIsBuffer");
  glBufferData = (PFNGLBUFFERDATAPROC)glfwGetProcAddress("glBufferData");
  glBufferSubData = (PFNGLBUFFERSUBDATAPROC)glfwGetProcAddress("glBufferSubData");
  glGetBufferSubData = (PFNGLGETBUFFERSUBDATAPROC)glfwGetProcAddress("glGetBufferSubData");
  glMapBuffer = (PFNGLMAPBUFFERPROC)glfwGetProcAddress("glMapBuffer");
  glUnmapBuffer = (PFNGLUNMAPBUFFERPROC)glfwGetProcAddress("glUnmapBuffer");
  glGetBufferParameteriv = (PFNGLGETBUFFERPARAMETERIVPROC)glfwGetProcAddress("glGetBufferParameteriv");
  glGetBufferPointerv = (PFNGLGETBUFFERPOINTERVPROC)glfwGetProcAddress("glGetBufferPointerv");
  glBlendEquationSeparate = (PFNGLBLENDEQUATIONSEPARATEPROC)glfwGetProcAddress("glBlendEquationSeparate");
  glDrawBuffers = (PFNGLDRAWBUFFERSPROC)glfwGetProcAddress("glDrawBuffers");
  glStencilOpSeparate = (PFNGLSTENCILOPSEPARATEPROC)glfwGetProcAddress("glStencilOpSeparate");
  glStencilFuncSeparate = (PFNGLSTENCILFUNCSEPARATEPROC)glfwGetProcAddress("glStencilFuncSeparate");
  glStencilMaskSeparate = (PFNGLSTENCILMASKSEPARATEPROC)glfwGetProcAddress("glStencilMaskSeparate");
  glAttachShader = (PFNGLATTACHSHADERPROC)glfwGetProcAddress("glAttachShader");
  glBindAttribLocation = (PFNGLBINDATTRIBLOCATIONPROC)glfwGetProcAddress("glBindAttribLocation");
  glCompileShader = (PFNGLCOMPILESHADERPROC)glfwGetProcAddress("glCompileShader");
  glCreateProgram = (PFNGLCREATEPROGRAMPROC)glfwGetProcAddress("glCreateProgram");
  glCreateShader = (PFNGLCREATESHADERPROC)glfwGetProcAddress("glCreateShader");
  glDeleteProgram = (PFNGLDELETEPROGRAMPROC)glfwGetProcAddress("glDeleteProgram");
  glDeleteShader = (PFNGLDELETESHADERPROC)glfwGetProcAddress("glDeleteShader");
  glDetachShader = (PFNGLDETACHSHADERPROC)glfwGetProcAddress("glDetachShader");
  glDisableVertexAttribArray = (PFNGLDISABLEVERTEXATTRIBARRAYPROC)glfwGetProcAddress("glDisableVertexAttribArray");
  glEnableVertexAttribArray = (PFNGLENABLEVERTEXATTRIBARRAYPROC)glfwGetProcAddress("glEnableVertexAttribArray");
  glGetActiveAttrib = (PFNGLGETACTIVEATTRIBPROC)glfwGetProcAddress("glGetActiveAttrib");
  glGetActiveUniform = (PFNGLGETACTIVEUNIFORMPROC)glfwGetProcAddress("glGetActiveUniform");
  glGetAttachedShaders = (PFNGLGETATTACHEDSHADERSPROC)glfwGetProcAddress("glGetAttachedShaders");
  glGetAttribLocation = (PFNGLGETATTRIBLOCATIONPROC)glfwGetProcAddress("glGetAttribLocation");
  glGetProgramiv = (PFNGLGETPROGRAMIVPROC)glfwGetProcAddress("glGetProgramiv");
  glGetProgramInfoLog = (PFNGLGETPROGRAMINFOLOGPROC)glfwGetProcAddress("glGetProgramInfoLog");
  glGetShaderiv = (PFNGLGETSHADERIVPROC)glfwGetProcAddress("glGetShaderiv");
  glGetShaderInfoLog = (PFNGLGETSHADERINFOLOGPROC)glfwGetProcAddress("glGetShaderInfoLog");
  glGetShaderSource = (PFNGLGETSHADERSOURCEPROC)glfwGetProcAddress("glGetShaderSource");
  glGetUniformLocation = (PFNGLGETUNIFORMLOCATIONPROC)glfwGetProcAddress("glGetUniformLocation");
  glGetUniformfv = (PFNGLGETUNIFORMFVPROC)glfwGetProcAddress("glGetUniformfv");
  glGetUniformiv = (PFNGLGETUNIFORMIVPROC)glfwGetProcAddress("glGetUniformiv");
  glGetVertexAttribdv = (PFNGLGETVERTEXATTRIBDVPROC)glfwGetProcAddress("glGetVertexAttribdv");
  glGetVertexAttribfv = (PFNGLGETVERTEXATTRIBFVPROC)glfwGetProcAddress("glGetVertexAttribfv");
  glGetVertexAttribiv = (PFNGLGETVERTEXATTRIBIVPROC)glfwGetProcAddress("glGetVertexAttribiv");
  glGetVertexAttribPointerv = (PFNGLGETVERTEXATTRIBPOINTERVPROC)glfwGetProcAddress("glGetVertexAttribPointerv");
  glIsProgram = (PFNGLISPROGRAMPROC)glfwGetProcAddress("glIsProgram");
  glIsShader = (PFNGLISSHADERPROC)glfwGetProcAddress("glIsShader");
  glLinkProgram = (PFNGLLINKPROGRAMPROC)glfwGetProcAddress("glLinkProgram");
  glShaderSource = (PFNGLSHADERSOURCEPROC)glfwGetProcAddress("glShaderSource");
  glUseProgram = (PFNGLUSEPROGRAMPROC)glfwGetProcAddress("glUseProgram");
  glUniform1f = (PFNGLUNIFORM1FPROC)glfwGetProcAddress("glUniform1f");
  glUniform2f = (PFNGLUNIFORM2FPROC)glfwGetProcAddress("glUniform2f");
  glUniform3f = (PFNGLUNIFORM3FPROC)glfwGetProcAddress("glUniform3f");
  glUniform4f = (PFNGLUNIFORM4FPROC)glfwGetProcAddress("glUniform4f");
  glUniform1i = (PFNGLUNIFORM1IPROC)glfwGetProcAddress("glUniform1i");
  glUniform2i = (PFNGLUNIFORM2IPROC)glfwGetProcAddress("glUniform2i");
  glUniform3i = (PFNGLUNIFORM3IPROC)glfwGetProcAddress("glUniform3i");
  glUniform4i = (PFNGLUNIFORM4IPROC)glfwGetProcAddress("glUniform4i");
  glUniform1fv = (PFNGLUNIFORM1FVPROC)glfwGetProcAddress("glUniform1fv");
  glUniform2fv = (PFNGLUNIFORM2FVPROC)glfwGetProcAddress("glUniform2fv");
  glUniform3fv = (PFNGLUNIFORM3FVPROC)glfwGetProcAddress("glUniform3fv");
  glUniform4fv = (PFNGLUNIFORM4FVPROC)glfwGetProcAddress("glUniform4fv");
  glUniform1iv = (PFNGLUNIFORM1IVPROC)glfwGetProcAddress("glUniform1iv");
  glUniform2iv = (PFNGLUNIFORM2IVPROC)glfwGetProcAddress("glUniform2iv");
  glUniform3iv = (PFNGLUNIFORM3IVPROC)glfwGetProcAddress("glUniform3iv");
  glUniform4iv = (PFNGLUNIFORM4IVPROC)glfwGetProcAddress("glUniform4iv");
  glUniformMatrix2fv = (PFNGLUNIFORMMATRIX2FVPROC)glfwGetProcAddress("glUniformMatrix2fv");
  glUniformMatrix3fv = (PFNGLUNIFORMMATRIX3FVPROC)glfwGetProcAddress("glUniformMatrix3fv");
  glUniformMatrix4fv = (PFNGLUNIFORMMATRIX4FVPROC)glfwGetProcAddress("glUniformMatrix4fv");
  glValidateProgram = (PFNGLVALIDATEPROGRAMPROC)glfwGetProcAddress("glValidateProgram");
  glVertexAttrib1d = (PFNGLVERTEXATTRIB1DPROC)glfwGetProcAddress("glVertexAttrib1d");
  glVertexAttrib1dv = (PFNGLVERTEXATTRIB1DVPROC)glfwGetProcAddress("glVertexAttrib1dv");
  glVertexAttrib1f = (PFNGLVERTEXATTRIB1FPROC)glfwGetProcAddress("glVertexAttrib1f");
  glVertexAttrib1fv = (PFNGLVERTEXATTRIB1FVPROC)glfwGetProcAddress("glVertexAttrib1fv");
  glVertexAttrib1s = (PFNGLVERTEXATTRIB1SPROC)glfwGetProcAddress("glVertexAttrib1s");
  glVertexAttrib1sv = (PFNGLVERTEXATTRIB1SVPROC)glfwGetProcAddress("glVertexAttrib1sv");
  glVertexAttrib2d = (PFNGLVERTEXATTRIB2DPROC)glfwGetProcAddress("glVertexAttrib2d");
  glVertexAttrib2dv = (PFNGLVERTEXATTRIB2DVPROC)glfwGetProcAddress("glVertexAttrib2dv");
  glVertexAttrib2f = (PFNGLVERTEXATTRIB2FPROC)glfwGetProcAddress("glVertexAttrib2f");
  glVertexAttrib2fv = (PFNGLVERTEXATTRIB2FVPROC)glfwGetProcAddress("glVertexAttrib2fv");
  glVertexAttrib2s = (PFNGLVERTEXATTRIB2SPROC)glfwGetProcAddress("glVertexAttrib2s");
  glVertexAttrib2sv = (PFNGLVERTEXATTRIB2SVPROC)glfwGetProcAddress("glVertexAttrib2sv");
  glVertexAttrib3d = (PFNGLVERTEXATTRIB3DPROC)glfwGetProcAddress("glVertexAttrib3d");
  glVertexAttrib3dv = (PFNGLVERTEXATTRIB3DVPROC)glfwGetProcAddress("glVertexAttrib3dv");
  glVertexAttrib3f = (PFNGLVERTEXATTRIB3FPROC)glfwGetProcAddress("glVertexAttrib3f");
  glVertexAttrib3fv = (PFNGLVERTEXATTRIB3FVPROC)glfwGetProcAddress("glVertexAttrib3fv");
  glVertexAttrib3s = (PFNGLVERTEXATTRIB3SPROC)glfwGetProcAddress("glVertexAttrib3s");
  glVertexAttrib3sv = (PFNGLVERTEXATTRIB3SVPROC)glfwGetProcAddress("glVertexAttrib3sv");
  glVertexAttrib4Nbv = (PFNGLVERTEXATTRIB4NBVPROC)glfwGetProcAddress("glVertexAttrib4Nbv");
  glVertexAttrib4Niv = (PFNGLVERTEXATTRIB4NIVPROC)glfwGetProcAddress("glVertexAttrib4Niv");
  glVertexAttrib4Nsv = (PFNGLVERTEXATTRIB4NSVPROC)glfwGetProcAddress("glVertexAttrib4Nsv");
  glVertexAttrib4Nub = (PFNGLVERTEXATTRIB4NUBPROC)glfwGetProcAddress("glVertexAttrib4Nub");
  glVertexAttrib4Nubv = (PFNGLVERTEXATTRIB4NUBVPROC)glfwGetProcAddress("glVertexAttrib4Nubv");
  glVertexAttrib4Nuiv = (PFNGLVERTEXATTRIB4NUIVPROC)glfwGetProcAddress("glVertexAttrib4Nuiv");
  glVertexAttrib4Nusv = (PFNGLVERTEXATTRIB4NUSVPROC)glfwGetProcAddress("glVertexAttrib4Nusv");
  glVertexAttrib4bv = (PFNGLVERTEXATTRIB4BVPROC)glfwGetProcAddress("glVertexAttrib4bv");
  glVertexAttrib4d = (PFNGLVERTEXATTRIB4DPROC)glfwGetProcAddress("glVertexAttrib4d");
  glVertexAttrib4dv = (PFNGLVERTEXATTRIB4DVPROC)glfwGetProcAddress("glVertexAttrib4dv");
  glVertexAttrib4f = (PFNGLVERTEXATTRIB4FPROC)glfwGetProcAddress("glVertexAttrib4f");
  glVertexAttrib4fv = (PFNGLVERTEXATTRIB4FVPROC)glfwGetProcAddress("glVertexAttrib4fv");
  glVertexAttrib4iv = (PFNGLVERTEXATTRIB4IVPROC)glfwGetProcAddress("glVertexAttrib4iv");
  glVertexAttrib4s = (PFNGLVERTEXATTRIB4SPROC)glfwGetProcAddress("glVertexAttrib4s");
  glVertexAttrib4sv = (PFNGLVERTEXATTRIB4SVPROC)glfwGetProcAddress("glVertexAttrib4sv");
  glVertexAttrib4ubv = (PFNGLVERTEXATTRIB4UBVPROC)glfwGetProcAddress("glVertexAttrib4ubv");
  glVertexAttrib4uiv = (PFNGLVERTEXATTRIB4UIVPROC)glfwGetProcAddress("glVertexAttrib4uiv");
  glVertexAttrib4usv = (PFNGLVERTEXATTRIB4USVPROC)glfwGetProcAddress("glVertexAttrib4usv");
  glVertexAttribPointer = (PFNGLVERTEXATTRIBPOINTERPROC)glfwGetProcAddress("glVertexAttribPointer");
  glUniformMatrix2x3fv = (PFNGLUNIFORMMATRIX2X3FVPROC)glfwGetProcAddress("glUniformMatrix2x3fv");
  glUniformMatrix3x2fv = (PFNGLUNIFORMMATRIX3X2FVPROC)glfwGetProcAddress("glUniformMatrix3x2fv");
  glUniformMatrix2x4fv = (PFNGLUNIFORMMATRIX2X4FVPROC)glfwGetProcAddress("glUniformMatrix2x4fv");
  glUniformMatrix4x2fv = (PFNGLUNIFORMMATRIX4X2FVPROC)glfwGetProcAddress("glUniformMatrix4x2fv");
  glUniformMatrix3x4fv = (PFNGLUNIFORMMATRIX3X4FVPROC)glfwGetProcAddress("glUniformMatrix3x4fv");
  glUniformMatrix4x3fv = (PFNGLUNIFORMMATRIX4X3FVPROC)glfwGetProcAddress("glUniformMatrix4x3fv");
  glColorMaski = (PFNGLCOLORMASKIPROC)glfwGetProcAddress("glColorMaski");
  glGetBooleani_v = (PFNGLGETBOOLEANI_VPROC)glfwGetProcAddress("glGetBooleani_v");
  glGetIntegeri_v = (PFNGLGETINTEGERI_VPROC)glfwGetProcAddress("glGetIntegeri_v");
  glEnablei = (PFNGLENABLEIPROC)glfwGetProcAddress("glEnablei");
  glDisablei = (PFNGLDISABLEIPROC)glfwGetProcAddress("glDisablei");
  glIsEnabledi = (PFNGLISENABLEDIPROC)glfwGetProcAddress("glIsEnabledi");
  glBeginTransformFeedback = (PFNGLBEGINTRANSFORMFEEDBACKPROC)glfwGetProcAddress("glBeginTransformFeedback");
  glEndTransformFeedback = (PFNGLENDTRANSFORMFEEDBACKPROC)glfwGetProcAddress("glEndTransformFeedback");
  glBindBufferRange = (PFNGLBINDBUFFERRANGEPROC)glfwGetProcAddress("glBindBufferRange");
  glBindBufferBase = (PFNGLBINDBUFFERBASEPROC)glfwGetProcAddress("glBindBufferBase");
  glTransformFeedbackVaryings = (PFNGLTRANSFORMFEEDBACKVARYINGSPROC)glfwGetProcAddress("glTransformFeedbackVaryings");
  glGetTransformFeedbackVarying = (PFNGLGETTRANSFORMFEEDBACKVARYINGPROC)glfwGetProcAddress("glGetTransformFeedbackVarying");
  glClampColor = (PFNGLCLAMPCOLORPROC)glfwGetProcAddress("glClampColor");
  glBeginConditionalRender = (PFNGLBEGINCONDITIONALRENDERPROC)glfwGetProcAddress("glBeginConditionalRender");
  glEndConditionalRender = (PFNGLENDCONDITIONALRENDERPROC)glfwGetProcAddress("glEndConditionalRender");
  glVertexAttribIPointer = (PFNGLVERTEXATTRIBIPOINTERPROC)glfwGetProcAddress("glVertexAttribIPointer");
  glGetVertexAttribIiv = (PFNGLGETVERTEXATTRIBIIVPROC)glfwGetProcAddress("glGetVertexAttribIiv");
  glGetVertexAttribIuiv = (PFNGLGETVERTEXATTRIBIUIVPROC)glfwGetProcAddress("glGetVertexAttribIuiv");
  glVertexAttribI1i = (PFNGLVERTEXATTRIBI1IPROC)glfwGetProcAddress("glVertexAttribI1i");
  glVertexAttribI2i = (PFNGLVERTEXATTRIBI2IPROC)glfwGetProcAddress("glVertexAttribI2i");
  glVertexAttribI3i = (PFNGLVERTEXATTRIBI3IPROC)glfwGetProcAddress("glVertexAttribI3i");
  glVertexAttribI4i = (PFNGLVERTEXATTRIBI4IPROC)glfwGetProcAddress("glVertexAttribI4i");
  glVertexAttribI1ui = (PFNGLVERTEXATTRIBI1UIPROC)glfwGetProcAddress("glVertexAttribI1ui");
  glVertexAttribI2ui = (PFNGLVERTEXATTRIBI2UIPROC)glfwGetProcAddress("glVertexAttribI2ui");
  glVertexAttribI3ui = (PFNGLVERTEXATTRIBI3UIPROC)glfwGetProcAddress("glVertexAttribI3ui");
  glVertexAttribI4ui = (PFNGLVERTEXATTRIBI4UIPROC)glfwGetProcAddress("glVertexAttribI4ui");
  glVertexAttribI1iv = (PFNGLVERTEXATTRIBI1IVPROC)glfwGetProcAddress("glVertexAttribI1iv");
  glVertexAttribI2iv = (PFNGLVERTEXATTRIBI2IVPROC)glfwGetProcAddress("glVertexAttribI2iv");
  glVertexAttribI3iv = (PFNGLVERTEXATTRIBI3IVPROC)glfwGetProcAddress("glVertexAttribI3iv");
  glVertexAttribI4iv = (PFNGLVERTEXATTRIBI4IVPROC)glfwGetProcAddress("glVertexAttribI4iv");
  glVertexAttribI1uiv = (PFNGLVERTEXATTRIBI1UIVPROC)glfwGetProcAddress("glVertexAttribI1uiv");
  glVertexAttribI2uiv = (PFNGLVERTEXATTRIBI2UIVPROC)glfwGetProcAddress("glVertexAttribI2uiv");
  glVertexAttribI3uiv = (PFNGLVERTEXATTRIBI3UIVPROC)glfwGetProcAddress("glVertexAttribI3uiv");
  glVertexAttribI4uiv = (PFNGLVERTEXATTRIBI4UIVPROC)glfwGetProcAddress("glVertexAttribI4uiv");
  glVertexAttribI4bv = (PFNGLVERTEXATTRIBI4BVPROC)glfwGetProcAddress("glVertexAttribI4bv");
  glVertexAttribI4sv = (PFNGLVERTEXATTRIBI4SVPROC)glfwGetProcAddress("glVertexAttribI4sv");
  glVertexAttribI4ubv = (PFNGLVERTEXATTRIBI4UBVPROC)glfwGetProcAddress("glVertexAttribI4ubv");
  glVertexAttribI4usv = (PFNGLVERTEXATTRIBI4USVPROC)glfwGetProcAddress("glVertexAttribI4usv");
  glGetUniformuiv = (PFNGLGETUNIFORMUIVPROC)glfwGetProcAddress("glGetUniformuiv");
  glBindFragDataLocation = (PFNGLBINDFRAGDATALOCATIONPROC)glfwGetProcAddress("glBindFragDataLocation");
  glGetFragDataLocation = (PFNGLGETFRAGDATALOCATIONPROC)glfwGetProcAddress("glGetFragDataLocation");
  glUniform1ui = (PFNGLUNIFORM1UIPROC)glfwGetProcAddress("glUniform1ui");
  glUniform2ui = (PFNGLUNIFORM2UIPROC)glfwGetProcAddress("glUniform2ui");
  glUniform3ui = (PFNGLUNIFORM3UIPROC)glfwGetProcAddress("glUniform3ui");
  glUniform4ui = (PFNGLUNIFORM4UIPROC)glfwGetProcAddress("glUniform4ui");
  glUniform1uiv = (PFNGLUNIFORM1UIVPROC)glfwGetProcAddress("glUniform1uiv");
  glUniform2uiv = (PFNGLUNIFORM2UIVPROC)glfwGetProcAddress("glUniform2uiv");
  glUniform3uiv = (PFNGLUNIFORM3UIVPROC)glfwGetProcAddress("glUniform3uiv");
  glUniform4uiv = (PFNGLUNIFORM4UIVPROC)glfwGetProcAddress("glUniform4uiv");
  glTexParameterIiv = (PFNGLTEXPARAMETERIIVPROC)glfwGetProcAddress("glTexParameterIiv");
  glTexParameterIuiv = (PFNGLTEXPARAMETERIUIVPROC)glfwGetProcAddress("glTexParameterIuiv");
  glGetTexParameterIiv = (PFNGLGETTEXPARAMETERIIVPROC)glfwGetProcAddress("glGetTexParameterIiv");
  glGetTexParameterIuiv = (PFNGLGETTEXPARAMETERIUIVPROC)glfwGetProcAddress("glGetTexParameterIuiv");
  glClearBufferiv = (PFNGLCLEARBUFFERIVPROC)glfwGetProcAddress("glClearBufferiv");
  glClearBufferuiv = (PFNGLCLEARBUFFERUIVPROC)glfwGetProcAddress("glClearBufferuiv");
  glClearBufferfv = (PFNGLCLEARBUFFERFVPROC)glfwGetProcAddress("glClearBufferfv");
  glClearBufferfi = (PFNGLCLEARBUFFERFIPROC)glfwGetProcAddress("glClearBufferfi");
  glGetStringi = (PFNGLGETSTRINGIPROC)glfwGetProcAddress("glGetStringi");
  glDrawArraysInstanced = (PFNGLDRAWARRAYSINSTANCEDPROC)glfwGetProcAddress("glDrawArraysInstanced");
  glDrawElementsInstanced = (PFNGLDRAWELEMENTSINSTANCEDPROC)glfwGetProcAddress("glDrawElementsInstanced");
  glTexBuffer = (PFNGLTEXBUFFERPROC)glfwGetProcAddress("glTexBuffer");
  glPrimitiveRestartIndex = (PFNGLPRIMITIVERESTARTINDEXPROC)glfwGetProcAddress("glPrimitiveRestartIndex");
  glGetInteger64i_v = (PFNGLGETINTEGER64I_VPROC)glfwGetProcAddress("glGetInteger64i_v");
  glGetBufferParameteri64v = (PFNGLGETBUFFERPARAMETERI64VPROC)glfwGetProcAddress("glGetBufferParameteri64v");
  glFramebufferTexture = (PFNGLFRAMEBUFFERTEXTUREPROC)glfwGetProcAddress("glFramebufferTexture");
  glVertexAttribDivisor = (PFNGLVERTEXATTRIBDIVISORPROC)glfwGetProcAddress("glVertexAttribDivisor");
  glMinSampleShading = (PFNGLMINSAMPLESHADINGPROC)glfwGetProcAddress("glMinSampleShading");
  glBlendEquationi = (PFNGLBLENDEQUATIONIPROC)glfwGetProcAddress("glBlendEquationi");
  glBlendEquationSeparatei = (PFNGLBLENDEQUATIONSEPARATEIPROC)glfwGetProcAddress("glBlendEquationSeparatei");
  glBlendFunci = (PFNGLBLENDFUNCIPROC)glfwGetProcAddress("glBlendFunci");
  glBlendFuncSeparatei = (PFNGLBLENDFUNCSEPARATEIPROC)glfwGetProcAddress("glBlendFuncSeparatei");
  glActiveTextureARB = (PFNGLACTIVETEXTUREARBPROC)glfwGetProcAddress("glActiveTextureARB");
  glClientActiveTextureARB = (PFNGLCLIENTACTIVETEXTUREARBPROC)glfwGetProcAddress("glClientActiveTextureARB");
  glMultiTexCoord1dARB = (PFNGLMULTITEXCOORD1DARBPROC)glfwGetProcAddress("glMultiTexCoord1dARB");
  glMultiTexCoord1dvARB = (PFNGLMULTITEXCOORD1DVARBPROC)glfwGetProcAddress("glMultiTexCoord1dvARB");
  glMultiTexCoord1fARB = (PFNGLMULTITEXCOORD1FARBPROC)glfwGetProcAddress("glMultiTexCoord1fARB");
  glMultiTexCoord1fvARB = (PFNGLMULTITEXCOORD1FVARBPROC)glfwGetProcAddress("glMultiTexCoord1fvARB");
  glMultiTexCoord1iARB = (PFNGLMULTITEXCOORD1IARBPROC)glfwGetProcAddress("glMultiTexCoord1iARB");
  glMultiTexCoord1ivARB = (PFNGLMULTITEXCOORD1IVARBPROC)glfwGetProcAddress("glMultiTexCoord1ivARB");
  glMultiTexCoord1sARB = (PFNGLMULTITEXCOORD1SARBPROC)glfwGetProcAddress("glMultiTexCoord1sARB");
  glMultiTexCoord1svARB = (PFNGLMULTITEXCOORD1SVARBPROC)glfwGetProcAddress("glMultiTexCoord1svARB");
  glMultiTexCoord2dARB = (PFNGLMULTITEXCOORD2DARBPROC)glfwGetProcAddress("glMultiTexCoord2dARB");
  glMultiTexCoord2dvARB = (PFNGLMULTITEXCOORD2DVARBPROC)glfwGetProcAddress("glMultiTexCoord2dvARB");
  glMultiTexCoord2fARB = (PFNGLMULTITEXCOORD2FARBPROC)glfwGetProcAddress("glMultiTexCoord2fARB");
  glMultiTexCoord2fvARB = (PFNGLMULTITEXCOORD2FVARBPROC)glfwGetProcAddress("glMultiTexCoord2fvARB");
  glMultiTexCoord2iARB = (PFNGLMULTITEXCOORD2IARBPROC)glfwGetProcAddress("glMultiTexCoord2iARB");
  glMultiTexCoord2ivARB = (PFNGLMULTITEXCOORD2IVARBPROC)glfwGetProcAddress("glMultiTexCoord2ivARB");
  glMultiTexCoord2sARB = (PFNGLMULTITEXCOORD2SARBPROC)glfwGetProcAddress("glMultiTexCoord2sARB");
  glMultiTexCoord2svARB = (PFNGLMULTITEXCOORD2SVARBPROC)glfwGetProcAddress("glMultiTexCoord2svARB");
  glMultiTexCoord3dARB = (PFNGLMULTITEXCOORD3DARBPROC)glfwGetProcAddress("glMultiTexCoord3dARB");
  glMultiTexCoord3dvARB = (PFNGLMULTITEXCOORD3DVARBPROC)glfwGetProcAddress("glMultiTexCoord3dvARB");
  glMultiTexCoord3fARB = (PFNGLMULTITEXCOORD3FARBPROC)glfwGetProcAddress("glMultiTexCoord3fARB");
  glMultiTexCoord3fvARB = (PFNGLMULTITEXCOORD3FVARBPROC)glfwGetProcAddress("glMultiTexCoord3fvARB");
  glMultiTexCoord3iARB = (PFNGLMULTITEXCOORD3IARBPROC)glfwGetProcAddress("glMultiTexCoord3iARB");
  glMultiTexCoord3ivARB = (PFNGLMULTITEXCOORD3IVARBPROC)glfwGetProcAddress("glMultiTexCoord3ivARB");
  glMultiTexCoord3sARB = (PFNGLMULTITEXCOORD3SARBPROC)glfwGetProcAddress("glMultiTexCoord3sARB");
  glMultiTexCoord3svARB = (PFNGLMULTITEXCOORD3SVARBPROC)glfwGetProcAddress("glMultiTexCoord3svARB");
  glMultiTexCoord4dARB = (PFNGLMULTITEXCOORD4DARBPROC)glfwGetProcAddress("glMultiTexCoord4dARB");
  glMultiTexCoord4dvARB = (PFNGLMULTITEXCOORD4DVARBPROC)glfwGetProcAddress("glMultiTexCoord4dvARB");
  glMultiTexCoord4fARB = (PFNGLMULTITEXCOORD4FARBPROC)glfwGetProcAddress("glMultiTexCoord4fARB");
  glMultiTexCoord4fvARB = (PFNGLMULTITEXCOORD4FVARBPROC)glfwGetProcAddress("glMultiTexCoord4fvARB");
  glMultiTexCoord4iARB = (PFNGLMULTITEXCOORD4IARBPROC)glfwGetProcAddress("glMultiTexCoord4iARB");
  glMultiTexCoord4ivARB = (PFNGLMULTITEXCOORD4IVARBPROC)glfwGetProcAddress("glMultiTexCoord4ivARB");
  glMultiTexCoord4sARB = (PFNGLMULTITEXCOORD4SARBPROC)glfwGetProcAddress("glMultiTexCoord4sARB");
  glMultiTexCoord4svARB = (PFNGLMULTITEXCOORD4SVARBPROC)glfwGetProcAddress("glMultiTexCoord4svARB");
  glLoadTransposeMatrixfARB = (PFNGLLOADTRANSPOSEMATRIXFARBPROC)glfwGetProcAddress("glLoadTransposeMatrixfARB");
  glLoadTransposeMatrixdARB = (PFNGLLOADTRANSPOSEMATRIXDARBPROC)glfwGetProcAddress("glLoadTransposeMatrixdARB");
  glMultTransposeMatrixfARB = (PFNGLMULTTRANSPOSEMATRIXFARBPROC)glfwGetProcAddress("glMultTransposeMatrixfARB");
  glMultTransposeMatrixdARB = (PFNGLMULTTRANSPOSEMATRIXDARBPROC)glfwGetProcAddress("glMultTransposeMatrixdARB");
  glSampleCoverageARB = (PFNGLSAMPLECOVERAGEARBPROC)glfwGetProcAddress("glSampleCoverageARB");
  glCompressedTexImage3DARB = (PFNGLCOMPRESSEDTEXIMAGE3DARBPROC)glfwGetProcAddress("glCompressedTexImage3DARB");
  glCompressedTexImage2DARB = (PFNGLCOMPRESSEDTEXIMAGE2DARBPROC)glfwGetProcAddress("glCompressedTexImage2DARB");
  glCompressedTexImage1DARB = (PFNGLCOMPRESSEDTEXIMAGE1DARBPROC)glfwGetProcAddress("glCompressedTexImage1DARB");
  glCompressedTexSubImage3DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE3DARBPROC)glfwGetProcAddress("glCompressedTexSubImage3DARB");
  glCompressedTexSubImage2DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE2DARBPROC)glfwGetProcAddress("glCompressedTexSubImage2DARB");
  glCompressedTexSubImage1DARB = (PFNGLCOMPRESSEDTEXSUBIMAGE1DARBPROC)glfwGetProcAddress("glCompressedTexSubImage1DARB");
  glGetCompressedTexImageARB = (PFNGLGETCOMPRESSEDTEXIMAGEARBPROC)glfwGetProcAddress("glGetCompressedTexImageARB");
  glPointParameterfARB = (PFNGLPOINTPARAMETERFARBPROC)glfwGetProcAddress("glPointParameterfARB");
  glPointParameterfvARB = (PFNGLPOINTPARAMETERFVARBPROC)glfwGetProcAddress("glPointParameterfvARB");
  glWeightbvARB = (PFNGLWEIGHTBVARBPROC)glfwGetProcAddress("glWeightbvARB");
  glWeightsvARB = (PFNGLWEIGHTSVARBPROC)glfwGetProcAddress("glWeightsvARB");
  glWeightivARB = (PFNGLWEIGHTIVARBPROC)glfwGetProcAddress("glWeightivARB");
  glWeightfvARB = (PFNGLWEIGHTFVARBPROC)glfwGetProcAddress("glWeightfvARB");
  glWeightdvARB = (PFNGLWEIGHTDVARBPROC)glfwGetProcAddress("glWeightdvARB");
  glWeightubvARB = (PFNGLWEIGHTUBVARBPROC)glfwGetProcAddress("glWeightubvARB");
  glWeightusvARB = (PFNGLWEIGHTUSVARBPROC)glfwGetProcAddress("glWeightusvARB");
  glWeightuivARB = (PFNGLWEIGHTUIVARBPROC)glfwGetProcAddress("glWeightuivARB");
  glWeightPointerARB = (PFNGLWEIGHTPOINTERARBPROC)glfwGetProcAddress("glWeightPointerARB");
  glVertexBlendARB = (PFNGLVERTEXBLENDARBPROC)glfwGetProcAddress("glVertexBlendARB");
  glCurrentPaletteMatrixARB = (PFNGLCURRENTPALETTEMATRIXARBPROC)glfwGetProcAddress("glCurrentPaletteMatrixARB");
  glMatrixIndexubvARB = (PFNGLMATRIXINDEXUBVARBPROC)glfwGetProcAddress("glMatrixIndexubvARB");
  glMatrixIndexusvARB = (PFNGLMATRIXINDEXUSVARBPROC)glfwGetProcAddress("glMatrixIndexusvARB");
  glMatrixIndexuivARB = (PFNGLMATRIXINDEXUIVARBPROC)glfwGetProcAddress("glMatrixIndexuivARB");
  glMatrixIndexPointerARB = (PFNGLMATRIXINDEXPOINTERARBPROC)glfwGetProcAddress("glMatrixIndexPointerARB");
  glWindowPos2dARB = (PFNGLWINDOWPOS2DARBPROC)glfwGetProcAddress("glWindowPos2dARB");
  glWindowPos2dvARB = (PFNGLWINDOWPOS2DVARBPROC)glfwGetProcAddress("glWindowPos2dvARB");
  glWindowPos2fARB = (PFNGLWINDOWPOS2FARBPROC)glfwGetProcAddress("glWindowPos2fARB");
  glWindowPos2fvARB = (PFNGLWINDOWPOS2FVARBPROC)glfwGetProcAddress("glWindowPos2fvARB");
  glWindowPos2iARB = (PFNGLWINDOWPOS2IARBPROC)glfwGetProcAddress("glWindowPos2iARB");
  glWindowPos2ivARB = (PFNGLWINDOWPOS2IVARBPROC)glfwGetProcAddress("glWindowPos2ivARB");
  glWindowPos2sARB = (PFNGLWINDOWPOS2SARBPROC)glfwGetProcAddress("glWindowPos2sARB");
  glWindowPos2svARB = (PFNGLWINDOWPOS2SVARBPROC)glfwGetProcAddress("glWindowPos2svARB");
  glWindowPos3dARB = (PFNGLWINDOWPOS3DARBPROC)glfwGetProcAddress("glWindowPos3dARB");
  glWindowPos3dvARB = (PFNGLWINDOWPOS3DVARBPROC)glfwGetProcAddress("glWindowPos3dvARB");
  glWindowPos3fARB = (PFNGLWINDOWPOS3FARBPROC)glfwGetProcAddress("glWindowPos3fARB");
  glWindowPos3fvARB = (PFNGLWINDOWPOS3FVARBPROC)glfwGetProcAddress("glWindowPos3fvARB");
  glWindowPos3iARB = (PFNGLWINDOWPOS3IARBPROC)glfwGetProcAddress("glWindowPos3iARB");
  glWindowPos3ivARB = (PFNGLWINDOWPOS3IVARBPROC)glfwGetProcAddress("glWindowPos3ivARB");
  glWindowPos3sARB = (PFNGLWINDOWPOS3SARBPROC)glfwGetProcAddress("glWindowPos3sARB");
  glWindowPos3svARB = (PFNGLWINDOWPOS3SVARBPROC)glfwGetProcAddress("glWindowPos3svARB");
  glVertexAttrib1dARB = (PFNGLVERTEXATTRIB1DARBPROC)glfwGetProcAddress("glVertexAttrib1dARB");
  glVertexAttrib1dvARB = (PFNGLVERTEXATTRIB1DVARBPROC)glfwGetProcAddress("glVertexAttrib1dvARB");
  glVertexAttrib1fARB = (PFNGLVERTEXATTRIB1FARBPROC)glfwGetProcAddress("glVertexAttrib1fARB");
  glVertexAttrib1fvARB = (PFNGLVERTEXATTRIB1FVARBPROC)glfwGetProcAddress("glVertexAttrib1fvARB");
  glVertexAttrib1sARB = (PFNGLVERTEXATTRIB1SARBPROC)glfwGetProcAddress("glVertexAttrib1sARB");
  glVertexAttrib1svARB = (PFNGLVERTEXATTRIB1SVARBPROC)glfwGetProcAddress("glVertexAttrib1svARB");
  glVertexAttrib2dARB = (PFNGLVERTEXATTRIB2DARBPROC)glfwGetProcAddress("glVertexAttrib2dARB");
  glVertexAttrib2dvARB = (PFNGLVERTEXATTRIB2DVARBPROC)glfwGetProcAddress("glVertexAttrib2dvARB");
  glVertexAttrib2fARB = (PFNGLVERTEXATTRIB2FARBPROC)glfwGetProcAddress("glVertexAttrib2fARB");
  glVertexAttrib2fvARB = (PFNGLVERTEXATTRIB2FVARBPROC)glfwGetProcAddress("glVertexAttrib2fvARB");
  glVertexAttrib2sARB = (PFNGLVERTEXATTRIB2SARBPROC)glfwGetProcAddress("glVertexAttrib2sARB");
  glVertexAttrib2svARB = (PFNGLVERTEXATTRIB2SVARBPROC)glfwGetProcAddress("glVertexAttrib2svARB");
  glVertexAttrib3dARB = (PFNGLVERTEXATTRIB3DARBPROC)glfwGetProcAddress("glVertexAttrib3dARB");
  glVertexAttrib3dvARB = (PFNGLVERTEXATTRIB3DVARBPROC)glfwGetProcAddress("glVertexAttrib3dvARB");
  glVertexAttrib3fARB = (PFNGLVERTEXATTRIB3FARBPROC)glfwGetProcAddress("glVertexAttrib3fARB");
  glVertexAttrib3fvARB = (PFNGLVERTEXATTRIB3FVARBPROC)glfwGetProcAddress("glVertexAttrib3fvARB");
  glVertexAttrib3sARB = (PFNGLVERTEXATTRIB3SARBPROC)glfwGetProcAddress("glVertexAttrib3sARB");
  glVertexAttrib3svARB = (PFNGLVERTEXATTRIB3SVARBPROC)glfwGetProcAddress("glVertexAttrib3svARB");
  glVertexAttrib4NbvARB = (PFNGLVERTEXATTRIB4NBVARBPROC)glfwGetProcAddress("glVertexAttrib4NbvARB");
  glVertexAttrib4NivARB = (PFNGLVERTEXATTRIB4NIVARBPROC)glfwGetProcAddress("glVertexAttrib4NivARB");
  glVertexAttrib4NsvARB = (PFNGLVERTEXATTRIB4NSVARBPROC)glfwGetProcAddress("glVertexAttrib4NsvARB");
  glVertexAttrib4NubARB = (PFNGLVERTEXATTRIB4NUBARBPROC)glfwGetProcAddress("glVertexAttrib4NubARB");
  glVertexAttrib4NubvARB = (PFNGLVERTEXATTRIB4NUBVARBPROC)glfwGetProcAddress("glVertexAttrib4NubvARB");
  glVertexAttrib4NuivARB = (PFNGLVERTEXATTRIB4NUIVARBPROC)glfwGetProcAddress("glVertexAttrib4NuivARB");
  glVertexAttrib4NusvARB = (PFNGLVERTEXATTRIB4NUSVARBPROC)glfwGetProcAddress("glVertexAttrib4NusvARB");
  glVertexAttrib4bvARB = (PFNGLVERTEXATTRIB4BVARBPROC)glfwGetProcAddress("glVertexAttrib4bvARB");
  glVertexAttrib4dARB = (PFNGLVERTEXATTRIB4DARBPROC)glfwGetProcAddress("glVertexAttrib4dARB");
  glVertexAttrib4dvARB = (PFNGLVERTEXATTRIB4DVARBPROC)glfwGetProcAddress("glVertexAttrib4dvARB");
  glVertexAttrib4fARB = (PFNGLVERTEXATTRIB4FARBPROC)glfwGetProcAddress("glVertexAttrib4fARB");
  glVertexAttrib4fvARB = (PFNGLVERTEXATTRIB4FVARBPROC)glfwGetProcAddress("glVertexAttrib4fvARB");
  glVertexAttrib4ivARB = (PFNGLVERTEXATTRIB4IVARBPROC)glfwGetProcAddress("glVertexAttrib4ivARB");
  glVertexAttrib4sARB = (PFNGLVERTEXATTRIB4SARBPROC)glfwGetProcAddress("glVertexAttrib4sARB");
  glVertexAttrib4svARB = (PFNGLVERTEXATTRIB4SVARBPROC)glfwGetProcAddress("glVertexAttrib4svARB");
  glVertexAttrib4ubvARB = (PFNGLVERTEXATTRIB4UBVARBPROC)glfwGetProcAddress("glVertexAttrib4ubvARB");
  glVertexAttrib4uivARB = (PFNGLVERTEXATTRIB4UIVARBPROC)glfwGetProcAddress("glVertexAttrib4uivARB");
  glVertexAttrib4usvARB = (PFNGLVERTEXATTRIB4USVARBPROC)glfwGetProcAddress("glVertexAttrib4usvARB");
  glVertexAttribPointerARB = (PFNGLVERTEXATTRIBPOINTERARBPROC)glfwGetProcAddress("glVertexAttribPointerARB");
  glEnableVertexAttribArrayARB = (PFNGLENABLEVERTEXATTRIBARRAYARBPROC)glfwGetProcAddress("glEnableVertexAttribArrayARB");
  glDisableVertexAttribArrayARB = (PFNGLDISABLEVERTEXATTRIBARRAYARBPROC)glfwGetProcAddress("glDisableVertexAttribArrayARB");
  glProgramStringARB = (PFNGLPROGRAMSTRINGARBPROC)glfwGetProcAddress("glProgramStringARB");
  glBindProgramARB = (PFNGLBINDPROGRAMARBPROC)glfwGetProcAddress("glBindProgramARB");
  glDeleteProgramsARB = (PFNGLDELETEPROGRAMSARBPROC)glfwGetProcAddress("glDeleteProgramsARB");
  glGenProgramsARB = (PFNGLGENPROGRAMSARBPROC)glfwGetProcAddress("glGenProgramsARB");
  glProgramEnvParameter4dARB = (PFNGLPROGRAMENVPARAMETER4DARBPROC)glfwGetProcAddress("glProgramEnvParameter4dARB");
  glProgramEnvParameter4dvARB = (PFNGLPROGRAMENVPARAMETER4DVARBPROC)glfwGetProcAddress("glProgramEnvParameter4dvARB");
  glProgramEnvParameter4fARB = (PFNGLPROGRAMENVPARAMETER4FARBPROC)glfwGetProcAddress("glProgramEnvParameter4fARB");
  glProgramEnvParameter4fvARB = (PFNGLPROGRAMENVPARAMETER4FVARBPROC)glfwGetProcAddress("glProgramEnvParameter4fvARB");
  glProgramLocalParameter4dARB = (PFNGLPROGRAMLOCALPARAMETER4DARBPROC)glfwGetProcAddress("glProgramLocalParameter4dARB");
  glProgramLocalParameter4dvARB = (PFNGLPROGRAMLOCALPARAMETER4DVARBPROC)glfwGetProcAddress("glProgramLocalParameter4dvARB");
  glProgramLocalParameter4fARB = (PFNGLPROGRAMLOCALPARAMETER4FARBPROC)glfwGetProcAddress("glProgramLocalParameter4fARB");
  glProgramLocalParameter4fvARB = (PFNGLPROGRAMLOCALPARAMETER4FVARBPROC)glfwGetProcAddress("glProgramLocalParameter4fvARB");
  glGetProgramEnvParameterdvARB = (PFNGLGETPROGRAMENVPARAMETERDVARBPROC)glfwGetProcAddress("glGetProgramEnvParameterdvARB");
  glGetProgramEnvParameterfvARB = (PFNGLGETPROGRAMENVPARAMETERFVARBPROC)glfwGetProcAddress("glGetProgramEnvParameterfvARB");
  glGetProgramLocalParameterdvARB = (PFNGLGETPROGRAMLOCALPARAMETERDVARBPROC)glfwGetProcAddress("glGetProgramLocalParameterdvARB");
  glGetProgramLocalParameterfvARB = (PFNGLGETPROGRAMLOCALPARAMETERFVARBPROC)glfwGetProcAddress("glGetProgramLocalParameterfvARB");
  glGetProgramivARB = (PFNGLGETPROGRAMIVARBPROC)glfwGetProcAddress("glGetProgramivARB");
  glGetProgramStringARB = (PFNGLGETPROGRAMSTRINGARBPROC)glfwGetProcAddress("glGetProgramStringARB");
  glGetVertexAttribdvARB = (PFNGLGETVERTEXATTRIBDVARBPROC)glfwGetProcAddress("glGetVertexAttribdvARB");
  glGetVertexAttribfvARB = (PFNGLGETVERTEXATTRIBFVARBPROC)glfwGetProcAddress("glGetVertexAttribfvARB");
  glGetVertexAttribivARB = (PFNGLGETVERTEXATTRIBIVARBPROC)glfwGetProcAddress("glGetVertexAttribivARB");
  glGetVertexAttribPointervARB = (PFNGLGETVERTEXATTRIBPOINTERVARBPROC)glfwGetProcAddress("glGetVertexAttribPointervARB");
  glIsProgramARB = (PFNGLISPROGRAMARBPROC)glfwGetProcAddress("glIsProgramARB");
  glBindBufferARB = (PFNGLBINDBUFFERARBPROC)glfwGetProcAddress("glBindBufferARB");
  glDeleteBuffersARB = (PFNGLDELETEBUFFERSARBPROC)glfwGetProcAddress("glDeleteBuffersARB");
  glGenBuffersARB = (PFNGLGENBUFFERSARBPROC)glfwGetProcAddress("glGenBuffersARB");
  glIsBufferARB = (PFNGLISBUFFERARBPROC)glfwGetProcAddress("glIsBufferARB");
  glBufferDataARB = (PFNGLBUFFERDATAARBPROC)glfwGetProcAddress("glBufferDataARB");
  glBufferSubDataARB = (PFNGLBUFFERSUBDATAARBPROC)glfwGetProcAddress("glBufferSubDataARB");
  glGetBufferSubDataARB = (PFNGLGETBUFFERSUBDATAARBPROC)glfwGetProcAddress("glGetBufferSubDataARB");
  glMapBufferARB = (PFNGLMAPBUFFERARBPROC)glfwGetProcAddress("glMapBufferARB");
  glUnmapBufferARB = (PFNGLUNMAPBUFFERARBPROC)glfwGetProcAddress("glUnmapBufferARB");
  glGetBufferParameterivARB = (PFNGLGETBUFFERPARAMETERIVARBPROC)glfwGetProcAddress("glGetBufferParameterivARB");
  glGetBufferPointervARB = (PFNGLGETBUFFERPOINTERVARBPROC)glfwGetProcAddress("glGetBufferPointervARB");
  glGenQueriesARB = (PFNGLGENQUERIESARBPROC)glfwGetProcAddress("glGenQueriesARB");
  glDeleteQueriesARB = (PFNGLDELETEQUERIESARBPROC)glfwGetProcAddress("glDeleteQueriesARB");
  glIsQueryARB = (PFNGLISQUERYARBPROC)glfwGetProcAddress("glIsQueryARB");
  glBeginQueryARB = (PFNGLBEGINQUERYARBPROC)glfwGetProcAddress("glBeginQueryARB");
  glEndQueryARB = (PFNGLENDQUERYARBPROC)glfwGetProcAddress("glEndQueryARB");
  glGetQueryivARB = (PFNGLGETQUERYIVARBPROC)glfwGetProcAddress("glGetQueryivARB");
  glGetQueryObjectivARB = (PFNGLGETQUERYOBJECTIVARBPROC)glfwGetProcAddress("glGetQueryObjectivARB");
  glGetQueryObjectuivARB = (PFNGLGETQUERYOBJECTUIVARBPROC)glfwGetProcAddress("glGetQueryObjectuivARB");
  glDeleteObjectARB = (PFNGLDELETEOBJECTARBPROC)glfwGetProcAddress("glDeleteObjectARB");
  glGetHandleARB = (PFNGLGETHANDLEARBPROC)glfwGetProcAddress("glGetHandleARB");
  glDetachObjectARB = (PFNGLDETACHOBJECTARBPROC)glfwGetProcAddress("glDetachObjectARB");
  glCreateShaderObjectARB = (PFNGLCREATESHADEROBJECTARBPROC)glfwGetProcAddress("glCreateShaderObjectARB");
  glShaderSourceARB = (PFNGLSHADERSOURCEARBPROC)glfwGetProcAddress("glShaderSourceARB");
  glCompileShaderARB = (PFNGLCOMPILESHADERARBPROC)glfwGetProcAddress("glCompileShaderARB");
  glCreateProgramObjectARB = (PFNGLCREATEPROGRAMOBJECTARBPROC)glfwGetProcAddress("glCreateProgramObjectARB");
  glAttachObjectARB = (PFNGLATTACHOBJECTARBPROC)glfwGetProcAddress("glAttachObjectARB");
  glLinkProgramARB = (PFNGLLINKPROGRAMARBPROC)glfwGetProcAddress("glLinkProgramARB");
  glUseProgramObjectARB = (PFNGLUSEPROGRAMOBJECTARBPROC)glfwGetProcAddress("glUseProgramObjectARB");
  glValidateProgramARB = (PFNGLVALIDATEPROGRAMARBPROC)glfwGetProcAddress("glValidateProgramARB");
  glUniform1fARB = (PFNGLUNIFORM1FARBPROC)glfwGetProcAddress("glUniform1fARB");
  glUniform2fARB = (PFNGLUNIFORM2FARBPROC)glfwGetProcAddress("glUniform2fARB");
  glUniform3fARB = (PFNGLUNIFORM3FARBPROC)glfwGetProcAddress("glUniform3fARB");
  glUniform4fARB = (PFNGLUNIFORM4FARBPROC)glfwGetProcAddress("glUniform4fARB");
  glUniform1iARB = (PFNGLUNIFORM1IARBPROC)glfwGetProcAddress("glUniform1iARB");
  glUniform2iARB = (PFNGLUNIFORM2IARBPROC)glfwGetProcAddress("glUniform2iARB");
  glUniform3iARB = (PFNGLUNIFORM3IARBPROC)glfwGetProcAddress("glUniform3iARB");
  glUniform4iARB = (PFNGLUNIFORM4IARBPROC)glfwGetProcAddress("glUniform4iARB");
  glUniform1fvARB = (PFNGLUNIFORM1FVARBPROC)glfwGetProcAddress("glUniform1fvARB");
  glUniform2fvARB = (PFNGLUNIFORM2FVARBPROC)glfwGetProcAddress("glUniform2fvARB");
  glUniform3fvARB = (PFNGLUNIFORM3FVARBPROC)glfwGetProcAddress("glUniform3fvARB");
  glUniform4fvARB = (PFNGLUNIFORM4FVARBPROC)glfwGetProcAddress("glUniform4fvARB");
  glUniform1ivARB = (PFNGLUNIFORM1IVARBPROC)glfwGetProcAddress("glUniform1ivARB");
  glUniform2ivARB = (PFNGLUNIFORM2IVARBPROC)glfwGetProcAddress("glUniform2ivARB");
  glUniform3ivARB = (PFNGLUNIFORM3IVARBPROC)glfwGetProcAddress("glUniform3ivARB");
  glUniform4ivARB = (PFNGLUNIFORM4IVARBPROC)glfwGetProcAddress("glUniform4ivARB");
  glUniformMatrix2fvARB = (PFNGLUNIFORMMATRIX2FVARBPROC)glfwGetProcAddress("glUniformMatrix2fvARB");
  glUniformMatrix3fvARB = (PFNGLUNIFORMMATRIX3FVARBPROC)glfwGetProcAddress("glUniformMatrix3fvARB");
  glUniformMatrix4fvARB = (PFNGLUNIFORMMATRIX4FVARBPROC)glfwGetProcAddress("glUniformMatrix4fvARB");
  glGetObjectParameterfvARB = (PFNGLGETOBJECTPARAMETERFVARBPROC)glfwGetProcAddress("glGetObjectParameterfvARB");
  glGetObjectParameterivARB = (PFNGLGETOBJECTPARAMETERIVARBPROC)glfwGetProcAddress("glGetObjectParameterivARB");
  glGetInfoLogARB = (PFNGLGETINFOLOGARBPROC)glfwGetProcAddress("glGetInfoLogARB");
  glGetAttachedObjectsARB = (PFNGLGETATTACHEDOBJECTSARBPROC)glfwGetProcAddress("glGetAttachedObjectsARB");
  glGetUniformLocationARB = (PFNGLGETUNIFORMLOCATIONARBPROC)glfwGetProcAddress("glGetUniformLocationARB");
  glGetActiveUniformARB = (PFNGLGETACTIVEUNIFORMARBPROC)glfwGetProcAddress("glGetActiveUniformARB");
  glGetUniformfvARB = (PFNGLGETUNIFORMFVARBPROC)glfwGetProcAddress("glGetUniformfvARB");
  glGetUniformivARB = (PFNGLGETUNIFORMIVARBPROC)glfwGetProcAddress("glGetUniformivARB");
  glGetShaderSourceARB = (PFNGLGETSHADERSOURCEARBPROC)glfwGetProcAddress("glGetShaderSourceARB");
  glBindAttribLocationARB = (PFNGLBINDATTRIBLOCATIONARBPROC)glfwGetProcAddress("glBindAttribLocationARB");
  glGetActiveAttribARB = (PFNGLGETACTIVEATTRIBARBPROC)glfwGetProcAddress("glGetActiveAttribARB");
  glGetAttribLocationARB = (PFNGLGETATTRIBLOCATIONARBPROC)glfwGetProcAddress("glGetAttribLocationARB");
  glDrawBuffersARB = (PFNGLDRAWBUFFERSARBPROC)glfwGetProcAddress("glDrawBuffersARB");
  glClampColorARB = (PFNGLCLAMPCOLORARBPROC)glfwGetProcAddress("glClampColorARB");
  glDrawArraysInstancedARB = (PFNGLDRAWARRAYSINSTANCEDARBPROC)glfwGetProcAddress("glDrawArraysInstancedARB");
  glDrawElementsInstancedARB = (PFNGLDRAWELEMENTSINSTANCEDARBPROC)glfwGetProcAddress("glDrawElementsInstancedARB");
  glIsRenderbuffer = (PFNGLISRENDERBUFFERPROC)glfwGetProcAddress("glIsRenderbuffer");
  glBindRenderbuffer = (PFNGLBINDRENDERBUFFERPROC)glfwGetProcAddress("glBindRenderbuffer");
  glDeleteRenderbuffers = (PFNGLDELETERENDERBUFFERSPROC)glfwGetProcAddress("glDeleteRenderbuffers");
  glGenRenderbuffers = (PFNGLGENRENDERBUFFERSPROC)glfwGetProcAddress("glGenRenderbuffers");
  glRenderbufferStorage = (PFNGLRENDERBUFFERSTORAGEPROC)glfwGetProcAddress("glRenderbufferStorage");
  glGetRenderbufferParameteriv = (PFNGLGETRENDERBUFFERPARAMETERIVPROC)glfwGetProcAddress("glGetRenderbufferParameteriv");
  glIsFramebuffer = (PFNGLISFRAMEBUFFERPROC)glfwGetProcAddress("glIsFramebuffer");
  glBindFramebuffer = (PFNGLBINDFRAMEBUFFERPROC)glfwGetProcAddress("glBindFramebuffer");
  glDeleteFramebuffers = (PFNGLDELETEFRAMEBUFFERSPROC)glfwGetProcAddress("glDeleteFramebuffers");
  glGenFramebuffers = (PFNGLGENFRAMEBUFFERSPROC)glfwGetProcAddress("glGenFramebuffers");
  glCheckFramebufferStatus = (PFNGLCHECKFRAMEBUFFERSTATUSPROC)glfwGetProcAddress("glCheckFramebufferStatus");
  glFramebufferTexture1D = (PFNGLFRAMEBUFFERTEXTURE1DPROC)glfwGetProcAddress("glFramebufferTexture1D");
  glFramebufferTexture2D = (PFNGLFRAMEBUFFERTEXTURE2DPROC)glfwGetProcAddress("glFramebufferTexture2D");
  glFramebufferTexture3D = (PFNGLFRAMEBUFFERTEXTURE3DPROC)glfwGetProcAddress("glFramebufferTexture3D");
  glFramebufferRenderbuffer = (PFNGLFRAMEBUFFERRENDERBUFFERPROC)glfwGetProcAddress("glFramebufferRenderbuffer");
  glGetFramebufferAttachmentParameteriv = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVPROC)glfwGetProcAddress("glGetFramebufferAttachmentParameteriv");
  glGenerateMipmap = (PFNGLGENERATEMIPMAPPROC)glfwGetProcAddress("glGenerateMipmap");
  glBlitFramebuffer = (PFNGLBLITFRAMEBUFFERPROC)glfwGetProcAddress("glBlitFramebuffer");
  glRenderbufferStorageMultisample = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEPROC)glfwGetProcAddress("glRenderbufferStorageMultisample");
  glFramebufferTextureLayer = (PFNGLFRAMEBUFFERTEXTURELAYERPROC)glfwGetProcAddress("glFramebufferTextureLayer");
  glProgramParameteriARB = (PFNGLPROGRAMPARAMETERIARBPROC)glfwGetProcAddress("glProgramParameteriARB");
  glFramebufferTextureARB = (PFNGLFRAMEBUFFERTEXTUREARBPROC)glfwGetProcAddress("glFramebufferTextureARB");
  glFramebufferTextureLayerARB = (PFNGLFRAMEBUFFERTEXTURELAYERARBPROC)glfwGetProcAddress("glFramebufferTextureLayerARB");
  glFramebufferTextureFaceARB = (PFNGLFRAMEBUFFERTEXTUREFACEARBPROC)glfwGetProcAddress("glFramebufferTextureFaceARB");
  glVertexAttribDivisorARB = (PFNGLVERTEXATTRIBDIVISORARBPROC)glfwGetProcAddress("glVertexAttribDivisorARB");
  glMapBufferRange = (PFNGLMAPBUFFERRANGEPROC)glfwGetProcAddress("glMapBufferRange");
  glFlushMappedBufferRange = (PFNGLFLUSHMAPPEDBUFFERRANGEPROC)glfwGetProcAddress("glFlushMappedBufferRange");
  glTexBufferARB = (PFNGLTEXBUFFERARBPROC)glfwGetProcAddress("glTexBufferARB");
  glBindVertexArray = (PFNGLBINDVERTEXARRAYPROC)glfwGetProcAddress("glBindVertexArray");
  glDeleteVertexArrays = (PFNGLDELETEVERTEXARRAYSPROC)glfwGetProcAddress("glDeleteVertexArrays");
  glGenVertexArrays = (PFNGLGENVERTEXARRAYSPROC)glfwGetProcAddress("glGenVertexArrays");
  glIsVertexArray = (PFNGLISVERTEXARRAYPROC)glfwGetProcAddress("glIsVertexArray");
  glGetUniformIndices = (PFNGLGETUNIFORMINDICESPROC)glfwGetProcAddress("glGetUniformIndices");
  glGetActiveUniformsiv = (PFNGLGETACTIVEUNIFORMSIVPROC)glfwGetProcAddress("glGetActiveUniformsiv");
  glGetActiveUniformName = (PFNGLGETACTIVEUNIFORMNAMEPROC)glfwGetProcAddress("glGetActiveUniformName");
  glGetUniformBlockIndex = (PFNGLGETUNIFORMBLOCKINDEXPROC)glfwGetProcAddress("glGetUniformBlockIndex");
  glGetActiveUniformBlockiv = (PFNGLGETACTIVEUNIFORMBLOCKIVPROC)glfwGetProcAddress("glGetActiveUniformBlockiv");
  glGetActiveUniformBlockName = (PFNGLGETACTIVEUNIFORMBLOCKNAMEPROC)glfwGetProcAddress("glGetActiveUniformBlockName");
  glUniformBlockBinding = (PFNGLUNIFORMBLOCKBINDINGPROC)glfwGetProcAddress("glUniformBlockBinding");
  glCopyBufferSubData = (PFNGLCOPYBUFFERSUBDATAPROC)glfwGetProcAddress("glCopyBufferSubData");
  glDrawElementsBaseVertex = (PFNGLDRAWELEMENTSBASEVERTEXPROC)glfwGetProcAddress("glDrawElementsBaseVertex");
  glDrawRangeElementsBaseVertex = (PFNGLDRAWRANGEELEMENTSBASEVERTEXPROC)glfwGetProcAddress("glDrawRangeElementsBaseVertex");
  glDrawElementsInstancedBaseVertex = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXPROC)glfwGetProcAddress("glDrawElementsInstancedBaseVertex");
  glMultiDrawElementsBaseVertex = (PFNGLMULTIDRAWELEMENTSBASEVERTEXPROC)glfwGetProcAddress("glMultiDrawElementsBaseVertex");
  glProvokingVertex = (PFNGLPROVOKINGVERTEXPROC)glfwGetProcAddress("glProvokingVertex");
  glFenceSync = (PFNGLFENCESYNCPROC)glfwGetProcAddress("glFenceSync");
  glIsSync = (PFNGLISSYNCPROC)glfwGetProcAddress("glIsSync");
  glDeleteSync = (PFNGLDELETESYNCPROC)glfwGetProcAddress("glDeleteSync");
  glClientWaitSync = (PFNGLCLIENTWAITSYNCPROC)glfwGetProcAddress("glClientWaitSync");
  glWaitSync = (PFNGLWAITSYNCPROC)glfwGetProcAddress("glWaitSync");
  glGetInteger64v = (PFNGLGETINTEGER64VPROC)glfwGetProcAddress("glGetInteger64v");
  glGetSynciv = (PFNGLGETSYNCIVPROC)glfwGetProcAddress("glGetSynciv");
  glTexImage2DMultisample = (PFNGLTEXIMAGE2DMULTISAMPLEPROC)glfwGetProcAddress("glTexImage2DMultisample");
  glTexImage3DMultisample = (PFNGLTEXIMAGE3DMULTISAMPLEPROC)glfwGetProcAddress("glTexImage3DMultisample");
  glGetMultisamplefv = (PFNGLGETMULTISAMPLEFVPROC)glfwGetProcAddress("glGetMultisamplefv");
  glSampleMaski = (PFNGLSAMPLEMASKIPROC)glfwGetProcAddress("glSampleMaski");
  glBlendEquationiARB = (PFNGLBLENDEQUATIONIARBPROC)glfwGetProcAddress("glBlendEquationiARB");
  glBlendEquationSeparateiARB = (PFNGLBLENDEQUATIONSEPARATEIARBPROC)glfwGetProcAddress("glBlendEquationSeparateiARB");
  glBlendFunciARB = (PFNGLBLENDFUNCIARBPROC)glfwGetProcAddress("glBlendFunciARB");
  glBlendFuncSeparateiARB = (PFNGLBLENDFUNCSEPARATEIARBPROC)glfwGetProcAddress("glBlendFuncSeparateiARB");
  glMinSampleShadingARB = (PFNGLMINSAMPLESHADINGARBPROC)glfwGetProcAddress("glMinSampleShadingARB");
  glNamedStringARB = (PFNGLNAMEDSTRINGARBPROC)glfwGetProcAddress("glNamedStringARB");
  glDeleteNamedStringARB = (PFNGLDELETENAMEDSTRINGARBPROC)glfwGetProcAddress("glDeleteNamedStringARB");
  glCompileShaderIncludeARB = (PFNGLCOMPILESHADERINCLUDEARBPROC)glfwGetProcAddress("glCompileShaderIncludeARB");
  glIsNamedStringARB = (PFNGLISNAMEDSTRINGARBPROC)glfwGetProcAddress("glIsNamedStringARB");
  glGetNamedStringARB = (PFNGLGETNAMEDSTRINGARBPROC)glfwGetProcAddress("glGetNamedStringARB");
  glGetNamedStringivARB = (PFNGLGETNAMEDSTRINGIVARBPROC)glfwGetProcAddress("glGetNamedStringivARB");
  glBindFragDataLocationIndexed = (PFNGLBINDFRAGDATALOCATIONINDEXEDPROC)glfwGetProcAddress("glBindFragDataLocationIndexed");
  glGetFragDataIndex = (PFNGLGETFRAGDATAINDEXPROC)glfwGetProcAddress("glGetFragDataIndex");
  glGenSamplers = (PFNGLGENSAMPLERSPROC)glfwGetProcAddress("glGenSamplers");
  glDeleteSamplers = (PFNGLDELETESAMPLERSPROC)glfwGetProcAddress("glDeleteSamplers");
  glIsSampler = (PFNGLISSAMPLERPROC)glfwGetProcAddress("glIsSampler");
  glBindSampler = (PFNGLBINDSAMPLERPROC)glfwGetProcAddress("glBindSampler");
  glSamplerParameteri = (PFNGLSAMPLERPARAMETERIPROC)glfwGetProcAddress("glSamplerParameteri");
  glSamplerParameteriv = (PFNGLSAMPLERPARAMETERIVPROC)glfwGetProcAddress("glSamplerParameteriv");
  glSamplerParameterf = (PFNGLSAMPLERPARAMETERFPROC)glfwGetProcAddress("glSamplerParameterf");
  glSamplerParameterfv = (PFNGLSAMPLERPARAMETERFVPROC)glfwGetProcAddress("glSamplerParameterfv");
  glSamplerParameterIiv = (PFNGLSAMPLERPARAMETERIIVPROC)glfwGetProcAddress("glSamplerParameterIiv");
  glSamplerParameterIuiv = (PFNGLSAMPLERPARAMETERIUIVPROC)glfwGetProcAddress("glSamplerParameterIuiv");
  glGetSamplerParameteriv = (PFNGLGETSAMPLERPARAMETERIVPROC)glfwGetProcAddress("glGetSamplerParameteriv");
  glGetSamplerParameterIiv = (PFNGLGETSAMPLERPARAMETERIIVPROC)glfwGetProcAddress("glGetSamplerParameterIiv");
  glGetSamplerParameterfv = (PFNGLGETSAMPLERPARAMETERFVPROC)glfwGetProcAddress("glGetSamplerParameterfv");
  glGetSamplerParameterIuiv = (PFNGLGETSAMPLERPARAMETERIUIVPROC)glfwGetProcAddress("glGetSamplerParameterIuiv");
  glQueryCounter = (PFNGLQUERYCOUNTERPROC)glfwGetProcAddress("glQueryCounter");
  glGetQueryObjecti64v = (PFNGLGETQUERYOBJECTI64VPROC)glfwGetProcAddress("glGetQueryObjecti64v");
  glGetQueryObjectui64v = (PFNGLGETQUERYOBJECTUI64VPROC)glfwGetProcAddress("glGetQueryObjectui64v");
  glVertexP2ui = (PFNGLVERTEXP2UIPROC)glfwGetProcAddress("glVertexP2ui");
  glVertexP2uiv = (PFNGLVERTEXP2UIVPROC)glfwGetProcAddress("glVertexP2uiv");
  glVertexP3ui = (PFNGLVERTEXP3UIPROC)glfwGetProcAddress("glVertexP3ui");
  glVertexP3uiv = (PFNGLVERTEXP3UIVPROC)glfwGetProcAddress("glVertexP3uiv");
  glVertexP4ui = (PFNGLVERTEXP4UIPROC)glfwGetProcAddress("glVertexP4ui");
  glVertexP4uiv = (PFNGLVERTEXP4UIVPROC)glfwGetProcAddress("glVertexP4uiv");
  glTexCoordP1ui = (PFNGLTEXCOORDP1UIPROC)glfwGetProcAddress("glTexCoordP1ui");
  glTexCoordP1uiv = (PFNGLTEXCOORDP1UIVPROC)glfwGetProcAddress("glTexCoordP1uiv");
  glTexCoordP2ui = (PFNGLTEXCOORDP2UIPROC)glfwGetProcAddress("glTexCoordP2ui");
  glTexCoordP2uiv = (PFNGLTEXCOORDP2UIVPROC)glfwGetProcAddress("glTexCoordP2uiv");
  glTexCoordP3ui = (PFNGLTEXCOORDP3UIPROC)glfwGetProcAddress("glTexCoordP3ui");
  glTexCoordP3uiv = (PFNGLTEXCOORDP3UIVPROC)glfwGetProcAddress("glTexCoordP3uiv");
  glTexCoordP4ui = (PFNGLTEXCOORDP4UIPROC)glfwGetProcAddress("glTexCoordP4ui");
  glTexCoordP4uiv = (PFNGLTEXCOORDP4UIVPROC)glfwGetProcAddress("glTexCoordP4uiv");
  glMultiTexCoordP1ui = (PFNGLMULTITEXCOORDP1UIPROC)glfwGetProcAddress("glMultiTexCoordP1ui");
  glMultiTexCoordP1uiv = (PFNGLMULTITEXCOORDP1UIVPROC)glfwGetProcAddress("glMultiTexCoordP1uiv");
  glMultiTexCoordP2ui = (PFNGLMULTITEXCOORDP2UIPROC)glfwGetProcAddress("glMultiTexCoordP2ui");
  glMultiTexCoordP2uiv = (PFNGLMULTITEXCOORDP2UIVPROC)glfwGetProcAddress("glMultiTexCoordP2uiv");
  glMultiTexCoordP3ui = (PFNGLMULTITEXCOORDP3UIPROC)glfwGetProcAddress("glMultiTexCoordP3ui");
  glMultiTexCoordP3uiv = (PFNGLMULTITEXCOORDP3UIVPROC)glfwGetProcAddress("glMultiTexCoordP3uiv");
  glMultiTexCoordP4ui = (PFNGLMULTITEXCOORDP4UIPROC)glfwGetProcAddress("glMultiTexCoordP4ui");
  glMultiTexCoordP4uiv = (PFNGLMULTITEXCOORDP4UIVPROC)glfwGetProcAddress("glMultiTexCoordP4uiv");
  glNormalP3ui = (PFNGLNORMALP3UIPROC)glfwGetProcAddress("glNormalP3ui");
  glNormalP3uiv = (PFNGLNORMALP3UIVPROC)glfwGetProcAddress("glNormalP3uiv");
  glColorP3ui = (PFNGLCOLORP3UIPROC)glfwGetProcAddress("glColorP3ui");
  glColorP3uiv = (PFNGLCOLORP3UIVPROC)glfwGetProcAddress("glColorP3uiv");
  glColorP4ui = (PFNGLCOLORP4UIPROC)glfwGetProcAddress("glColorP4ui");
  glColorP4uiv = (PFNGLCOLORP4UIVPROC)glfwGetProcAddress("glColorP4uiv");
  glSecondaryColorP3ui = (PFNGLSECONDARYCOLORP3UIPROC)glfwGetProcAddress("glSecondaryColorP3ui");
  glSecondaryColorP3uiv = (PFNGLSECONDARYCOLORP3UIVPROC)glfwGetProcAddress("glSecondaryColorP3uiv");
  glVertexAttribP1ui = (PFNGLVERTEXATTRIBP1UIPROC)glfwGetProcAddress("glVertexAttribP1ui");
  glVertexAttribP1uiv = (PFNGLVERTEXATTRIBP1UIVPROC)glfwGetProcAddress("glVertexAttribP1uiv");
  glVertexAttribP2ui = (PFNGLVERTEXATTRIBP2UIPROC)glfwGetProcAddress("glVertexAttribP2ui");
  glVertexAttribP2uiv = (PFNGLVERTEXATTRIBP2UIVPROC)glfwGetProcAddress("glVertexAttribP2uiv");
  glVertexAttribP3ui = (PFNGLVERTEXATTRIBP3UIPROC)glfwGetProcAddress("glVertexAttribP3ui");
  glVertexAttribP3uiv = (PFNGLVERTEXATTRIBP3UIVPROC)glfwGetProcAddress("glVertexAttribP3uiv");
  glVertexAttribP4ui = (PFNGLVERTEXATTRIBP4UIPROC)glfwGetProcAddress("glVertexAttribP4ui");
  glVertexAttribP4uiv = (PFNGLVERTEXATTRIBP4UIVPROC)glfwGetProcAddress("glVertexAttribP4uiv");
  glDrawArraysIndirect = (PFNGLDRAWARRAYSINDIRECTPROC)glfwGetProcAddress("glDrawArraysIndirect");
  glDrawElementsIndirect = (PFNGLDRAWELEMENTSINDIRECTPROC)glfwGetProcAddress("glDrawElementsIndirect");
  glUniform1d = (PFNGLUNIFORM1DPROC)glfwGetProcAddress("glUniform1d");
  glUniform2d = (PFNGLUNIFORM2DPROC)glfwGetProcAddress("glUniform2d");
  glUniform3d = (PFNGLUNIFORM3DPROC)glfwGetProcAddress("glUniform3d");
  glUniform4d = (PFNGLUNIFORM4DPROC)glfwGetProcAddress("glUniform4d");
  glUniform1dv = (PFNGLUNIFORM1DVPROC)glfwGetProcAddress("glUniform1dv");
  glUniform2dv = (PFNGLUNIFORM2DVPROC)glfwGetProcAddress("glUniform2dv");
  glUniform3dv = (PFNGLUNIFORM3DVPROC)glfwGetProcAddress("glUniform3dv");
  glUniform4dv = (PFNGLUNIFORM4DVPROC)glfwGetProcAddress("glUniform4dv");
  glUniformMatrix2dv = (PFNGLUNIFORMMATRIX2DVPROC)glfwGetProcAddress("glUniformMatrix2dv");
  glUniformMatrix3dv = (PFNGLUNIFORMMATRIX3DVPROC)glfwGetProcAddress("glUniformMatrix3dv");
  glUniformMatrix4dv = (PFNGLUNIFORMMATRIX4DVPROC)glfwGetProcAddress("glUniformMatrix4dv");
  glUniformMatrix2x3dv = (PFNGLUNIFORMMATRIX2X3DVPROC)glfwGetProcAddress("glUniformMatrix2x3dv");
  glUniformMatrix2x4dv = (PFNGLUNIFORMMATRIX2X4DVPROC)glfwGetProcAddress("glUniformMatrix2x4dv");
  glUniformMatrix3x2dv = (PFNGLUNIFORMMATRIX3X2DVPROC)glfwGetProcAddress("glUniformMatrix3x2dv");
  glUniformMatrix3x4dv = (PFNGLUNIFORMMATRIX3X4DVPROC)glfwGetProcAddress("glUniformMatrix3x4dv");
  glUniformMatrix4x2dv = (PFNGLUNIFORMMATRIX4X2DVPROC)glfwGetProcAddress("glUniformMatrix4x2dv");
  glUniformMatrix4x3dv = (PFNGLUNIFORMMATRIX4X3DVPROC)glfwGetProcAddress("glUniformMatrix4x3dv");
  glGetUniformdv = (PFNGLGETUNIFORMDVPROC)glfwGetProcAddress("glGetUniformdv");
  glGetSubroutineUniformLocation = (PFNGLGETSUBROUTINEUNIFORMLOCATIONPROC)glfwGetProcAddress("glGetSubroutineUniformLocation");
  glGetSubroutineIndex = (PFNGLGETSUBROUTINEINDEXPROC)glfwGetProcAddress("glGetSubroutineIndex");
  glGetActiveSubroutineUniformiv = (PFNGLGETACTIVESUBROUTINEUNIFORMIVPROC)glfwGetProcAddress("glGetActiveSubroutineUniformiv");
  glGetActiveSubroutineUniformName = (PFNGLGETACTIVESUBROUTINEUNIFORMNAMEPROC)glfwGetProcAddress("glGetActiveSubroutineUniformName");
  glGetActiveSubroutineName = (PFNGLGETACTIVESUBROUTINENAMEPROC)glfwGetProcAddress("glGetActiveSubroutineName");
  glUniformSubroutinesuiv = (PFNGLUNIFORMSUBROUTINESUIVPROC)glfwGetProcAddress("glUniformSubroutinesuiv");
  glGetUniformSubroutineuiv = (PFNGLGETUNIFORMSUBROUTINEUIVPROC)glfwGetProcAddress("glGetUniformSubroutineuiv");
  glGetProgramStageiv = (PFNGLGETPROGRAMSTAGEIVPROC)glfwGetProcAddress("glGetProgramStageiv");
  glPatchParameteri = (PFNGLPATCHPARAMETERIPROC)glfwGetProcAddress("glPatchParameteri");
  glPatchParameterfv = (PFNGLPATCHPARAMETERFVPROC)glfwGetProcAddress("glPatchParameterfv");
  glBindTransformFeedback = (PFNGLBINDTRANSFORMFEEDBACKPROC)glfwGetProcAddress("glBindTransformFeedback");
  glDeleteTransformFeedbacks = (PFNGLDELETETRANSFORMFEEDBACKSPROC)glfwGetProcAddress("glDeleteTransformFeedbacks");
  glGenTransformFeedbacks = (PFNGLGENTRANSFORMFEEDBACKSPROC)glfwGetProcAddress("glGenTransformFeedbacks");
  glIsTransformFeedback = (PFNGLISTRANSFORMFEEDBACKPROC)glfwGetProcAddress("glIsTransformFeedback");
  glPauseTransformFeedback = (PFNGLPAUSETRANSFORMFEEDBACKPROC)glfwGetProcAddress("glPauseTransformFeedback");
  glResumeTransformFeedback = (PFNGLRESUMETRANSFORMFEEDBACKPROC)glfwGetProcAddress("glResumeTransformFeedback");
  glDrawTransformFeedback = (PFNGLDRAWTRANSFORMFEEDBACKPROC)glfwGetProcAddress("glDrawTransformFeedback");
  glDrawTransformFeedbackStream = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMPROC)glfwGetProcAddress("glDrawTransformFeedbackStream");
  glBeginQueryIndexed = (PFNGLBEGINQUERYINDEXEDPROC)glfwGetProcAddress("glBeginQueryIndexed");
  glEndQueryIndexed = (PFNGLENDQUERYINDEXEDPROC)glfwGetProcAddress("glEndQueryIndexed");
  glGetQueryIndexediv = (PFNGLGETQUERYINDEXEDIVPROC)glfwGetProcAddress("glGetQueryIndexediv");
  glReleaseShaderCompiler = (PFNGLRELEASESHADERCOMPILERPROC)glfwGetProcAddress("glReleaseShaderCompiler");
  glShaderBinary = (PFNGLSHADERBINARYPROC)glfwGetProcAddress("glShaderBinary");
  glGetShaderPrecisionFormat = (PFNGLGETSHADERPRECISIONFORMATPROC)glfwGetProcAddress("glGetShaderPrecisionFormat");
  glDepthRangef = (PFNGLDEPTHRANGEFPROC)glfwGetProcAddress("glDepthRangef");
  glClearDepthf = (PFNGLCLEARDEPTHFPROC)glfwGetProcAddress("glClearDepthf");
  glGetProgramBinary = (PFNGLGETPROGRAMBINARYPROC)glfwGetProcAddress("glGetProgramBinary");
  glProgramBinary = (PFNGLPROGRAMBINARYPROC)glfwGetProcAddress("glProgramBinary");
  glProgramParameteri = (PFNGLPROGRAMPARAMETERIPROC)glfwGetProcAddress("glProgramParameteri");
  glUseProgramStages = (PFNGLUSEPROGRAMSTAGESPROC)glfwGetProcAddress("glUseProgramStages");
  glActiveShaderProgram = (PFNGLACTIVESHADERPROGRAMPROC)glfwGetProcAddress("glActiveShaderProgram");
  glCreateShaderProgramv = (PFNGLCREATESHADERPROGRAMVPROC)glfwGetProcAddress("glCreateShaderProgramv");
  glBindProgramPipeline = (PFNGLBINDPROGRAMPIPELINEPROC)glfwGetProcAddress("glBindProgramPipeline");
  glDeleteProgramPipelines = (PFNGLDELETEPROGRAMPIPELINESPROC)glfwGetProcAddress("glDeleteProgramPipelines");
  glGenProgramPipelines = (PFNGLGENPROGRAMPIPELINESPROC)glfwGetProcAddress("glGenProgramPipelines");
  glIsProgramPipeline = (PFNGLISPROGRAMPIPELINEPROC)glfwGetProcAddress("glIsProgramPipeline");
  glGetProgramPipelineiv = (PFNGLGETPROGRAMPIPELINEIVPROC)glfwGetProcAddress("glGetProgramPipelineiv");
  glProgramUniform1i = (PFNGLPROGRAMUNIFORM1IPROC)glfwGetProcAddress("glProgramUniform1i");
  glProgramUniform1iv = (PFNGLPROGRAMUNIFORM1IVPROC)glfwGetProcAddress("glProgramUniform1iv");
  glProgramUniform1f = (PFNGLPROGRAMUNIFORM1FPROC)glfwGetProcAddress("glProgramUniform1f");
  glProgramUniform1fv = (PFNGLPROGRAMUNIFORM1FVPROC)glfwGetProcAddress("glProgramUniform1fv");
  glProgramUniform1d = (PFNGLPROGRAMUNIFORM1DPROC)glfwGetProcAddress("glProgramUniform1d");
  glProgramUniform1dv = (PFNGLPROGRAMUNIFORM1DVPROC)glfwGetProcAddress("glProgramUniform1dv");
  glProgramUniform1ui = (PFNGLPROGRAMUNIFORM1UIPROC)glfwGetProcAddress("glProgramUniform1ui");
  glProgramUniform1uiv = (PFNGLPROGRAMUNIFORM1UIVPROC)glfwGetProcAddress("glProgramUniform1uiv");
  glProgramUniform2i = (PFNGLPROGRAMUNIFORM2IPROC)glfwGetProcAddress("glProgramUniform2i");
  glProgramUniform2iv = (PFNGLPROGRAMUNIFORM2IVPROC)glfwGetProcAddress("glProgramUniform2iv");
  glProgramUniform2f = (PFNGLPROGRAMUNIFORM2FPROC)glfwGetProcAddress("glProgramUniform2f");
  glProgramUniform2fv = (PFNGLPROGRAMUNIFORM2FVPROC)glfwGetProcAddress("glProgramUniform2fv");
  glProgramUniform2d = (PFNGLPROGRAMUNIFORM2DPROC)glfwGetProcAddress("glProgramUniform2d");
  glProgramUniform2dv = (PFNGLPROGRAMUNIFORM2DVPROC)glfwGetProcAddress("glProgramUniform2dv");
  glProgramUniform2ui = (PFNGLPROGRAMUNIFORM2UIPROC)glfwGetProcAddress("glProgramUniform2ui");
  glProgramUniform2uiv = (PFNGLPROGRAMUNIFORM2UIVPROC)glfwGetProcAddress("glProgramUniform2uiv");
  glProgramUniform3i = (PFNGLPROGRAMUNIFORM3IPROC)glfwGetProcAddress("glProgramUniform3i");
  glProgramUniform3iv = (PFNGLPROGRAMUNIFORM3IVPROC)glfwGetProcAddress("glProgramUniform3iv");
  glProgramUniform3f = (PFNGLPROGRAMUNIFORM3FPROC)glfwGetProcAddress("glProgramUniform3f");
  glProgramUniform3fv = (PFNGLPROGRAMUNIFORM3FVPROC)glfwGetProcAddress("glProgramUniform3fv");
  glProgramUniform3d = (PFNGLPROGRAMUNIFORM3DPROC)glfwGetProcAddress("glProgramUniform3d");
  glProgramUniform3dv = (PFNGLPROGRAMUNIFORM3DVPROC)glfwGetProcAddress("glProgramUniform3dv");
  glProgramUniform3ui = (PFNGLPROGRAMUNIFORM3UIPROC)glfwGetProcAddress("glProgramUniform3ui");
  glProgramUniform3uiv = (PFNGLPROGRAMUNIFORM3UIVPROC)glfwGetProcAddress("glProgramUniform3uiv");
  glProgramUniform4i = (PFNGLPROGRAMUNIFORM4IPROC)glfwGetProcAddress("glProgramUniform4i");
  glProgramUniform4iv = (PFNGLPROGRAMUNIFORM4IVPROC)glfwGetProcAddress("glProgramUniform4iv");
  glProgramUniform4f = (PFNGLPROGRAMUNIFORM4FPROC)glfwGetProcAddress("glProgramUniform4f");
  glProgramUniform4fv = (PFNGLPROGRAMUNIFORM4FVPROC)glfwGetProcAddress("glProgramUniform4fv");
  glProgramUniform4d = (PFNGLPROGRAMUNIFORM4DPROC)glfwGetProcAddress("glProgramUniform4d");
  glProgramUniform4dv = (PFNGLPROGRAMUNIFORM4DVPROC)glfwGetProcAddress("glProgramUniform4dv");
  glProgramUniform4ui = (PFNGLPROGRAMUNIFORM4UIPROC)glfwGetProcAddress("glProgramUniform4ui");
  glProgramUniform4uiv = (PFNGLPROGRAMUNIFORM4UIVPROC)glfwGetProcAddress("glProgramUniform4uiv");
  glProgramUniformMatrix2fv = (PFNGLPROGRAMUNIFORMMATRIX2FVPROC)glfwGetProcAddress("glProgramUniformMatrix2fv");
  glProgramUniformMatrix3fv = (PFNGLPROGRAMUNIFORMMATRIX3FVPROC)glfwGetProcAddress("glProgramUniformMatrix3fv");
  glProgramUniformMatrix4fv = (PFNGLPROGRAMUNIFORMMATRIX4FVPROC)glfwGetProcAddress("glProgramUniformMatrix4fv");
  glProgramUniformMatrix2dv = (PFNGLPROGRAMUNIFORMMATRIX2DVPROC)glfwGetProcAddress("glProgramUniformMatrix2dv");
  glProgramUniformMatrix3dv = (PFNGLPROGRAMUNIFORMMATRIX3DVPROC)glfwGetProcAddress("glProgramUniformMatrix3dv");
  glProgramUniformMatrix4dv = (PFNGLPROGRAMUNIFORMMATRIX4DVPROC)glfwGetProcAddress("glProgramUniformMatrix4dv");
  glProgramUniformMatrix2x3fv = (PFNGLPROGRAMUNIFORMMATRIX2X3FVPROC)glfwGetProcAddress("glProgramUniformMatrix2x3fv");
  glProgramUniformMatrix3x2fv = (PFNGLPROGRAMUNIFORMMATRIX3X2FVPROC)glfwGetProcAddress("glProgramUniformMatrix3x2fv");
  glProgramUniformMatrix2x4fv = (PFNGLPROGRAMUNIFORMMATRIX2X4FVPROC)glfwGetProcAddress("glProgramUniformMatrix2x4fv");
  glProgramUniformMatrix4x2fv = (PFNGLPROGRAMUNIFORMMATRIX4X2FVPROC)glfwGetProcAddress("glProgramUniformMatrix4x2fv");
  glProgramUniformMatrix3x4fv = (PFNGLPROGRAMUNIFORMMATRIX3X4FVPROC)glfwGetProcAddress("glProgramUniformMatrix3x4fv");
  glProgramUniformMatrix4x3fv = (PFNGLPROGRAMUNIFORMMATRIX4X3FVPROC)glfwGetProcAddress("glProgramUniformMatrix4x3fv");
  glProgramUniformMatrix2x3dv = (PFNGLPROGRAMUNIFORMMATRIX2X3DVPROC)glfwGetProcAddress("glProgramUniformMatrix2x3dv");
  glProgramUniformMatrix3x2dv = (PFNGLPROGRAMUNIFORMMATRIX3X2DVPROC)glfwGetProcAddress("glProgramUniformMatrix3x2dv");
  glProgramUniformMatrix2x4dv = (PFNGLPROGRAMUNIFORMMATRIX2X4DVPROC)glfwGetProcAddress("glProgramUniformMatrix2x4dv");
  glProgramUniformMatrix4x2dv = (PFNGLPROGRAMUNIFORMMATRIX4X2DVPROC)glfwGetProcAddress("glProgramUniformMatrix4x2dv");
  glProgramUniformMatrix3x4dv = (PFNGLPROGRAMUNIFORMMATRIX3X4DVPROC)glfwGetProcAddress("glProgramUniformMatrix3x4dv");
  glProgramUniformMatrix4x3dv = (PFNGLPROGRAMUNIFORMMATRIX4X3DVPROC)glfwGetProcAddress("glProgramUniformMatrix4x3dv");
  glValidateProgramPipeline = (PFNGLVALIDATEPROGRAMPIPELINEPROC)glfwGetProcAddress("glValidateProgramPipeline");
  glGetProgramPipelineInfoLog = (PFNGLGETPROGRAMPIPELINEINFOLOGPROC)glfwGetProcAddress("glGetProgramPipelineInfoLog");
  glVertexAttribL1d = (PFNGLVERTEXATTRIBL1DPROC)glfwGetProcAddress("glVertexAttribL1d");
  glVertexAttribL2d = (PFNGLVERTEXATTRIBL2DPROC)glfwGetProcAddress("glVertexAttribL2d");
  glVertexAttribL3d = (PFNGLVERTEXATTRIBL3DPROC)glfwGetProcAddress("glVertexAttribL3d");
  glVertexAttribL4d = (PFNGLVERTEXATTRIBL4DPROC)glfwGetProcAddress("glVertexAttribL4d");
  glVertexAttribL1dv = (PFNGLVERTEXATTRIBL1DVPROC)glfwGetProcAddress("glVertexAttribL1dv");
  glVertexAttribL2dv = (PFNGLVERTEXATTRIBL2DVPROC)glfwGetProcAddress("glVertexAttribL2dv");
  glVertexAttribL3dv = (PFNGLVERTEXATTRIBL3DVPROC)glfwGetProcAddress("glVertexAttribL3dv");
  glVertexAttribL4dv = (PFNGLVERTEXATTRIBL4DVPROC)glfwGetProcAddress("glVertexAttribL4dv");
  glVertexAttribLPointer = (PFNGLVERTEXATTRIBLPOINTERPROC)glfwGetProcAddress("glVertexAttribLPointer");
  glGetVertexAttribLdv = (PFNGLGETVERTEXATTRIBLDVPROC)glfwGetProcAddress("glGetVertexAttribLdv");
  glViewportArrayv = (PFNGLVIEWPORTARRAYVPROC)glfwGetProcAddress("glViewportArrayv");
  glViewportIndexedf = (PFNGLVIEWPORTINDEXEDFPROC)glfwGetProcAddress("glViewportIndexedf");
  glViewportIndexedfv = (PFNGLVIEWPORTINDEXEDFVPROC)glfwGetProcAddress("glViewportIndexedfv");
  glScissorArrayv = (PFNGLSCISSORARRAYVPROC)glfwGetProcAddress("glScissorArrayv");
  glScissorIndexed = (PFNGLSCISSORINDEXEDPROC)glfwGetProcAddress("glScissorIndexed");
  glScissorIndexedv = (PFNGLSCISSORINDEXEDVPROC)glfwGetProcAddress("glScissorIndexedv");
  glDepthRangeArrayv = (PFNGLDEPTHRANGEARRAYVPROC)glfwGetProcAddress("glDepthRangeArrayv");
  glDepthRangeIndexed = (PFNGLDEPTHRANGEINDEXEDPROC)glfwGetProcAddress("glDepthRangeIndexed");
  glGetFloati_v = (PFNGLGETFLOATI_VPROC)glfwGetProcAddress("glGetFloati_v");
  glGetDoublei_v = (PFNGLGETDOUBLEI_VPROC)glfwGetProcAddress("glGetDoublei_v");
  glCreateSyncFromCLeventARB = (PFNGLCREATESYNCFROMCLEVENTARBPROC)glfwGetProcAddress("glCreateSyncFromCLeventARB");
  glDebugMessageControlARB = (PFNGLDEBUGMESSAGECONTROLARBPROC)glfwGetProcAddress("glDebugMessageControlARB");
  glDebugMessageInsertARB = (PFNGLDEBUGMESSAGEINSERTARBPROC)glfwGetProcAddress("glDebugMessageInsertARB");
  glDebugMessageCallbackARB = (PFNGLDEBUGMESSAGECALLBACKARBPROC)glfwGetProcAddress("glDebugMessageCallbackARB");
  glGetDebugMessageLogARB = (PFNGLGETDEBUGMESSAGELOGARBPROC)glfwGetProcAddress("glGetDebugMessageLogARB");
  glGetGraphicsResetStatusARB = (PFNGLGETGRAPHICSRESETSTATUSARBPROC)glfwGetProcAddress("glGetGraphicsResetStatusARB");
  glGetnMapdvARB = (PFNGLGETNMAPDVARBPROC)glfwGetProcAddress("glGetnMapdvARB");
  glGetnMapfvARB = (PFNGLGETNMAPFVARBPROC)glfwGetProcAddress("glGetnMapfvARB");
  glGetnMapivARB = (PFNGLGETNMAPIVARBPROC)glfwGetProcAddress("glGetnMapivARB");
  glGetnPixelMapfvARB = (PFNGLGETNPIXELMAPFVARBPROC)glfwGetProcAddress("glGetnPixelMapfvARB");
  glGetnPixelMapuivARB = (PFNGLGETNPIXELMAPUIVARBPROC)glfwGetProcAddress("glGetnPixelMapuivARB");
  glGetnPixelMapusvARB = (PFNGLGETNPIXELMAPUSVARBPROC)glfwGetProcAddress("glGetnPixelMapusvARB");
  glGetnPolygonStippleARB = (PFNGLGETNPOLYGONSTIPPLEARBPROC)glfwGetProcAddress("glGetnPolygonStippleARB");
  glGetnColorTableARB = (PFNGLGETNCOLORTABLEARBPROC)glfwGetProcAddress("glGetnColorTableARB");
  glGetnConvolutionFilterARB = (PFNGLGETNCONVOLUTIONFILTERARBPROC)glfwGetProcAddress("glGetnConvolutionFilterARB");
  glGetnSeparableFilterARB = (PFNGLGETNSEPARABLEFILTERARBPROC)glfwGetProcAddress("glGetnSeparableFilterARB");
  glGetnHistogramARB = (PFNGLGETNHISTOGRAMARBPROC)glfwGetProcAddress("glGetnHistogramARB");
  glGetnMinmaxARB = (PFNGLGETNMINMAXARBPROC)glfwGetProcAddress("glGetnMinmaxARB");
  glGetnTexImageARB = (PFNGLGETNTEXIMAGEARBPROC)glfwGetProcAddress("glGetnTexImageARB");
  glReadnPixelsARB = (PFNGLREADNPIXELSARBPROC)glfwGetProcAddress("glReadnPixelsARB");
  glGetnCompressedTexImageARB = (PFNGLGETNCOMPRESSEDTEXIMAGEARBPROC)glfwGetProcAddress("glGetnCompressedTexImageARB");
  glGetnUniformfvARB = (PFNGLGETNUNIFORMFVARBPROC)glfwGetProcAddress("glGetnUniformfvARB");
  glGetnUniformivARB = (PFNGLGETNUNIFORMIVARBPROC)glfwGetProcAddress("glGetnUniformivARB");
  glGetnUniformuivARB = (PFNGLGETNUNIFORMUIVARBPROC)glfwGetProcAddress("glGetnUniformuivARB");
  glGetnUniformdvARB = (PFNGLGETNUNIFORMDVARBPROC)glfwGetProcAddress("glGetnUniformdvARB");
  glDrawArraysInstancedBaseInstance = (PFNGLDRAWARRAYSINSTANCEDBASEINSTANCEPROC)glfwGetProcAddress("glDrawArraysInstancedBaseInstance");
  glDrawElementsInstancedBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEINSTANCEPROC)glfwGetProcAddress("glDrawElementsInstancedBaseInstance");
  glDrawElementsInstancedBaseVertexBaseInstance = (PFNGLDRAWELEMENTSINSTANCEDBASEVERTEXBASEINSTANCEPROC)glfwGetProcAddress("glDrawElementsInstancedBaseVertexBaseInstance");
  glDrawTransformFeedbackInstanced = (PFNGLDRAWTRANSFORMFEEDBACKINSTANCEDPROC)glfwGetProcAddress("glDrawTransformFeedbackInstanced");
  glDrawTransformFeedbackStreamInstanced = (PFNGLDRAWTRANSFORMFEEDBACKSTREAMINSTANCEDPROC)glfwGetProcAddress("glDrawTransformFeedbackStreamInstanced");
  glGetInternalformativ = (PFNGLGETINTERNALFORMATIVPROC)glfwGetProcAddress("glGetInternalformativ");
  glGetActiveAtomicCounterBufferiv = (PFNGLGETACTIVEATOMICCOUNTERBUFFERIVPROC)glfwGetProcAddress("glGetActiveAtomicCounterBufferiv");
  glBindImageTexture = (PFNGLBINDIMAGETEXTUREPROC)glfwGetProcAddress("glBindImageTexture");
  glMemoryBarrier = (PFNGLMEMORYBARRIERPROC)glfwGetProcAddress("glMemoryBarrier");
  glTexStorage1D = (PFNGLTEXSTORAGE1DPROC)glfwGetProcAddress("glTexStorage1D");
  glTexStorage2D = (PFNGLTEXSTORAGE2DPROC)glfwGetProcAddress("glTexStorage2D");
  glTexStorage3D = (PFNGLTEXSTORAGE3DPROC)glfwGetProcAddress("glTexStorage3D");
  glTextureStorage1DEXT = (PFNGLTEXTURESTORAGE1DEXTPROC)glfwGetProcAddress("glTextureStorage1DEXT");
  glTextureStorage2DEXT = (PFNGLTEXTURESTORAGE2DEXTPROC)glfwGetProcAddress("glTextureStorage2DEXT");
  glTextureStorage3DEXT = (PFNGLTEXTURESTORAGE3DEXTPROC)glfwGetProcAddress("glTextureStorage3DEXT");
  glDebugMessageControl = (PFNGLDEBUGMESSAGECONTROLPROC)glfwGetProcAddress("glDebugMessageControl");
  glDebugMessageInsert = (PFNGLDEBUGMESSAGEINSERTPROC)glfwGetProcAddress("glDebugMessageInsert");
  glDebugMessageCallback = (PFNGLDEBUGMESSAGECALLBACKPROC)glfwGetProcAddress("glDebugMessageCallback");
  glGetDebugMessageLog = (PFNGLGETDEBUGMESSAGELOGPROC)glfwGetProcAddress("glGetDebugMessageLog");
  glPushDebugGroup = (PFNGLPUSHDEBUGGROUPPROC)glfwGetProcAddress("glPushDebugGroup");
  glPopDebugGroup = (PFNGLPOPDEBUGGROUPPROC)glfwGetProcAddress("glPopDebugGroup");
  glObjectLabel = (PFNGLOBJECTLABELPROC)glfwGetProcAddress("glObjectLabel");
  glGetObjectLabel = (PFNGLGETOBJECTLABELPROC)glfwGetProcAddress("glGetObjectLabel");
  glObjectPtrLabel = (PFNGLOBJECTPTRLABELPROC)glfwGetProcAddress("glObjectPtrLabel");
  glGetObjectPtrLabel = (PFNGLGETOBJECTPTRLABELPROC)glfwGetProcAddress("glGetObjectPtrLabel");
  glClearBufferData = (PFNGLCLEARBUFFERDATAPROC)glfwGetProcAddress("glClearBufferData");
  glClearBufferSubData = (PFNGLCLEARBUFFERSUBDATAPROC)glfwGetProcAddress("glClearBufferSubData");
  glClearNamedBufferDataEXT = (PFNGLCLEARNAMEDBUFFERDATAEXTPROC)glfwGetProcAddress("glClearNamedBufferDataEXT");
  glClearNamedBufferSubDataEXT = (PFNGLCLEARNAMEDBUFFERSUBDATAEXTPROC)glfwGetProcAddress("glClearNamedBufferSubDataEXT");
  glDispatchCompute = (PFNGLDISPATCHCOMPUTEPROC)glfwGetProcAddress("glDispatchCompute");
  glDispatchComputeIndirect = (PFNGLDISPATCHCOMPUTEINDIRECTPROC)glfwGetProcAddress("glDispatchComputeIndirect");
  glCopyImageSubData = (PFNGLCOPYIMAGESUBDATAPROC)glfwGetProcAddress("glCopyImageSubData");
  glTextureView = (PFNGLTEXTUREVIEWPROC)glfwGetProcAddress("glTextureView");
  glBindVertexBuffer = (PFNGLBINDVERTEXBUFFERPROC)glfwGetProcAddress("glBindVertexBuffer");
  glVertexAttribFormat = (PFNGLVERTEXATTRIBFORMATPROC)glfwGetProcAddress("glVertexAttribFormat");
  glVertexAttribIFormat = (PFNGLVERTEXATTRIBIFORMATPROC)glfwGetProcAddress("glVertexAttribIFormat");
  glVertexAttribLFormat = (PFNGLVERTEXATTRIBLFORMATPROC)glfwGetProcAddress("glVertexAttribLFormat");
  glVertexAttribBinding = (PFNGLVERTEXATTRIBBINDINGPROC)glfwGetProcAddress("glVertexAttribBinding");
  glVertexBindingDivisor = (PFNGLVERTEXBINDINGDIVISORPROC)glfwGetProcAddress("glVertexBindingDivisor");
  glVertexArrayBindVertexBufferEXT = (PFNGLVERTEXARRAYBINDVERTEXBUFFEREXTPROC)glfwGetProcAddress("glVertexArrayBindVertexBufferEXT");
  glVertexArrayVertexAttribFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBFORMATEXTPROC)glfwGetProcAddress("glVertexArrayVertexAttribFormatEXT");
  glVertexArrayVertexAttribIFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBIFORMATEXTPROC)glfwGetProcAddress("glVertexArrayVertexAttribIFormatEXT");
  glVertexArrayVertexAttribLFormatEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLFORMATEXTPROC)glfwGetProcAddress("glVertexArrayVertexAttribLFormatEXT");
  glVertexArrayVertexAttribBindingEXT = (PFNGLVERTEXARRAYVERTEXATTRIBBINDINGEXTPROC)glfwGetProcAddress("glVertexArrayVertexAttribBindingEXT");
  glVertexArrayVertexBindingDivisorEXT = (PFNGLVERTEXARRAYVERTEXBINDINGDIVISOREXTPROC)glfwGetProcAddress("glVertexArrayVertexBindingDivisorEXT");
  glFramebufferParameteri = (PFNGLFRAMEBUFFERPARAMETERIPROC)glfwGetProcAddress("glFramebufferParameteri");
  glGetFramebufferParameteriv = (PFNGLGETFRAMEBUFFERPARAMETERIVPROC)glfwGetProcAddress("glGetFramebufferParameteriv");
  glNamedFramebufferParameteriEXT = (PFNGLNAMEDFRAMEBUFFERPARAMETERIEXTPROC)glfwGetProcAddress("glNamedFramebufferParameteriEXT");
  glGetNamedFramebufferParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERPARAMETERIVEXTPROC)glfwGetProcAddress("glGetNamedFramebufferParameterivEXT");
  glGetInternalformati64v = (PFNGLGETINTERNALFORMATI64VPROC)glfwGetProcAddress("glGetInternalformati64v");
  glInvalidateTexSubImage = (PFNGLINVALIDATETEXSUBIMAGEPROC)glfwGetProcAddress("glInvalidateTexSubImage");
  glInvalidateTexImage = (PFNGLINVALIDATETEXIMAGEPROC)glfwGetProcAddress("glInvalidateTexImage");
  glInvalidateBufferSubData = (PFNGLINVALIDATEBUFFERSUBDATAPROC)glfwGetProcAddress("glInvalidateBufferSubData");
  glInvalidateBufferData = (PFNGLINVALIDATEBUFFERDATAPROC)glfwGetProcAddress("glInvalidateBufferData");
  glInvalidateFramebuffer = (PFNGLINVALIDATEFRAMEBUFFERPROC)glfwGetProcAddress("glInvalidateFramebuffer");
  glInvalidateSubFramebuffer = (PFNGLINVALIDATESUBFRAMEBUFFERPROC)glfwGetProcAddress("glInvalidateSubFramebuffer");
  glMultiDrawArraysIndirect = (PFNGLMULTIDRAWARRAYSINDIRECTPROC)glfwGetProcAddress("glMultiDrawArraysIndirect");
  glMultiDrawElementsIndirect = (PFNGLMULTIDRAWELEMENTSINDIRECTPROC)glfwGetProcAddress("glMultiDrawElementsIndirect");
  glGetProgramInterfaceiv = (PFNGLGETPROGRAMINTERFACEIVPROC)glfwGetProcAddress("glGetProgramInterfaceiv");
  glGetProgramResourceIndex = (PFNGLGETPROGRAMRESOURCEINDEXPROC)glfwGetProcAddress("glGetProgramResourceIndex");
  glGetProgramResourceName = (PFNGLGETPROGRAMRESOURCENAMEPROC)glfwGetProcAddress("glGetProgramResourceName");
  glGetProgramResourceiv = (PFNGLGETPROGRAMRESOURCEIVPROC)glfwGetProcAddress("glGetProgramResourceiv");
  glGetProgramResourceLocation = (PFNGLGETPROGRAMRESOURCELOCATIONPROC)glfwGetProcAddress("glGetProgramResourceLocation");
  glGetProgramResourceLocationIndex = (PFNGLGETPROGRAMRESOURCELOCATIONINDEXPROC)glfwGetProcAddress("glGetProgramResourceLocationIndex");
  glShaderStorageBlockBinding = (PFNGLSHADERSTORAGEBLOCKBINDINGPROC)glfwGetProcAddress("glShaderStorageBlockBinding");
  glTexBufferRange = (PFNGLTEXBUFFERRANGEPROC)glfwGetProcAddress("glTexBufferRange");
  glTextureBufferRangeEXT = (PFNGLTEXTUREBUFFERRANGEEXTPROC)glfwGetProcAddress("glTextureBufferRangeEXT");
  glTexStorage2DMultisample = (PFNGLTEXSTORAGE2DMULTISAMPLEPROC)glfwGetProcAddress("glTexStorage2DMultisample");
  glTexStorage3DMultisample = (PFNGLTEXSTORAGE3DMULTISAMPLEPROC)glfwGetProcAddress("glTexStorage3DMultisample");
  glTextureStorage2DMultisampleEXT = (PFNGLTEXTURESTORAGE2DMULTISAMPLEEXTPROC)glfwGetProcAddress("glTextureStorage2DMultisampleEXT");
  glTextureStorage3DMultisampleEXT = (PFNGLTEXTURESTORAGE3DMULTISAMPLEEXTPROC)glfwGetProcAddress("glTextureStorage3DMultisampleEXT");
  glBlendColorEXT = (PFNGLBLENDCOLOREXTPROC)glfwGetProcAddress("glBlendColorEXT");
  glPolygonOffsetEXT = (PFNGLPOLYGONOFFSETEXTPROC)glfwGetProcAddress("glPolygonOffsetEXT");
  glTexImage3DEXT = (PFNGLTEXIMAGE3DEXTPROC)glfwGetProcAddress("glTexImage3DEXT");
  glTexSubImage3DEXT = (PFNGLTEXSUBIMAGE3DEXTPROC)glfwGetProcAddress("glTexSubImage3DEXT");
  glGetTexFilterFuncSGIS = (PFNGLGETTEXFILTERFUNCSGISPROC)glfwGetProcAddress("glGetTexFilterFuncSGIS");
  glTexFilterFuncSGIS = (PFNGLTEXFILTERFUNCSGISPROC)glfwGetProcAddress("glTexFilterFuncSGIS");
  glTexSubImage1DEXT = (PFNGLTEXSUBIMAGE1DEXTPROC)glfwGetProcAddress("glTexSubImage1DEXT");
  glTexSubImage2DEXT = (PFNGLTEXSUBIMAGE2DEXTPROC)glfwGetProcAddress("glTexSubImage2DEXT");
  glCopyTexImage1DEXT = (PFNGLCOPYTEXIMAGE1DEXTPROC)glfwGetProcAddress("glCopyTexImage1DEXT");
  glCopyTexImage2DEXT = (PFNGLCOPYTEXIMAGE2DEXTPROC)glfwGetProcAddress("glCopyTexImage2DEXT");
  glCopyTexSubImage1DEXT = (PFNGLCOPYTEXSUBIMAGE1DEXTPROC)glfwGetProcAddress("glCopyTexSubImage1DEXT");
  glCopyTexSubImage2DEXT = (PFNGLCOPYTEXSUBIMAGE2DEXTPROC)glfwGetProcAddress("glCopyTexSubImage2DEXT");
  glCopyTexSubImage3DEXT = (PFNGLCOPYTEXSUBIMAGE3DEXTPROC)glfwGetProcAddress("glCopyTexSubImage3DEXT");
  glGetHistogramEXT = (PFNGLGETHISTOGRAMEXTPROC)glfwGetProcAddress("glGetHistogramEXT");
  glGetHistogramParameterfvEXT = (PFNGLGETHISTOGRAMPARAMETERFVEXTPROC)glfwGetProcAddress("glGetHistogramParameterfvEXT");
  glGetHistogramParameterivEXT = (PFNGLGETHISTOGRAMPARAMETERIVEXTPROC)glfwGetProcAddress("glGetHistogramParameterivEXT");
  glGetMinmaxEXT = (PFNGLGETMINMAXEXTPROC)glfwGetProcAddress("glGetMinmaxEXT");
  glGetMinmaxParameterfvEXT = (PFNGLGETMINMAXPARAMETERFVEXTPROC)glfwGetProcAddress("glGetMinmaxParameterfvEXT");
  glGetMinmaxParameterivEXT = (PFNGLGETMINMAXPARAMETERIVEXTPROC)glfwGetProcAddress("glGetMinmaxParameterivEXT");
  glHistogramEXT = (PFNGLHISTOGRAMEXTPROC)glfwGetProcAddress("glHistogramEXT");
  glMinmaxEXT = (PFNGLMINMAXEXTPROC)glfwGetProcAddress("glMinmaxEXT");
  glResetHistogramEXT = (PFNGLRESETHISTOGRAMEXTPROC)glfwGetProcAddress("glResetHistogramEXT");
  glResetMinmaxEXT = (PFNGLRESETMINMAXEXTPROC)glfwGetProcAddress("glResetMinmaxEXT");
  glConvolutionFilter1DEXT = (PFNGLCONVOLUTIONFILTER1DEXTPROC)glfwGetProcAddress("glConvolutionFilter1DEXT");
  glConvolutionFilter2DEXT = (PFNGLCONVOLUTIONFILTER2DEXTPROC)glfwGetProcAddress("glConvolutionFilter2DEXT");
  glConvolutionParameterfEXT = (PFNGLCONVOLUTIONPARAMETERFEXTPROC)glfwGetProcAddress("glConvolutionParameterfEXT");
  glConvolutionParameterfvEXT = (PFNGLCONVOLUTIONPARAMETERFVEXTPROC)glfwGetProcAddress("glConvolutionParameterfvEXT");
  glConvolutionParameteriEXT = (PFNGLCONVOLUTIONPARAMETERIEXTPROC)glfwGetProcAddress("glConvolutionParameteriEXT");
  glConvolutionParameterivEXT = (PFNGLCONVOLUTIONPARAMETERIVEXTPROC)glfwGetProcAddress("glConvolutionParameterivEXT");
  glCopyConvolutionFilter1DEXT = (PFNGLCOPYCONVOLUTIONFILTER1DEXTPROC)glfwGetProcAddress("glCopyConvolutionFilter1DEXT");
  glCopyConvolutionFilter2DEXT = (PFNGLCOPYCONVOLUTIONFILTER2DEXTPROC)glfwGetProcAddress("glCopyConvolutionFilter2DEXT");
  glGetConvolutionFilterEXT = (PFNGLGETCONVOLUTIONFILTEREXTPROC)glfwGetProcAddress("glGetConvolutionFilterEXT");
  glGetConvolutionParameterfvEXT = (PFNGLGETCONVOLUTIONPARAMETERFVEXTPROC)glfwGetProcAddress("glGetConvolutionParameterfvEXT");
  glGetConvolutionParameterivEXT = (PFNGLGETCONVOLUTIONPARAMETERIVEXTPROC)glfwGetProcAddress("glGetConvolutionParameterivEXT");
  glGetSeparableFilterEXT = (PFNGLGETSEPARABLEFILTEREXTPROC)glfwGetProcAddress("glGetSeparableFilterEXT");
  glSeparableFilter2DEXT = (PFNGLSEPARABLEFILTER2DEXTPROC)glfwGetProcAddress("glSeparableFilter2DEXT");
  glColorTableSGI = (PFNGLCOLORTABLESGIPROC)glfwGetProcAddress("glColorTableSGI");
  glColorTableParameterfvSGI = (PFNGLCOLORTABLEPARAMETERFVSGIPROC)glfwGetProcAddress("glColorTableParameterfvSGI");
  glColorTableParameterivSGI = (PFNGLCOLORTABLEPARAMETERIVSGIPROC)glfwGetProcAddress("glColorTableParameterivSGI");
  glCopyColorTableSGI = (PFNGLCOPYCOLORTABLESGIPROC)glfwGetProcAddress("glCopyColorTableSGI");
  glGetColorTableSGI = (PFNGLGETCOLORTABLESGIPROC)glfwGetProcAddress("glGetColorTableSGI");
  glGetColorTableParameterfvSGI = (PFNGLGETCOLORTABLEPARAMETERFVSGIPROC)glfwGetProcAddress("glGetColorTableParameterfvSGI");
  glGetColorTableParameterivSGI = (PFNGLGETCOLORTABLEPARAMETERIVSGIPROC)glfwGetProcAddress("glGetColorTableParameterivSGI");
  glPixelTexGenSGIX = (PFNGLPIXELTEXGENSGIXPROC)glfwGetProcAddress("glPixelTexGenSGIX");
  glPixelTexGenParameteriSGIS = (PFNGLPIXELTEXGENPARAMETERISGISPROC)glfwGetProcAddress("glPixelTexGenParameteriSGIS");
  glPixelTexGenParameterivSGIS = (PFNGLPIXELTEXGENPARAMETERIVSGISPROC)glfwGetProcAddress("glPixelTexGenParameterivSGIS");
  glPixelTexGenParameterfSGIS = (PFNGLPIXELTEXGENPARAMETERFSGISPROC)glfwGetProcAddress("glPixelTexGenParameterfSGIS");
  glPixelTexGenParameterfvSGIS = (PFNGLPIXELTEXGENPARAMETERFVSGISPROC)glfwGetProcAddress("glPixelTexGenParameterfvSGIS");
  glGetPixelTexGenParameterivSGIS = (PFNGLGETPIXELTEXGENPARAMETERIVSGISPROC)glfwGetProcAddress("glGetPixelTexGenParameterivSGIS");
  glGetPixelTexGenParameterfvSGIS = (PFNGLGETPIXELTEXGENPARAMETERFVSGISPROC)glfwGetProcAddress("glGetPixelTexGenParameterfvSGIS");
  glTexImage4DSGIS = (PFNGLTEXIMAGE4DSGISPROC)glfwGetProcAddress("glTexImage4DSGIS");
  glTexSubImage4DSGIS = (PFNGLTEXSUBIMAGE4DSGISPROC)glfwGetProcAddress("glTexSubImage4DSGIS");
  glAreTexturesResidentEXT = (PFNGLARETEXTURESRESIDENTEXTPROC)glfwGetProcAddress("glAreTexturesResidentEXT");
  glBindTextureEXT = (PFNGLBINDTEXTUREEXTPROC)glfwGetProcAddress("glBindTextureEXT");
  glDeleteTexturesEXT = (PFNGLDELETETEXTURESEXTPROC)glfwGetProcAddress("glDeleteTexturesEXT");
  glGenTexturesEXT = (PFNGLGENTEXTURESEXTPROC)glfwGetProcAddress("glGenTexturesEXT");
  glIsTextureEXT = (PFNGLISTEXTUREEXTPROC)glfwGetProcAddress("glIsTextureEXT");
  glPrioritizeTexturesEXT = (PFNGLPRIORITIZETEXTURESEXTPROC)glfwGetProcAddress("glPrioritizeTexturesEXT");
  glDetailTexFuncSGIS = (PFNGLDETAILTEXFUNCSGISPROC)glfwGetProcAddress("glDetailTexFuncSGIS");
  glGetDetailTexFuncSGIS = (PFNGLGETDETAILTEXFUNCSGISPROC)glfwGetProcAddress("glGetDetailTexFuncSGIS");
  glSharpenTexFuncSGIS = (PFNGLSHARPENTEXFUNCSGISPROC)glfwGetProcAddress("glSharpenTexFuncSGIS");
  glGetSharpenTexFuncSGIS = (PFNGLGETSHARPENTEXFUNCSGISPROC)glfwGetProcAddress("glGetSharpenTexFuncSGIS");
  glSampleMaskSGIS = (PFNGLSAMPLEMASKSGISPROC)glfwGetProcAddress("glSampleMaskSGIS");
  glSamplePatternSGIS = (PFNGLSAMPLEPATTERNSGISPROC)glfwGetProcAddress("glSamplePatternSGIS");
  glArrayElementEXT = (PFNGLARRAYELEMENTEXTPROC)glfwGetProcAddress("glArrayElementEXT");
  glColorPointerEXT = (PFNGLCOLORPOINTEREXTPROC)glfwGetProcAddress("glColorPointerEXT");
  glDrawArraysEXT = (PFNGLDRAWARRAYSEXTPROC)glfwGetProcAddress("glDrawArraysEXT");
  glEdgeFlagPointerEXT = (PFNGLEDGEFLAGPOINTEREXTPROC)glfwGetProcAddress("glEdgeFlagPointerEXT");
  glGetPointervEXT = (PFNGLGETPOINTERVEXTPROC)glfwGetProcAddress("glGetPointervEXT");
  glIndexPointerEXT = (PFNGLINDEXPOINTEREXTPROC)glfwGetProcAddress("glIndexPointerEXT");
  glNormalPointerEXT = (PFNGLNORMALPOINTEREXTPROC)glfwGetProcAddress("glNormalPointerEXT");
  glTexCoordPointerEXT = (PFNGLTEXCOORDPOINTEREXTPROC)glfwGetProcAddress("glTexCoordPointerEXT");
  glVertexPointerEXT = (PFNGLVERTEXPOINTEREXTPROC)glfwGetProcAddress("glVertexPointerEXT");
  glBlendEquationEXT = (PFNGLBLENDEQUATIONEXTPROC)glfwGetProcAddress("glBlendEquationEXT");
  glSpriteParameterfSGIX = (PFNGLSPRITEPARAMETERFSGIXPROC)glfwGetProcAddress("glSpriteParameterfSGIX");
  glSpriteParameterfvSGIX = (PFNGLSPRITEPARAMETERFVSGIXPROC)glfwGetProcAddress("glSpriteParameterfvSGIX");
  glSpriteParameteriSGIX = (PFNGLSPRITEPARAMETERISGIXPROC)glfwGetProcAddress("glSpriteParameteriSGIX");
  glSpriteParameterivSGIX = (PFNGLSPRITEPARAMETERIVSGIXPROC)glfwGetProcAddress("glSpriteParameterivSGIX");
  glPointParameterfEXT = (PFNGLPOINTPARAMETERFEXTPROC)glfwGetProcAddress("glPointParameterfEXT");
  glPointParameterfvEXT = (PFNGLPOINTPARAMETERFVEXTPROC)glfwGetProcAddress("glPointParameterfvEXT");
  glPointParameterfSGIS = (PFNGLPOINTPARAMETERFSGISPROC)glfwGetProcAddress("glPointParameterfSGIS");
  glPointParameterfvSGIS = (PFNGLPOINTPARAMETERFVSGISPROC)glfwGetProcAddress("glPointParameterfvSGIS");
  glGetInstrumentsSGIX = (PFNGLGETINSTRUMENTSSGIXPROC)glfwGetProcAddress("glGetInstrumentsSGIX");
  glInstrumentsBufferSGIX = (PFNGLINSTRUMENTSBUFFERSGIXPROC)glfwGetProcAddress("glInstrumentsBufferSGIX");
  glPollInstrumentsSGIX = (PFNGLPOLLINSTRUMENTSSGIXPROC)glfwGetProcAddress("glPollInstrumentsSGIX");
  glReadInstrumentsSGIX = (PFNGLREADINSTRUMENTSSGIXPROC)glfwGetProcAddress("glReadInstrumentsSGIX");
  glStartInstrumentsSGIX = (PFNGLSTARTINSTRUMENTSSGIXPROC)glfwGetProcAddress("glStartInstrumentsSGIX");
  glStopInstrumentsSGIX = (PFNGLSTOPINSTRUMENTSSGIXPROC)glfwGetProcAddress("glStopInstrumentsSGIX");
  glFrameZoomSGIX = (PFNGLFRAMEZOOMSGIXPROC)glfwGetProcAddress("glFrameZoomSGIX");
  glTagSampleBufferSGIX = (PFNGLTAGSAMPLEBUFFERSGIXPROC)glfwGetProcAddress("glTagSampleBufferSGIX");
  glDeformationMap3dSGIX = (PFNGLDEFORMATIONMAP3DSGIXPROC)glfwGetProcAddress("glDeformationMap3dSGIX");
  glDeformationMap3fSGIX = (PFNGLDEFORMATIONMAP3FSGIXPROC)glfwGetProcAddress("glDeformationMap3fSGIX");
  glDeformSGIX = (PFNGLDEFORMSGIXPROC)glfwGetProcAddress("glDeformSGIX");
  glLoadIdentityDeformationMapSGIX = (PFNGLLOADIDENTITYDEFORMATIONMAPSGIXPROC)glfwGetProcAddress("glLoadIdentityDeformationMapSGIX");
  glReferencePlaneSGIX = (PFNGLREFERENCEPLANESGIXPROC)glfwGetProcAddress("glReferencePlaneSGIX");
  glFlushRasterSGIX = (PFNGLFLUSHRASTERSGIXPROC)glfwGetProcAddress("glFlushRasterSGIX");
  glFogFuncSGIS = (PFNGLFOGFUNCSGISPROC)glfwGetProcAddress("glFogFuncSGIS");
  glGetFogFuncSGIS = (PFNGLGETFOGFUNCSGISPROC)glfwGetProcAddress("glGetFogFuncSGIS");
  glImageTransformParameteriHP = (PFNGLIMAGETRANSFORMPARAMETERIHPPROC)glfwGetProcAddress("glImageTransformParameteriHP");
  glImageTransformParameterfHP = (PFNGLIMAGETRANSFORMPARAMETERFHPPROC)glfwGetProcAddress("glImageTransformParameterfHP");
  glImageTransformParameterivHP = (PFNGLIMAGETRANSFORMPARAMETERIVHPPROC)glfwGetProcAddress("glImageTransformParameterivHP");
  glImageTransformParameterfvHP = (PFNGLIMAGETRANSFORMPARAMETERFVHPPROC)glfwGetProcAddress("glImageTransformParameterfvHP");
  glGetImageTransformParameterivHP = (PFNGLGETIMAGETRANSFORMPARAMETERIVHPPROC)glfwGetProcAddress("glGetImageTransformParameterivHP");
  glGetImageTransformParameterfvHP = (PFNGLGETIMAGETRANSFORMPARAMETERFVHPPROC)glfwGetProcAddress("glGetImageTransformParameterfvHP");
  glColorSubTableEXT = (PFNGLCOLORSUBTABLEEXTPROC)glfwGetProcAddress("glColorSubTableEXT");
  glCopyColorSubTableEXT = (PFNGLCOPYCOLORSUBTABLEEXTPROC)glfwGetProcAddress("glCopyColorSubTableEXT");
  glHintPGI = (PFNGLHINTPGIPROC)glfwGetProcAddress("glHintPGI");
  glColorTableEXT = (PFNGLCOLORTABLEEXTPROC)glfwGetProcAddress("glColorTableEXT");
  glGetColorTableEXT = (PFNGLGETCOLORTABLEEXTPROC)glfwGetProcAddress("glGetColorTableEXT");
  glGetColorTableParameterivEXT = (PFNGLGETCOLORTABLEPARAMETERIVEXTPROC)glfwGetProcAddress("glGetColorTableParameterivEXT");
  glGetColorTableParameterfvEXT = (PFNGLGETCOLORTABLEPARAMETERFVEXTPROC)glfwGetProcAddress("glGetColorTableParameterfvEXT");
  glGetListParameterfvSGIX = (PFNGLGETLISTPARAMETERFVSGIXPROC)glfwGetProcAddress("glGetListParameterfvSGIX");
  glGetListParameterivSGIX = (PFNGLGETLISTPARAMETERIVSGIXPROC)glfwGetProcAddress("glGetListParameterivSGIX");
  glListParameterfSGIX = (PFNGLLISTPARAMETERFSGIXPROC)glfwGetProcAddress("glListParameterfSGIX");
  glListParameterfvSGIX = (PFNGLLISTPARAMETERFVSGIXPROC)glfwGetProcAddress("glListParameterfvSGIX");
  glListParameteriSGIX = (PFNGLLISTPARAMETERISGIXPROC)glfwGetProcAddress("glListParameteriSGIX");
  glListParameterivSGIX = (PFNGLLISTPARAMETERIVSGIXPROC)glfwGetProcAddress("glListParameterivSGIX");
  glIndexMaterialEXT = (PFNGLINDEXMATERIALEXTPROC)glfwGetProcAddress("glIndexMaterialEXT");
  glIndexFuncEXT = (PFNGLINDEXFUNCEXTPROC)glfwGetProcAddress("glIndexFuncEXT");
  glLockArraysEXT = (PFNGLLOCKARRAYSEXTPROC)glfwGetProcAddress("glLockArraysEXT");
  glUnlockArraysEXT = (PFNGLUNLOCKARRAYSEXTPROC)glfwGetProcAddress("glUnlockArraysEXT");
  glCullParameterdvEXT = (PFNGLCULLPARAMETERDVEXTPROC)glfwGetProcAddress("glCullParameterdvEXT");
  glCullParameterfvEXT = (PFNGLCULLPARAMETERFVEXTPROC)glfwGetProcAddress("glCullParameterfvEXT");
  glFragmentColorMaterialSGIX = (PFNGLFRAGMENTCOLORMATERIALSGIXPROC)glfwGetProcAddress("glFragmentColorMaterialSGIX");
  glFragmentLightfSGIX = (PFNGLFRAGMENTLIGHTFSGIXPROC)glfwGetProcAddress("glFragmentLightfSGIX");
  glFragmentLightfvSGIX = (PFNGLFRAGMENTLIGHTFVSGIXPROC)glfwGetProcAddress("glFragmentLightfvSGIX");
  glFragmentLightiSGIX = (PFNGLFRAGMENTLIGHTISGIXPROC)glfwGetProcAddress("glFragmentLightiSGIX");
  glFragmentLightivSGIX = (PFNGLFRAGMENTLIGHTIVSGIXPROC)glfwGetProcAddress("glFragmentLightivSGIX");
  glFragmentLightModelfSGIX = (PFNGLFRAGMENTLIGHTMODELFSGIXPROC)glfwGetProcAddress("glFragmentLightModelfSGIX");
  glFragmentLightModelfvSGIX = (PFNGLFRAGMENTLIGHTMODELFVSGIXPROC)glfwGetProcAddress("glFragmentLightModelfvSGIX");
  glFragmentLightModeliSGIX = (PFNGLFRAGMENTLIGHTMODELISGIXPROC)glfwGetProcAddress("glFragmentLightModeliSGIX");
  glFragmentLightModelivSGIX = (PFNGLFRAGMENTLIGHTMODELIVSGIXPROC)glfwGetProcAddress("glFragmentLightModelivSGIX");
  glFragmentMaterialfSGIX = (PFNGLFRAGMENTMATERIALFSGIXPROC)glfwGetProcAddress("glFragmentMaterialfSGIX");
  glFragmentMaterialfvSGIX = (PFNGLFRAGMENTMATERIALFVSGIXPROC)glfwGetProcAddress("glFragmentMaterialfvSGIX");
  glFragmentMaterialiSGIX = (PFNGLFRAGMENTMATERIALISGIXPROC)glfwGetProcAddress("glFragmentMaterialiSGIX");
  glFragmentMaterialivSGIX = (PFNGLFRAGMENTMATERIALIVSGIXPROC)glfwGetProcAddress("glFragmentMaterialivSGIX");
  glGetFragmentLightfvSGIX = (PFNGLGETFRAGMENTLIGHTFVSGIXPROC)glfwGetProcAddress("glGetFragmentLightfvSGIX");
  glGetFragmentLightivSGIX = (PFNGLGETFRAGMENTLIGHTIVSGIXPROC)glfwGetProcAddress("glGetFragmentLightivSGIX");
  glGetFragmentMaterialfvSGIX = (PFNGLGETFRAGMENTMATERIALFVSGIXPROC)glfwGetProcAddress("glGetFragmentMaterialfvSGIX");
  glGetFragmentMaterialivSGIX = (PFNGLGETFRAGMENTMATERIALIVSGIXPROC)glfwGetProcAddress("glGetFragmentMaterialivSGIX");
  glLightEnviSGIX = (PFNGLLIGHTENVISGIXPROC)glfwGetProcAddress("glLightEnviSGIX");
  glDrawRangeElementsEXT = (PFNGLDRAWRANGEELEMENTSEXTPROC)glfwGetProcAddress("glDrawRangeElementsEXT");
  glApplyTextureEXT = (PFNGLAPPLYTEXTUREEXTPROC)glfwGetProcAddress("glApplyTextureEXT");
  glTextureLightEXT = (PFNGLTEXTURELIGHTEXTPROC)glfwGetProcAddress("glTextureLightEXT");
  glTextureMaterialEXT = (PFNGLTEXTUREMATERIALEXTPROC)glfwGetProcAddress("glTextureMaterialEXT");
  glAsyncMarkerSGIX = (PFNGLASYNCMARKERSGIXPROC)glfwGetProcAddress("glAsyncMarkerSGIX");
  glFinishAsyncSGIX = (PFNGLFINISHASYNCSGIXPROC)glfwGetProcAddress("glFinishAsyncSGIX");
  glPollAsyncSGIX = (PFNGLPOLLASYNCSGIXPROC)glfwGetProcAddress("glPollAsyncSGIX");
  glGenAsyncMarkersSGIX = (PFNGLGENASYNCMARKERSSGIXPROC)glfwGetProcAddress("glGenAsyncMarkersSGIX");
  glDeleteAsyncMarkersSGIX = (PFNGLDELETEASYNCMARKERSSGIXPROC)glfwGetProcAddress("glDeleteAsyncMarkersSGIX");
  glIsAsyncMarkerSGIX = (PFNGLISASYNCMARKERSGIXPROC)glfwGetProcAddress("glIsAsyncMarkerSGIX");
  glVertexPointervINTEL = (PFNGLVERTEXPOINTERVINTELPROC)glfwGetProcAddress("glVertexPointervINTEL");
  glNormalPointervINTEL = (PFNGLNORMALPOINTERVINTELPROC)glfwGetProcAddress("glNormalPointervINTEL");
  glColorPointervINTEL = (PFNGLCOLORPOINTERVINTELPROC)glfwGetProcAddress("glColorPointervINTEL");
  glTexCoordPointervINTEL = (PFNGLTEXCOORDPOINTERVINTELPROC)glfwGetProcAddress("glTexCoordPointervINTEL");
  glPixelTransformParameteriEXT = (PFNGLPIXELTRANSFORMPARAMETERIEXTPROC)glfwGetProcAddress("glPixelTransformParameteriEXT");
  glPixelTransformParameterfEXT = (PFNGLPIXELTRANSFORMPARAMETERFEXTPROC)glfwGetProcAddress("glPixelTransformParameterfEXT");
  glPixelTransformParameterivEXT = (PFNGLPIXELTRANSFORMPARAMETERIVEXTPROC)glfwGetProcAddress("glPixelTransformParameterivEXT");
  glPixelTransformParameterfvEXT = (PFNGLPIXELTRANSFORMPARAMETERFVEXTPROC)glfwGetProcAddress("glPixelTransformParameterfvEXT");
  glGetPixelTransformParameterivEXT = (PFNGLGETPIXELTRANSFORMPARAMETERIVEXTPROC)glfwGetProcAddress("glGetPixelTransformParameterivEXT");
  glGetPixelTransformParameterfvEXT = (PFNGLGETPIXELTRANSFORMPARAMETERFVEXTPROC)glfwGetProcAddress("glGetPixelTransformParameterfvEXT");
  glSecondaryColor3bEXT = (PFNGLSECONDARYCOLOR3BEXTPROC)glfwGetProcAddress("glSecondaryColor3bEXT");
  glSecondaryColor3bvEXT = (PFNGLSECONDARYCOLOR3BVEXTPROC)glfwGetProcAddress("glSecondaryColor3bvEXT");
  glSecondaryColor3dEXT = (PFNGLSECONDARYCOLOR3DEXTPROC)glfwGetProcAddress("glSecondaryColor3dEXT");
  glSecondaryColor3dvEXT = (PFNGLSECONDARYCOLOR3DVEXTPROC)glfwGetProcAddress("glSecondaryColor3dvEXT");
  glSecondaryColor3fEXT = (PFNGLSECONDARYCOLOR3FEXTPROC)glfwGetProcAddress("glSecondaryColor3fEXT");
  glSecondaryColor3fvEXT = (PFNGLSECONDARYCOLOR3FVEXTPROC)glfwGetProcAddress("glSecondaryColor3fvEXT");
  glSecondaryColor3iEXT = (PFNGLSECONDARYCOLOR3IEXTPROC)glfwGetProcAddress("glSecondaryColor3iEXT");
  glSecondaryColor3ivEXT = (PFNGLSECONDARYCOLOR3IVEXTPROC)glfwGetProcAddress("glSecondaryColor3ivEXT");
  glSecondaryColor3sEXT = (PFNGLSECONDARYCOLOR3SEXTPROC)glfwGetProcAddress("glSecondaryColor3sEXT");
  glSecondaryColor3svEXT = (PFNGLSECONDARYCOLOR3SVEXTPROC)glfwGetProcAddress("glSecondaryColor3svEXT");
  glSecondaryColor3ubEXT = (PFNGLSECONDARYCOLOR3UBEXTPROC)glfwGetProcAddress("glSecondaryColor3ubEXT");
  glSecondaryColor3ubvEXT = (PFNGLSECONDARYCOLOR3UBVEXTPROC)glfwGetProcAddress("glSecondaryColor3ubvEXT");
  glSecondaryColor3uiEXT = (PFNGLSECONDARYCOLOR3UIEXTPROC)glfwGetProcAddress("glSecondaryColor3uiEXT");
  glSecondaryColor3uivEXT = (PFNGLSECONDARYCOLOR3UIVEXTPROC)glfwGetProcAddress("glSecondaryColor3uivEXT");
  glSecondaryColor3usEXT = (PFNGLSECONDARYCOLOR3USEXTPROC)glfwGetProcAddress("glSecondaryColor3usEXT");
  glSecondaryColor3usvEXT = (PFNGLSECONDARYCOLOR3USVEXTPROC)glfwGetProcAddress("glSecondaryColor3usvEXT");
  glSecondaryColorPointerEXT = (PFNGLSECONDARYCOLORPOINTEREXTPROC)glfwGetProcAddress("glSecondaryColorPointerEXT");
  glTextureNormalEXT = (PFNGLTEXTURENORMALEXTPROC)glfwGetProcAddress("glTextureNormalEXT");
  glMultiDrawArraysEXT = (PFNGLMULTIDRAWARRAYSEXTPROC)glfwGetProcAddress("glMultiDrawArraysEXT");
  glMultiDrawElementsEXT = (PFNGLMULTIDRAWELEMENTSEXTPROC)glfwGetProcAddress("glMultiDrawElementsEXT");
  glFogCoordfEXT = (PFNGLFOGCOORDFEXTPROC)glfwGetProcAddress("glFogCoordfEXT");
  glFogCoordfvEXT = (PFNGLFOGCOORDFVEXTPROC)glfwGetProcAddress("glFogCoordfvEXT");
  glFogCoorddEXT = (PFNGLFOGCOORDDEXTPROC)glfwGetProcAddress("glFogCoorddEXT");
  glFogCoorddvEXT = (PFNGLFOGCOORDDVEXTPROC)glfwGetProcAddress("glFogCoorddvEXT");
  glFogCoordPointerEXT = (PFNGLFOGCOORDPOINTEREXTPROC)glfwGetProcAddress("glFogCoordPointerEXT");
  glTangent3bEXT = (PFNGLTANGENT3BEXTPROC)glfwGetProcAddress("glTangent3bEXT");
  glTangent3bvEXT = (PFNGLTANGENT3BVEXTPROC)glfwGetProcAddress("glTangent3bvEXT");
  glTangent3dEXT = (PFNGLTANGENT3DEXTPROC)glfwGetProcAddress("glTangent3dEXT");
  glTangent3dvEXT = (PFNGLTANGENT3DVEXTPROC)glfwGetProcAddress("glTangent3dvEXT");
  glTangent3fEXT = (PFNGLTANGENT3FEXTPROC)glfwGetProcAddress("glTangent3fEXT");
  glTangent3fvEXT = (PFNGLTANGENT3FVEXTPROC)glfwGetProcAddress("glTangent3fvEXT");
  glTangent3iEXT = (PFNGLTANGENT3IEXTPROC)glfwGetProcAddress("glTangent3iEXT");
  glTangent3ivEXT = (PFNGLTANGENT3IVEXTPROC)glfwGetProcAddress("glTangent3ivEXT");
  glTangent3sEXT = (PFNGLTANGENT3SEXTPROC)glfwGetProcAddress("glTangent3sEXT");
  glTangent3svEXT = (PFNGLTANGENT3SVEXTPROC)glfwGetProcAddress("glTangent3svEXT");
  glBinormal3bEXT = (PFNGLBINORMAL3BEXTPROC)glfwGetProcAddress("glBinormal3bEXT");
  glBinormal3bvEXT = (PFNGLBINORMAL3BVEXTPROC)glfwGetProcAddress("glBinormal3bvEXT");
  glBinormal3dEXT = (PFNGLBINORMAL3DEXTPROC)glfwGetProcAddress("glBinormal3dEXT");
  glBinormal3dvEXT = (PFNGLBINORMAL3DVEXTPROC)glfwGetProcAddress("glBinormal3dvEXT");
  glBinormal3fEXT = (PFNGLBINORMAL3FEXTPROC)glfwGetProcAddress("glBinormal3fEXT");
  glBinormal3fvEXT = (PFNGLBINORMAL3FVEXTPROC)glfwGetProcAddress("glBinormal3fvEXT");
  glBinormal3iEXT = (PFNGLBINORMAL3IEXTPROC)glfwGetProcAddress("glBinormal3iEXT");
  glBinormal3ivEXT = (PFNGLBINORMAL3IVEXTPROC)glfwGetProcAddress("glBinormal3ivEXT");
  glBinormal3sEXT = (PFNGLBINORMAL3SEXTPROC)glfwGetProcAddress("glBinormal3sEXT");
  glBinormal3svEXT = (PFNGLBINORMAL3SVEXTPROC)glfwGetProcAddress("glBinormal3svEXT");
  glTangentPointerEXT = (PFNGLTANGENTPOINTEREXTPROC)glfwGetProcAddress("glTangentPointerEXT");
  glBinormalPointerEXT = (PFNGLBINORMALPOINTEREXTPROC)glfwGetProcAddress("glBinormalPointerEXT");
  glFinishTextureSUNX = (PFNGLFINISHTEXTURESUNXPROC)glfwGetProcAddress("glFinishTextureSUNX");
  glGlobalAlphaFactorbSUN = (PFNGLGLOBALALPHAFACTORBSUNPROC)glfwGetProcAddress("glGlobalAlphaFactorbSUN");
  glGlobalAlphaFactorsSUN = (PFNGLGLOBALALPHAFACTORSSUNPROC)glfwGetProcAddress("glGlobalAlphaFactorsSUN");
  glGlobalAlphaFactoriSUN = (PFNGLGLOBALALPHAFACTORISUNPROC)glfwGetProcAddress("glGlobalAlphaFactoriSUN");
  glGlobalAlphaFactorfSUN = (PFNGLGLOBALALPHAFACTORFSUNPROC)glfwGetProcAddress("glGlobalAlphaFactorfSUN");
  glGlobalAlphaFactordSUN = (PFNGLGLOBALALPHAFACTORDSUNPROC)glfwGetProcAddress("glGlobalAlphaFactordSUN");
  glGlobalAlphaFactorubSUN = (PFNGLGLOBALALPHAFACTORUBSUNPROC)glfwGetProcAddress("glGlobalAlphaFactorubSUN");
  glGlobalAlphaFactorusSUN = (PFNGLGLOBALALPHAFACTORUSSUNPROC)glfwGetProcAddress("glGlobalAlphaFactorusSUN");
  glGlobalAlphaFactoruiSUN = (PFNGLGLOBALALPHAFACTORUISUNPROC)glfwGetProcAddress("glGlobalAlphaFactoruiSUN");
  glReplacementCodeuiSUN = (PFNGLREPLACEMENTCODEUISUNPROC)glfwGetProcAddress("glReplacementCodeuiSUN");
  glReplacementCodeusSUN = (PFNGLREPLACEMENTCODEUSSUNPROC)glfwGetProcAddress("glReplacementCodeusSUN");
  glReplacementCodeubSUN = (PFNGLREPLACEMENTCODEUBSUNPROC)glfwGetProcAddress("glReplacementCodeubSUN");
  glReplacementCodeuivSUN = (PFNGLREPLACEMENTCODEUIVSUNPROC)glfwGetProcAddress("glReplacementCodeuivSUN");
  glReplacementCodeusvSUN = (PFNGLREPLACEMENTCODEUSVSUNPROC)glfwGetProcAddress("glReplacementCodeusvSUN");
  glReplacementCodeubvSUN = (PFNGLREPLACEMENTCODEUBVSUNPROC)glfwGetProcAddress("glReplacementCodeubvSUN");
  glReplacementCodePointerSUN = (PFNGLREPLACEMENTCODEPOINTERSUNPROC)glfwGetProcAddress("glReplacementCodePointerSUN");
  glColor4ubVertex2fSUN = (PFNGLCOLOR4UBVERTEX2FSUNPROC)glfwGetProcAddress("glColor4ubVertex2fSUN");
  glColor4ubVertex2fvSUN = (PFNGLCOLOR4UBVERTEX2FVSUNPROC)glfwGetProcAddress("glColor4ubVertex2fvSUN");
  glColor4ubVertex3fSUN = (PFNGLCOLOR4UBVERTEX3FSUNPROC)glfwGetProcAddress("glColor4ubVertex3fSUN");
  glColor4ubVertex3fvSUN = (PFNGLCOLOR4UBVERTEX3FVSUNPROC)glfwGetProcAddress("glColor4ubVertex3fvSUN");
  glColor3fVertex3fSUN = (PFNGLCOLOR3FVERTEX3FSUNPROC)glfwGetProcAddress("glColor3fVertex3fSUN");
  glColor3fVertex3fvSUN = (PFNGLCOLOR3FVERTEX3FVSUNPROC)glfwGetProcAddress("glColor3fVertex3fvSUN");
  glNormal3fVertex3fSUN = (PFNGLNORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glNormal3fVertex3fSUN");
  glNormal3fVertex3fvSUN = (PFNGLNORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glNormal3fVertex3fvSUN");
  glColor4fNormal3fVertex3fSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glColor4fNormal3fVertex3fSUN");
  glColor4fNormal3fVertex3fvSUN = (PFNGLCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glColor4fNormal3fVertex3fvSUN");
  glTexCoord2fVertex3fSUN = (PFNGLTEXCOORD2FVERTEX3FSUNPROC)glfwGetProcAddress("glTexCoord2fVertex3fSUN");
  glTexCoord2fVertex3fvSUN = (PFNGLTEXCOORD2FVERTEX3FVSUNPROC)glfwGetProcAddress("glTexCoord2fVertex3fvSUN");
  glTexCoord4fVertex4fSUN = (PFNGLTEXCOORD4FVERTEX4FSUNPROC)glfwGetProcAddress("glTexCoord4fVertex4fSUN");
  glTexCoord4fVertex4fvSUN = (PFNGLTEXCOORD4FVERTEX4FVSUNPROC)glfwGetProcAddress("glTexCoord4fVertex4fvSUN");
  glTexCoord2fColor4ubVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FSUNPROC)glfwGetProcAddress("glTexCoord2fColor4ubVertex3fSUN");
  glTexCoord2fColor4ubVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4UBVERTEX3FVSUNPROC)glfwGetProcAddress("glTexCoord2fColor4ubVertex3fvSUN");
  glTexCoord2fColor3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FSUNPROC)glfwGetProcAddress("glTexCoord2fColor3fVertex3fSUN");
  glTexCoord2fColor3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR3FVERTEX3FVSUNPROC)glfwGetProcAddress("glTexCoord2fColor3fVertex3fvSUN");
  glTexCoord2fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glTexCoord2fNormal3fVertex3fSUN");
  glTexCoord2fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glTexCoord2fNormal3fVertex3fvSUN");
  glTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fSUN");
  glTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLTEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glTexCoord2fColor4fNormal3fVertex3fvSUN");
  glTexCoord4fColor4fNormal3fVertex4fSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FSUNPROC)glfwGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fSUN");
  glTexCoord4fColor4fNormal3fVertex4fvSUN = (PFNGLTEXCOORD4FCOLOR4FNORMAL3FVERTEX4FVSUNPROC)glfwGetProcAddress("glTexCoord4fColor4fNormal3fVertex4fvSUN");
  glReplacementCodeuiVertex3fSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiVertex3fSUN");
  glReplacementCodeuiVertex3fvSUN = (PFNGLREPLACEMENTCODEUIVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiVertex3fvSUN");
  glReplacementCodeuiColor4ubVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiColor4ubVertex3fSUN");
  glReplacementCodeuiColor4ubVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4UBVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiColor4ubVertex3fvSUN");
  glReplacementCodeuiColor3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiColor3fVertex3fSUN");
  glReplacementCodeuiColor3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR3FVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiColor3fVertex3fvSUN");
  glReplacementCodeuiNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiNormal3fVertex3fSUN");
  glReplacementCodeuiNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUINORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiNormal3fVertex3fvSUN");
  glReplacementCodeuiColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fSUN");
  glReplacementCodeuiColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUICOLOR4FNORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiColor4fNormal3fVertex3fvSUN");
  glReplacementCodeuiTexCoord2fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fSUN");
  glReplacementCodeuiTexCoord2fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiTexCoord2fVertex3fvSUN");
  glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fSUN");
  glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FNORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiTexCoord2fNormal3fVertex3fvSUN");
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FSUNPROC)glfwGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fSUN");
  glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN = (PFNGLREPLACEMENTCODEUITEXCOORD2FCOLOR4FNORMAL3FVERTEX3FVSUNPROC)glfwGetProcAddress("glReplacementCodeuiTexCoord2fColor4fNormal3fVertex3fvSUN");
  glBlendFuncSeparateEXT = (PFNGLBLENDFUNCSEPARATEEXTPROC)glfwGetProcAddress("glBlendFuncSeparateEXT");
  glBlendFuncSeparateINGR = (PFNGLBLENDFUNCSEPARATEINGRPROC)glfwGetProcAddress("glBlendFuncSeparateINGR");
  glVertexWeightfEXT = (PFNGLVERTEXWEIGHTFEXTPROC)glfwGetProcAddress("glVertexWeightfEXT");
  glVertexWeightfvEXT = (PFNGLVERTEXWEIGHTFVEXTPROC)glfwGetProcAddress("glVertexWeightfvEXT");
  glVertexWeightPointerEXT = (PFNGLVERTEXWEIGHTPOINTEREXTPROC)glfwGetProcAddress("glVertexWeightPointerEXT");
  glFlushVertexArrayRangeNV = (PFNGLFLUSHVERTEXARRAYRANGENVPROC)glfwGetProcAddress("glFlushVertexArrayRangeNV");
  glVertexArrayRangeNV = (PFNGLVERTEXARRAYRANGENVPROC)glfwGetProcAddress("glVertexArrayRangeNV");
  glCombinerParameterfvNV = (PFNGLCOMBINERPARAMETERFVNVPROC)glfwGetProcAddress("glCombinerParameterfvNV");
  glCombinerParameterfNV = (PFNGLCOMBINERPARAMETERFNVPROC)glfwGetProcAddress("glCombinerParameterfNV");
  glCombinerParameterivNV = (PFNGLCOMBINERPARAMETERIVNVPROC)glfwGetProcAddress("glCombinerParameterivNV");
  glCombinerParameteriNV = (PFNGLCOMBINERPARAMETERINVPROC)glfwGetProcAddress("glCombinerParameteriNV");
  glCombinerInputNV = (PFNGLCOMBINERINPUTNVPROC)glfwGetProcAddress("glCombinerInputNV");
  glCombinerOutputNV = (PFNGLCOMBINEROUTPUTNVPROC)glfwGetProcAddress("glCombinerOutputNV");
  glFinalCombinerInputNV = (PFNGLFINALCOMBINERINPUTNVPROC)glfwGetProcAddress("glFinalCombinerInputNV");
  glGetCombinerInputParameterfvNV = (PFNGLGETCOMBINERINPUTPARAMETERFVNVPROC)glfwGetProcAddress("glGetCombinerInputParameterfvNV");
  glGetCombinerInputParameterivNV = (PFNGLGETCOMBINERINPUTPARAMETERIVNVPROC)glfwGetProcAddress("glGetCombinerInputParameterivNV");
  glGetCombinerOutputParameterfvNV = (PFNGLGETCOMBINEROUTPUTPARAMETERFVNVPROC)glfwGetProcAddress("glGetCombinerOutputParameterfvNV");
  glGetCombinerOutputParameterivNV = (PFNGLGETCOMBINEROUTPUTPARAMETERIVNVPROC)glfwGetProcAddress("glGetCombinerOutputParameterivNV");
  glGetFinalCombinerInputParameterfvNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERFVNVPROC)glfwGetProcAddress("glGetFinalCombinerInputParameterfvNV");
  glGetFinalCombinerInputParameterivNV = (PFNGLGETFINALCOMBINERINPUTPARAMETERIVNVPROC)glfwGetProcAddress("glGetFinalCombinerInputParameterivNV");
  glResizeBuffersMESA = (PFNGLRESIZEBUFFERSMESAPROC)glfwGetProcAddress("glResizeBuffersMESA");
  glWindowPos2dMESA = (PFNGLWINDOWPOS2DMESAPROC)glfwGetProcAddress("glWindowPos2dMESA");
  glWindowPos2dvMESA = (PFNGLWINDOWPOS2DVMESAPROC)glfwGetProcAddress("glWindowPos2dvMESA");
  glWindowPos2fMESA = (PFNGLWINDOWPOS2FMESAPROC)glfwGetProcAddress("glWindowPos2fMESA");
  glWindowPos2fvMESA = (PFNGLWINDOWPOS2FVMESAPROC)glfwGetProcAddress("glWindowPos2fvMESA");
  glWindowPos2iMESA = (PFNGLWINDOWPOS2IMESAPROC)glfwGetProcAddress("glWindowPos2iMESA");
  glWindowPos2ivMESA = (PFNGLWINDOWPOS2IVMESAPROC)glfwGetProcAddress("glWindowPos2ivMESA");
  glWindowPos2sMESA = (PFNGLWINDOWPOS2SMESAPROC)glfwGetProcAddress("glWindowPos2sMESA");
  glWindowPos2svMESA = (PFNGLWINDOWPOS2SVMESAPROC)glfwGetProcAddress("glWindowPos2svMESA");
  glWindowPos3dMESA = (PFNGLWINDOWPOS3DMESAPROC)glfwGetProcAddress("glWindowPos3dMESA");
  glWindowPos3dvMESA = (PFNGLWINDOWPOS3DVMESAPROC)glfwGetProcAddress("glWindowPos3dvMESA");
  glWindowPos3fMESA = (PFNGLWINDOWPOS3FMESAPROC)glfwGetProcAddress("glWindowPos3fMESA");
  glWindowPos3fvMESA = (PFNGLWINDOWPOS3FVMESAPROC)glfwGetProcAddress("glWindowPos3fvMESA");
  glWindowPos3iMESA = (PFNGLWINDOWPOS3IMESAPROC)glfwGetProcAddress("glWindowPos3iMESA");
  glWindowPos3ivMESA = (PFNGLWINDOWPOS3IVMESAPROC)glfwGetProcAddress("glWindowPos3ivMESA");
  glWindowPos3sMESA = (PFNGLWINDOWPOS3SMESAPROC)glfwGetProcAddress("glWindowPos3sMESA");
  glWindowPos3svMESA = (PFNGLWINDOWPOS3SVMESAPROC)glfwGetProcAddress("glWindowPos3svMESA");
  glWindowPos4dMESA = (PFNGLWINDOWPOS4DMESAPROC)glfwGetProcAddress("glWindowPos4dMESA");
  glWindowPos4dvMESA = (PFNGLWINDOWPOS4DVMESAPROC)glfwGetProcAddress("glWindowPos4dvMESA");
  glWindowPos4fMESA = (PFNGLWINDOWPOS4FMESAPROC)glfwGetProcAddress("glWindowPos4fMESA");
  glWindowPos4fvMESA = (PFNGLWINDOWPOS4FVMESAPROC)glfwGetProcAddress("glWindowPos4fvMESA");
  glWindowPos4iMESA = (PFNGLWINDOWPOS4IMESAPROC)glfwGetProcAddress("glWindowPos4iMESA");
  glWindowPos4ivMESA = (PFNGLWINDOWPOS4IVMESAPROC)glfwGetProcAddress("glWindowPos4ivMESA");
  glWindowPos4sMESA = (PFNGLWINDOWPOS4SMESAPROC)glfwGetProcAddress("glWindowPos4sMESA");
  glWindowPos4svMESA = (PFNGLWINDOWPOS4SVMESAPROC)glfwGetProcAddress("glWindowPos4svMESA");
  glMultiModeDrawArraysIBM = (PFNGLMULTIMODEDRAWARRAYSIBMPROC)glfwGetProcAddress("glMultiModeDrawArraysIBM");
  glMultiModeDrawElementsIBM = (PFNGLMULTIMODEDRAWELEMENTSIBMPROC)glfwGetProcAddress("glMultiModeDrawElementsIBM");
  glColorPointerListIBM = (PFNGLCOLORPOINTERLISTIBMPROC)glfwGetProcAddress("glColorPointerListIBM");
  glSecondaryColorPointerListIBM = (PFNGLSECONDARYCOLORPOINTERLISTIBMPROC)glfwGetProcAddress("glSecondaryColorPointerListIBM");
  glEdgeFlagPointerListIBM = (PFNGLEDGEFLAGPOINTERLISTIBMPROC)glfwGetProcAddress("glEdgeFlagPointerListIBM");
  glFogCoordPointerListIBM = (PFNGLFOGCOORDPOINTERLISTIBMPROC)glfwGetProcAddress("glFogCoordPointerListIBM");
  glIndexPointerListIBM = (PFNGLINDEXPOINTERLISTIBMPROC)glfwGetProcAddress("glIndexPointerListIBM");
  glNormalPointerListIBM = (PFNGLNORMALPOINTERLISTIBMPROC)glfwGetProcAddress("glNormalPointerListIBM");
  glTexCoordPointerListIBM = (PFNGLTEXCOORDPOINTERLISTIBMPROC)glfwGetProcAddress("glTexCoordPointerListIBM");
  glVertexPointerListIBM = (PFNGLVERTEXPOINTERLISTIBMPROC)glfwGetProcAddress("glVertexPointerListIBM");
  glTbufferMask3DFX = (PFNGLTBUFFERMASK3DFXPROC)glfwGetProcAddress("glTbufferMask3DFX");
  glSampleMaskEXT = (PFNGLSAMPLEMASKEXTPROC)glfwGetProcAddress("glSampleMaskEXT");
  glSamplePatternEXT = (PFNGLSAMPLEPATTERNEXTPROC)glfwGetProcAddress("glSamplePatternEXT");
  glTextureColorMaskSGIS = (PFNGLTEXTURECOLORMASKSGISPROC)glfwGetProcAddress("glTextureColorMaskSGIS");
  glIglooInterfaceSGIX = (PFNGLIGLOOINTERFACESGIXPROC)glfwGetProcAddress("glIglooInterfaceSGIX");
  glDeleteFencesNV = (PFNGLDELETEFENCESNVPROC)glfwGetProcAddress("glDeleteFencesNV");
  glGenFencesNV = (PFNGLGENFENCESNVPROC)glfwGetProcAddress("glGenFencesNV");
  glIsFenceNV = (PFNGLISFENCENVPROC)glfwGetProcAddress("glIsFenceNV");
  glTestFenceNV = (PFNGLTESTFENCENVPROC)glfwGetProcAddress("glTestFenceNV");
  glGetFenceivNV = (PFNGLGETFENCEIVNVPROC)glfwGetProcAddress("glGetFenceivNV");
  glFinishFenceNV = (PFNGLFINISHFENCENVPROC)glfwGetProcAddress("glFinishFenceNV");
  glSetFenceNV = (PFNGLSETFENCENVPROC)glfwGetProcAddress("glSetFenceNV");
  glFlushStaticDataIBM = (PFNGLFLUSHSTATICDATAIBMPROC)glfwGetProcAddress("glFlushStaticDataIBM");
  glMapControlPointsNV = (PFNGLMAPCONTROLPOINTSNVPROC)glfwGetProcAddress("glMapControlPointsNV");
  glMapParameterivNV = (PFNGLMAPPARAMETERIVNVPROC)glfwGetProcAddress("glMapParameterivNV");
  glMapParameterfvNV = (PFNGLMAPPARAMETERFVNVPROC)glfwGetProcAddress("glMapParameterfvNV");
  glGetMapControlPointsNV = (PFNGLGETMAPCONTROLPOINTSNVPROC)glfwGetProcAddress("glGetMapControlPointsNV");
  glGetMapParameterivNV = (PFNGLGETMAPPARAMETERIVNVPROC)glfwGetProcAddress("glGetMapParameterivNV");
  glGetMapParameterfvNV = (PFNGLGETMAPPARAMETERFVNVPROC)glfwGetProcAddress("glGetMapParameterfvNV");
  glGetMapAttribParameterivNV = (PFNGLGETMAPATTRIBPARAMETERIVNVPROC)glfwGetProcAddress("glGetMapAttribParameterivNV");
  glGetMapAttribParameterfvNV = (PFNGLGETMAPATTRIBPARAMETERFVNVPROC)glfwGetProcAddress("glGetMapAttribParameterfvNV");
  glEvalMapsNV = (PFNGLEVALMAPSNVPROC)glfwGetProcAddress("glEvalMapsNV");
  glCombinerStageParameterfvNV = (PFNGLCOMBINERSTAGEPARAMETERFVNVPROC)glfwGetProcAddress("glCombinerStageParameterfvNV");
  glGetCombinerStageParameterfvNV = (PFNGLGETCOMBINERSTAGEPARAMETERFVNVPROC)glfwGetProcAddress("glGetCombinerStageParameterfvNV");
  glAreProgramsResidentNV = (PFNGLAREPROGRAMSRESIDENTNVPROC)glfwGetProcAddress("glAreProgramsResidentNV");
  glBindProgramNV = (PFNGLBINDPROGRAMNVPROC)glfwGetProcAddress("glBindProgramNV");
  glDeleteProgramsNV = (PFNGLDELETEPROGRAMSNVPROC)glfwGetProcAddress("glDeleteProgramsNV");
  glExecuteProgramNV = (PFNGLEXECUTEPROGRAMNVPROC)glfwGetProcAddress("glExecuteProgramNV");
  glGenProgramsNV = (PFNGLGENPROGRAMSNVPROC)glfwGetProcAddress("glGenProgramsNV");
  glGetProgramParameterdvNV = (PFNGLGETPROGRAMPARAMETERDVNVPROC)glfwGetProcAddress("glGetProgramParameterdvNV");
  glGetProgramParameterfvNV = (PFNGLGETPROGRAMPARAMETERFVNVPROC)glfwGetProcAddress("glGetProgramParameterfvNV");
  glGetProgramivNV = (PFNGLGETPROGRAMIVNVPROC)glfwGetProcAddress("glGetProgramivNV");
  glGetProgramStringNV = (PFNGLGETPROGRAMSTRINGNVPROC)glfwGetProcAddress("glGetProgramStringNV");
  glGetTrackMatrixivNV = (PFNGLGETTRACKMATRIXIVNVPROC)glfwGetProcAddress("glGetTrackMatrixivNV");
  glGetVertexAttribdvNV = (PFNGLGETVERTEXATTRIBDVNVPROC)glfwGetProcAddress("glGetVertexAttribdvNV");
  glGetVertexAttribfvNV = (PFNGLGETVERTEXATTRIBFVNVPROC)glfwGetProcAddress("glGetVertexAttribfvNV");
  glGetVertexAttribivNV = (PFNGLGETVERTEXATTRIBIVNVPROC)glfwGetProcAddress("glGetVertexAttribivNV");
  glGetVertexAttribPointervNV = (PFNGLGETVERTEXATTRIBPOINTERVNVPROC)glfwGetProcAddress("glGetVertexAttribPointervNV");
  glIsProgramNV = (PFNGLISPROGRAMNVPROC)glfwGetProcAddress("glIsProgramNV");
  glLoadProgramNV = (PFNGLLOADPROGRAMNVPROC)glfwGetProcAddress("glLoadProgramNV");
  glProgramParameter4dNV = (PFNGLPROGRAMPARAMETER4DNVPROC)glfwGetProcAddress("glProgramParameter4dNV");
  glProgramParameter4dvNV = (PFNGLPROGRAMPARAMETER4DVNVPROC)glfwGetProcAddress("glProgramParameter4dvNV");
  glProgramParameter4fNV = (PFNGLPROGRAMPARAMETER4FNVPROC)glfwGetProcAddress("glProgramParameter4fNV");
  glProgramParameter4fvNV = (PFNGLPROGRAMPARAMETER4FVNVPROC)glfwGetProcAddress("glProgramParameter4fvNV");
  glProgramParameters4dvNV = (PFNGLPROGRAMPARAMETERS4DVNVPROC)glfwGetProcAddress("glProgramParameters4dvNV");
  glProgramParameters4fvNV = (PFNGLPROGRAMPARAMETERS4FVNVPROC)glfwGetProcAddress("glProgramParameters4fvNV");
  glRequestResidentProgramsNV = (PFNGLREQUESTRESIDENTPROGRAMSNVPROC)glfwGetProcAddress("glRequestResidentProgramsNV");
  glTrackMatrixNV = (PFNGLTRACKMATRIXNVPROC)glfwGetProcAddress("glTrackMatrixNV");
  glVertexAttribPointerNV = (PFNGLVERTEXATTRIBPOINTERNVPROC)glfwGetProcAddress("glVertexAttribPointerNV");
  glVertexAttrib1dNV = (PFNGLVERTEXATTRIB1DNVPROC)glfwGetProcAddress("glVertexAttrib1dNV");
  glVertexAttrib1dvNV = (PFNGLVERTEXATTRIB1DVNVPROC)glfwGetProcAddress("glVertexAttrib1dvNV");
  glVertexAttrib1fNV = (PFNGLVERTEXATTRIB1FNVPROC)glfwGetProcAddress("glVertexAttrib1fNV");
  glVertexAttrib1fvNV = (PFNGLVERTEXATTRIB1FVNVPROC)glfwGetProcAddress("glVertexAttrib1fvNV");
  glVertexAttrib1sNV = (PFNGLVERTEXATTRIB1SNVPROC)glfwGetProcAddress("glVertexAttrib1sNV");
  glVertexAttrib1svNV = (PFNGLVERTEXATTRIB1SVNVPROC)glfwGetProcAddress("glVertexAttrib1svNV");
  glVertexAttrib2dNV = (PFNGLVERTEXATTRIB2DNVPROC)glfwGetProcAddress("glVertexAttrib2dNV");
  glVertexAttrib2dvNV = (PFNGLVERTEXATTRIB2DVNVPROC)glfwGetProcAddress("glVertexAttrib2dvNV");
  glVertexAttrib2fNV = (PFNGLVERTEXATTRIB2FNVPROC)glfwGetProcAddress("glVertexAttrib2fNV");
  glVertexAttrib2fvNV = (PFNGLVERTEXATTRIB2FVNVPROC)glfwGetProcAddress("glVertexAttrib2fvNV");
  glVertexAttrib2sNV = (PFNGLVERTEXATTRIB2SNVPROC)glfwGetProcAddress("glVertexAttrib2sNV");
  glVertexAttrib2svNV = (PFNGLVERTEXATTRIB2SVNVPROC)glfwGetProcAddress("glVertexAttrib2svNV");
  glVertexAttrib3dNV = (PFNGLVERTEXATTRIB3DNVPROC)glfwGetProcAddress("glVertexAttrib3dNV");
  glVertexAttrib3dvNV = (PFNGLVERTEXATTRIB3DVNVPROC)glfwGetProcAddress("glVertexAttrib3dvNV");
  glVertexAttrib3fNV = (PFNGLVERTEXATTRIB3FNVPROC)glfwGetProcAddress("glVertexAttrib3fNV");
  glVertexAttrib3fvNV = (PFNGLVERTEXATTRIB3FVNVPROC)glfwGetProcAddress("glVertexAttrib3fvNV");
  glVertexAttrib3sNV = (PFNGLVERTEXATTRIB3SNVPROC)glfwGetProcAddress("glVertexAttrib3sNV");
  glVertexAttrib3svNV = (PFNGLVERTEXATTRIB3SVNVPROC)glfwGetProcAddress("glVertexAttrib3svNV");
  glVertexAttrib4dNV = (PFNGLVERTEXATTRIB4DNVPROC)glfwGetProcAddress("glVertexAttrib4dNV");
  glVertexAttrib4dvNV = (PFNGLVERTEXATTRIB4DVNVPROC)glfwGetProcAddress("glVertexAttrib4dvNV");
  glVertexAttrib4fNV = (PFNGLVERTEXATTRIB4FNVPROC)glfwGetProcAddress("glVertexAttrib4fNV");
  glVertexAttrib4fvNV = (PFNGLVERTEXATTRIB4FVNVPROC)glfwGetProcAddress("glVertexAttrib4fvNV");
  glVertexAttrib4sNV = (PFNGLVERTEXATTRIB4SNVPROC)glfwGetProcAddress("glVertexAttrib4sNV");
  glVertexAttrib4svNV = (PFNGLVERTEXATTRIB4SVNVPROC)glfwGetProcAddress("glVertexAttrib4svNV");
  glVertexAttrib4ubNV = (PFNGLVERTEXATTRIB4UBNVPROC)glfwGetProcAddress("glVertexAttrib4ubNV");
  glVertexAttrib4ubvNV = (PFNGLVERTEXATTRIB4UBVNVPROC)glfwGetProcAddress("glVertexAttrib4ubvNV");
  glVertexAttribs1dvNV = (PFNGLVERTEXATTRIBS1DVNVPROC)glfwGetProcAddress("glVertexAttribs1dvNV");
  glVertexAttribs1fvNV = (PFNGLVERTEXATTRIBS1FVNVPROC)glfwGetProcAddress("glVertexAttribs1fvNV");
  glVertexAttribs1svNV = (PFNGLVERTEXATTRIBS1SVNVPROC)glfwGetProcAddress("glVertexAttribs1svNV");
  glVertexAttribs2dvNV = (PFNGLVERTEXATTRIBS2DVNVPROC)glfwGetProcAddress("glVertexAttribs2dvNV");
  glVertexAttribs2fvNV = (PFNGLVERTEXATTRIBS2FVNVPROC)glfwGetProcAddress("glVertexAttribs2fvNV");
  glVertexAttribs2svNV = (PFNGLVERTEXATTRIBS2SVNVPROC)glfwGetProcAddress("glVertexAttribs2svNV");
  glVertexAttribs3dvNV = (PFNGLVERTEXATTRIBS3DVNVPROC)glfwGetProcAddress("glVertexAttribs3dvNV");
  glVertexAttribs3fvNV = (PFNGLVERTEXATTRIBS3FVNVPROC)glfwGetProcAddress("glVertexAttribs3fvNV");
  glVertexAttribs3svNV = (PFNGLVERTEXATTRIBS3SVNVPROC)glfwGetProcAddress("glVertexAttribs3svNV");
  glVertexAttribs4dvNV = (PFNGLVERTEXATTRIBS4DVNVPROC)glfwGetProcAddress("glVertexAttribs4dvNV");
  glVertexAttribs4fvNV = (PFNGLVERTEXATTRIBS4FVNVPROC)glfwGetProcAddress("glVertexAttribs4fvNV");
  glVertexAttribs4svNV = (PFNGLVERTEXATTRIBS4SVNVPROC)glfwGetProcAddress("glVertexAttribs4svNV");
  glVertexAttribs4ubvNV = (PFNGLVERTEXATTRIBS4UBVNVPROC)glfwGetProcAddress("glVertexAttribs4ubvNV");
  glTexBumpParameterivATI = (PFNGLTEXBUMPPARAMETERIVATIPROC)glfwGetProcAddress("glTexBumpParameterivATI");
  glTexBumpParameterfvATI = (PFNGLTEXBUMPPARAMETERFVATIPROC)glfwGetProcAddress("glTexBumpParameterfvATI");
  glGetTexBumpParameterivATI = (PFNGLGETTEXBUMPPARAMETERIVATIPROC)glfwGetProcAddress("glGetTexBumpParameterivATI");
  glGetTexBumpParameterfvATI = (PFNGLGETTEXBUMPPARAMETERFVATIPROC)glfwGetProcAddress("glGetTexBumpParameterfvATI");
  glGenFragmentShadersATI = (PFNGLGENFRAGMENTSHADERSATIPROC)glfwGetProcAddress("glGenFragmentShadersATI");
  glBindFragmentShaderATI = (PFNGLBINDFRAGMENTSHADERATIPROC)glfwGetProcAddress("glBindFragmentShaderATI");
  glDeleteFragmentShaderATI = (PFNGLDELETEFRAGMENTSHADERATIPROC)glfwGetProcAddress("glDeleteFragmentShaderATI");
  glBeginFragmentShaderATI = (PFNGLBEGINFRAGMENTSHADERATIPROC)glfwGetProcAddress("glBeginFragmentShaderATI");
  glEndFragmentShaderATI = (PFNGLENDFRAGMENTSHADERATIPROC)glfwGetProcAddress("glEndFragmentShaderATI");
  glPassTexCoordATI = (PFNGLPASSTEXCOORDATIPROC)glfwGetProcAddress("glPassTexCoordATI");
  glSampleMapATI = (PFNGLSAMPLEMAPATIPROC)glfwGetProcAddress("glSampleMapATI");
  glColorFragmentOp1ATI = (PFNGLCOLORFRAGMENTOP1ATIPROC)glfwGetProcAddress("glColorFragmentOp1ATI");
  glColorFragmentOp2ATI = (PFNGLCOLORFRAGMENTOP2ATIPROC)glfwGetProcAddress("glColorFragmentOp2ATI");
  glColorFragmentOp3ATI = (PFNGLCOLORFRAGMENTOP3ATIPROC)glfwGetProcAddress("glColorFragmentOp3ATI");
  glAlphaFragmentOp1ATI = (PFNGLALPHAFRAGMENTOP1ATIPROC)glfwGetProcAddress("glAlphaFragmentOp1ATI");
  glAlphaFragmentOp2ATI = (PFNGLALPHAFRAGMENTOP2ATIPROC)glfwGetProcAddress("glAlphaFragmentOp2ATI");
  glAlphaFragmentOp3ATI = (PFNGLALPHAFRAGMENTOP3ATIPROC)glfwGetProcAddress("glAlphaFragmentOp3ATI");
  glSetFragmentShaderConstantATI = (PFNGLSETFRAGMENTSHADERCONSTANTATIPROC)glfwGetProcAddress("glSetFragmentShaderConstantATI");
  glPNTrianglesiATI = (PFNGLPNTRIANGLESIATIPROC)glfwGetProcAddress("glPNTrianglesiATI");
  glPNTrianglesfATI = (PFNGLPNTRIANGLESFATIPROC)glfwGetProcAddress("glPNTrianglesfATI");
  glNewObjectBufferATI = (PFNGLNEWOBJECTBUFFERATIPROC)glfwGetProcAddress("glNewObjectBufferATI");
  glIsObjectBufferATI = (PFNGLISOBJECTBUFFERATIPROC)glfwGetProcAddress("glIsObjectBufferATI");
  glUpdateObjectBufferATI = (PFNGLUPDATEOBJECTBUFFERATIPROC)glfwGetProcAddress("glUpdateObjectBufferATI");
  glGetObjectBufferfvATI = (PFNGLGETOBJECTBUFFERFVATIPROC)glfwGetProcAddress("glGetObjectBufferfvATI");
  glGetObjectBufferivATI = (PFNGLGETOBJECTBUFFERIVATIPROC)glfwGetProcAddress("glGetObjectBufferivATI");
  glFreeObjectBufferATI = (PFNGLFREEOBJECTBUFFERATIPROC)glfwGetProcAddress("glFreeObjectBufferATI");
  glArrayObjectATI = (PFNGLARRAYOBJECTATIPROC)glfwGetProcAddress("glArrayObjectATI");
  glGetArrayObjectfvATI = (PFNGLGETARRAYOBJECTFVATIPROC)glfwGetProcAddress("glGetArrayObjectfvATI");
  glGetArrayObjectivATI = (PFNGLGETARRAYOBJECTIVATIPROC)glfwGetProcAddress("glGetArrayObjectivATI");
  glVariantArrayObjectATI = (PFNGLVARIANTARRAYOBJECTATIPROC)glfwGetProcAddress("glVariantArrayObjectATI");
  glGetVariantArrayObjectfvATI = (PFNGLGETVARIANTARRAYOBJECTFVATIPROC)glfwGetProcAddress("glGetVariantArrayObjectfvATI");
  glGetVariantArrayObjectivATI = (PFNGLGETVARIANTARRAYOBJECTIVATIPROC)glfwGetProcAddress("glGetVariantArrayObjectivATI");
  glBeginVertexShaderEXT = (PFNGLBEGINVERTEXSHADEREXTPROC)glfwGetProcAddress("glBeginVertexShaderEXT");
  glEndVertexShaderEXT = (PFNGLENDVERTEXSHADEREXTPROC)glfwGetProcAddress("glEndVertexShaderEXT");
  glBindVertexShaderEXT = (PFNGLBINDVERTEXSHADEREXTPROC)glfwGetProcAddress("glBindVertexShaderEXT");
  glGenVertexShadersEXT = (PFNGLGENVERTEXSHADERSEXTPROC)glfwGetProcAddress("glGenVertexShadersEXT");
  glDeleteVertexShaderEXT = (PFNGLDELETEVERTEXSHADEREXTPROC)glfwGetProcAddress("glDeleteVertexShaderEXT");
  glShaderOp1EXT = (PFNGLSHADEROP1EXTPROC)glfwGetProcAddress("glShaderOp1EXT");
  glShaderOp2EXT = (PFNGLSHADEROP2EXTPROC)glfwGetProcAddress("glShaderOp2EXT");
  glShaderOp3EXT = (PFNGLSHADEROP3EXTPROC)glfwGetProcAddress("glShaderOp3EXT");
  glSwizzleEXT = (PFNGLSWIZZLEEXTPROC)glfwGetProcAddress("glSwizzleEXT");
  glWriteMaskEXT = (PFNGLWRITEMASKEXTPROC)glfwGetProcAddress("glWriteMaskEXT");
  glInsertComponentEXT = (PFNGLINSERTCOMPONENTEXTPROC)glfwGetProcAddress("glInsertComponentEXT");
  glExtractComponentEXT = (PFNGLEXTRACTCOMPONENTEXTPROC)glfwGetProcAddress("glExtractComponentEXT");
  glGenSymbolsEXT = (PFNGLGENSYMBOLSEXTPROC)glfwGetProcAddress("glGenSymbolsEXT");
  glSetInvariantEXT = (PFNGLSETINVARIANTEXTPROC)glfwGetProcAddress("glSetInvariantEXT");
  glSetLocalConstantEXT = (PFNGLSETLOCALCONSTANTEXTPROC)glfwGetProcAddress("glSetLocalConstantEXT");
  glVariantbvEXT = (PFNGLVARIANTBVEXTPROC)glfwGetProcAddress("glVariantbvEXT");
  glVariantsvEXT = (PFNGLVARIANTSVEXTPROC)glfwGetProcAddress("glVariantsvEXT");
  glVariantivEXT = (PFNGLVARIANTIVEXTPROC)glfwGetProcAddress("glVariantivEXT");
  glVariantfvEXT = (PFNGLVARIANTFVEXTPROC)glfwGetProcAddress("glVariantfvEXT");
  glVariantdvEXT = (PFNGLVARIANTDVEXTPROC)glfwGetProcAddress("glVariantdvEXT");
  glVariantubvEXT = (PFNGLVARIANTUBVEXTPROC)glfwGetProcAddress("glVariantubvEXT");
  glVariantusvEXT = (PFNGLVARIANTUSVEXTPROC)glfwGetProcAddress("glVariantusvEXT");
  glVariantuivEXT = (PFNGLVARIANTUIVEXTPROC)glfwGetProcAddress("glVariantuivEXT");
  glVariantPointerEXT = (PFNGLVARIANTPOINTEREXTPROC)glfwGetProcAddress("glVariantPointerEXT");
  glEnableVariantClientStateEXT = (PFNGLENABLEVARIANTCLIENTSTATEEXTPROC)glfwGetProcAddress("glEnableVariantClientStateEXT");
  glDisableVariantClientStateEXT = (PFNGLDISABLEVARIANTCLIENTSTATEEXTPROC)glfwGetProcAddress("glDisableVariantClientStateEXT");
  glBindLightParameterEXT = (PFNGLBINDLIGHTPARAMETEREXTPROC)glfwGetProcAddress("glBindLightParameterEXT");
  glBindMaterialParameterEXT = (PFNGLBINDMATERIALPARAMETEREXTPROC)glfwGetProcAddress("glBindMaterialParameterEXT");
  glBindTexGenParameterEXT = (PFNGLBINDTEXGENPARAMETEREXTPROC)glfwGetProcAddress("glBindTexGenParameterEXT");
  glBindTextureUnitParameterEXT = (PFNGLBINDTEXTUREUNITPARAMETEREXTPROC)glfwGetProcAddress("glBindTextureUnitParameterEXT");
  glBindParameterEXT = (PFNGLBINDPARAMETEREXTPROC)glfwGetProcAddress("glBindParameterEXT");
  glIsVariantEnabledEXT = (PFNGLISVARIANTENABLEDEXTPROC)glfwGetProcAddress("glIsVariantEnabledEXT");
  glGetVariantBooleanvEXT = (PFNGLGETVARIANTBOOLEANVEXTPROC)glfwGetProcAddress("glGetVariantBooleanvEXT");
  glGetVariantIntegervEXT = (PFNGLGETVARIANTINTEGERVEXTPROC)glfwGetProcAddress("glGetVariantIntegervEXT");
  glGetVariantFloatvEXT = (PFNGLGETVARIANTFLOATVEXTPROC)glfwGetProcAddress("glGetVariantFloatvEXT");
  glGetVariantPointervEXT = (PFNGLGETVARIANTPOINTERVEXTPROC)glfwGetProcAddress("glGetVariantPointervEXT");
  glGetInvariantBooleanvEXT = (PFNGLGETINVARIANTBOOLEANVEXTPROC)glfwGetProcAddress("glGetInvariantBooleanvEXT");
  glGetInvariantIntegervEXT = (PFNGLGETINVARIANTINTEGERVEXTPROC)glfwGetProcAddress("glGetInvariantIntegervEXT");
  glGetInvariantFloatvEXT = (PFNGLGETINVARIANTFLOATVEXTPROC)glfwGetProcAddress("glGetInvariantFloatvEXT");
  glGetLocalConstantBooleanvEXT = (PFNGLGETLOCALCONSTANTBOOLEANVEXTPROC)glfwGetProcAddress("glGetLocalConstantBooleanvEXT");
  glGetLocalConstantIntegervEXT = (PFNGLGETLOCALCONSTANTINTEGERVEXTPROC)glfwGetProcAddress("glGetLocalConstantIntegervEXT");
  glGetLocalConstantFloatvEXT = (PFNGLGETLOCALCONSTANTFLOATVEXTPROC)glfwGetProcAddress("glGetLocalConstantFloatvEXT");
  glVertexStream1sATI = (PFNGLVERTEXSTREAM1SATIPROC)glfwGetProcAddress("glVertexStream1sATI");
  glVertexStream1svATI = (PFNGLVERTEXSTREAM1SVATIPROC)glfwGetProcAddress("glVertexStream1svATI");
  glVertexStream1iATI = (PFNGLVERTEXSTREAM1IATIPROC)glfwGetProcAddress("glVertexStream1iATI");
  glVertexStream1ivATI = (PFNGLVERTEXSTREAM1IVATIPROC)glfwGetProcAddress("glVertexStream1ivATI");
  glVertexStream1fATI = (PFNGLVERTEXSTREAM1FATIPROC)glfwGetProcAddress("glVertexStream1fATI");
  glVertexStream1fvATI = (PFNGLVERTEXSTREAM1FVATIPROC)glfwGetProcAddress("glVertexStream1fvATI");
  glVertexStream1dATI = (PFNGLVERTEXSTREAM1DATIPROC)glfwGetProcAddress("glVertexStream1dATI");
  glVertexStream1dvATI = (PFNGLVERTEXSTREAM1DVATIPROC)glfwGetProcAddress("glVertexStream1dvATI");
  glVertexStream2sATI = (PFNGLVERTEXSTREAM2SATIPROC)glfwGetProcAddress("glVertexStream2sATI");
  glVertexStream2svATI = (PFNGLVERTEXSTREAM2SVATIPROC)glfwGetProcAddress("glVertexStream2svATI");
  glVertexStream2iATI = (PFNGLVERTEXSTREAM2IATIPROC)glfwGetProcAddress("glVertexStream2iATI");
  glVertexStream2ivATI = (PFNGLVERTEXSTREAM2IVATIPROC)glfwGetProcAddress("glVertexStream2ivATI");
  glVertexStream2fATI = (PFNGLVERTEXSTREAM2FATIPROC)glfwGetProcAddress("glVertexStream2fATI");
  glVertexStream2fvATI = (PFNGLVERTEXSTREAM2FVATIPROC)glfwGetProcAddress("glVertexStream2fvATI");
  glVertexStream2dATI = (PFNGLVERTEXSTREAM2DATIPROC)glfwGetProcAddress("glVertexStream2dATI");
  glVertexStream2dvATI = (PFNGLVERTEXSTREAM2DVATIPROC)glfwGetProcAddress("glVertexStream2dvATI");
  glVertexStream3sATI = (PFNGLVERTEXSTREAM3SATIPROC)glfwGetProcAddress("glVertexStream3sATI");
  glVertexStream3svATI = (PFNGLVERTEXSTREAM3SVATIPROC)glfwGetProcAddress("glVertexStream3svATI");
  glVertexStream3iATI = (PFNGLVERTEXSTREAM3IATIPROC)glfwGetProcAddress("glVertexStream3iATI");
  glVertexStream3ivATI = (PFNGLVERTEXSTREAM3IVATIPROC)glfwGetProcAddress("glVertexStream3ivATI");
  glVertexStream3fATI = (PFNGLVERTEXSTREAM3FATIPROC)glfwGetProcAddress("glVertexStream3fATI");
  glVertexStream3fvATI = (PFNGLVERTEXSTREAM3FVATIPROC)glfwGetProcAddress("glVertexStream3fvATI");
  glVertexStream3dATI = (PFNGLVERTEXSTREAM3DATIPROC)glfwGetProcAddress("glVertexStream3dATI");
  glVertexStream3dvATI = (PFNGLVERTEXSTREAM3DVATIPROC)glfwGetProcAddress("glVertexStream3dvATI");
  glVertexStream4sATI = (PFNGLVERTEXSTREAM4SATIPROC)glfwGetProcAddress("glVertexStream4sATI");
  glVertexStream4svATI = (PFNGLVERTEXSTREAM4SVATIPROC)glfwGetProcAddress("glVertexStream4svATI");
  glVertexStream4iATI = (PFNGLVERTEXSTREAM4IATIPROC)glfwGetProcAddress("glVertexStream4iATI");
  glVertexStream4ivATI = (PFNGLVERTEXSTREAM4IVATIPROC)glfwGetProcAddress("glVertexStream4ivATI");
  glVertexStream4fATI = (PFNGLVERTEXSTREAM4FATIPROC)glfwGetProcAddress("glVertexStream4fATI");
  glVertexStream4fvATI = (PFNGLVERTEXSTREAM4FVATIPROC)glfwGetProcAddress("glVertexStream4fvATI");
  glVertexStream4dATI = (PFNGLVERTEXSTREAM4DATIPROC)glfwGetProcAddress("glVertexStream4dATI");
  glVertexStream4dvATI = (PFNGLVERTEXSTREAM4DVATIPROC)glfwGetProcAddress("glVertexStream4dvATI");
  glNormalStream3bATI = (PFNGLNORMALSTREAM3BATIPROC)glfwGetProcAddress("glNormalStream3bATI");
  glNormalStream3bvATI = (PFNGLNORMALSTREAM3BVATIPROC)glfwGetProcAddress("glNormalStream3bvATI");
  glNormalStream3sATI = (PFNGLNORMALSTREAM3SATIPROC)glfwGetProcAddress("glNormalStream3sATI");
  glNormalStream3svATI = (PFNGLNORMALSTREAM3SVATIPROC)glfwGetProcAddress("glNormalStream3svATI");
  glNormalStream3iATI = (PFNGLNORMALSTREAM3IATIPROC)glfwGetProcAddress("glNormalStream3iATI");
  glNormalStream3ivATI = (PFNGLNORMALSTREAM3IVATIPROC)glfwGetProcAddress("glNormalStream3ivATI");
  glNormalStream3fATI = (PFNGLNORMALSTREAM3FATIPROC)glfwGetProcAddress("glNormalStream3fATI");
  glNormalStream3fvATI = (PFNGLNORMALSTREAM3FVATIPROC)glfwGetProcAddress("glNormalStream3fvATI");
  glNormalStream3dATI = (PFNGLNORMALSTREAM3DATIPROC)glfwGetProcAddress("glNormalStream3dATI");
  glNormalStream3dvATI = (PFNGLNORMALSTREAM3DVATIPROC)glfwGetProcAddress("glNormalStream3dvATI");
  glClientActiveVertexStreamATI = (PFNGLCLIENTACTIVEVERTEXSTREAMATIPROC)glfwGetProcAddress("glClientActiveVertexStreamATI");
  glVertexBlendEnviATI = (PFNGLVERTEXBLENDENVIATIPROC)glfwGetProcAddress("glVertexBlendEnviATI");
  glVertexBlendEnvfATI = (PFNGLVERTEXBLENDENVFATIPROC)glfwGetProcAddress("glVertexBlendEnvfATI");
  glElementPointerATI = (PFNGLELEMENTPOINTERATIPROC)glfwGetProcAddress("glElementPointerATI");
  glDrawElementArrayATI = (PFNGLDRAWELEMENTARRAYATIPROC)glfwGetProcAddress("glDrawElementArrayATI");
  glDrawRangeElementArrayATI = (PFNGLDRAWRANGEELEMENTARRAYATIPROC)glfwGetProcAddress("glDrawRangeElementArrayATI");
  glDrawMeshArraysSUN = (PFNGLDRAWMESHARRAYSSUNPROC)glfwGetProcAddress("glDrawMeshArraysSUN");
  glGenOcclusionQueriesNV = (PFNGLGENOCCLUSIONQUERIESNVPROC)glfwGetProcAddress("glGenOcclusionQueriesNV");
  glDeleteOcclusionQueriesNV = (PFNGLDELETEOCCLUSIONQUERIESNVPROC)glfwGetProcAddress("glDeleteOcclusionQueriesNV");
  glIsOcclusionQueryNV = (PFNGLISOCCLUSIONQUERYNVPROC)glfwGetProcAddress("glIsOcclusionQueryNV");
  glBeginOcclusionQueryNV = (PFNGLBEGINOCCLUSIONQUERYNVPROC)glfwGetProcAddress("glBeginOcclusionQueryNV");
  glEndOcclusionQueryNV = (PFNGLENDOCCLUSIONQUERYNVPROC)glfwGetProcAddress("glEndOcclusionQueryNV");
  glGetOcclusionQueryivNV = (PFNGLGETOCCLUSIONQUERYIVNVPROC)glfwGetProcAddress("glGetOcclusionQueryivNV");
  glGetOcclusionQueryuivNV = (PFNGLGETOCCLUSIONQUERYUIVNVPROC)glfwGetProcAddress("glGetOcclusionQueryuivNV");
  glPointParameteriNV = (PFNGLPOINTPARAMETERINVPROC)glfwGetProcAddress("glPointParameteriNV");
  glPointParameterivNV = (PFNGLPOINTPARAMETERIVNVPROC)glfwGetProcAddress("glPointParameterivNV");
  glActiveStencilFaceEXT = (PFNGLACTIVESTENCILFACEEXTPROC)glfwGetProcAddress("glActiveStencilFaceEXT");
  glElementPointerAPPLE = (PFNGLELEMENTPOINTERAPPLEPROC)glfwGetProcAddress("glElementPointerAPPLE");
  glDrawElementArrayAPPLE = (PFNGLDRAWELEMENTARRAYAPPLEPROC)glfwGetProcAddress("glDrawElementArrayAPPLE");
  glDrawRangeElementArrayAPPLE = (PFNGLDRAWRANGEELEMENTARRAYAPPLEPROC)glfwGetProcAddress("glDrawRangeElementArrayAPPLE");
  glMultiDrawElementArrayAPPLE = (PFNGLMULTIDRAWELEMENTARRAYAPPLEPROC)glfwGetProcAddress("glMultiDrawElementArrayAPPLE");
  glMultiDrawRangeElementArrayAPPLE = (PFNGLMULTIDRAWRANGEELEMENTARRAYAPPLEPROC)glfwGetProcAddress("glMultiDrawRangeElementArrayAPPLE");
  glGenFencesAPPLE = (PFNGLGENFENCESAPPLEPROC)glfwGetProcAddress("glGenFencesAPPLE");
  glDeleteFencesAPPLE = (PFNGLDELETEFENCESAPPLEPROC)glfwGetProcAddress("glDeleteFencesAPPLE");
  glSetFenceAPPLE = (PFNGLSETFENCEAPPLEPROC)glfwGetProcAddress("glSetFenceAPPLE");
  glIsFenceAPPLE = (PFNGLISFENCEAPPLEPROC)glfwGetProcAddress("glIsFenceAPPLE");
  glTestFenceAPPLE = (PFNGLTESTFENCEAPPLEPROC)glfwGetProcAddress("glTestFenceAPPLE");
  glFinishFenceAPPLE = (PFNGLFINISHFENCEAPPLEPROC)glfwGetProcAddress("glFinishFenceAPPLE");
  glTestObjectAPPLE = (PFNGLTESTOBJECTAPPLEPROC)glfwGetProcAddress("glTestObjectAPPLE");
  glFinishObjectAPPLE = (PFNGLFINISHOBJECTAPPLEPROC)glfwGetProcAddress("glFinishObjectAPPLE");
  glBindVertexArrayAPPLE = (PFNGLBINDVERTEXARRAYAPPLEPROC)glfwGetProcAddress("glBindVertexArrayAPPLE");
  glDeleteVertexArraysAPPLE = (PFNGLDELETEVERTEXARRAYSAPPLEPROC)glfwGetProcAddress("glDeleteVertexArraysAPPLE");
  glGenVertexArraysAPPLE = (PFNGLGENVERTEXARRAYSAPPLEPROC)glfwGetProcAddress("glGenVertexArraysAPPLE");
  glIsVertexArrayAPPLE = (PFNGLISVERTEXARRAYAPPLEPROC)glfwGetProcAddress("glIsVertexArrayAPPLE");
  glVertexArrayRangeAPPLE = (PFNGLVERTEXARRAYRANGEAPPLEPROC)glfwGetProcAddress("glVertexArrayRangeAPPLE");
  glFlushVertexArrayRangeAPPLE = (PFNGLFLUSHVERTEXARRAYRANGEAPPLEPROC)glfwGetProcAddress("glFlushVertexArrayRangeAPPLE");
  glVertexArrayParameteriAPPLE = (PFNGLVERTEXARRAYPARAMETERIAPPLEPROC)glfwGetProcAddress("glVertexArrayParameteriAPPLE");
  glDrawBuffersATI = (PFNGLDRAWBUFFERSATIPROC)glfwGetProcAddress("glDrawBuffersATI");
  glProgramNamedParameter4fNV = (PFNGLPROGRAMNAMEDPARAMETER4FNVPROC)glfwGetProcAddress("glProgramNamedParameter4fNV");
  glProgramNamedParameter4fvNV = (PFNGLPROGRAMNAMEDPARAMETER4FVNVPROC)glfwGetProcAddress("glProgramNamedParameter4fvNV");
  glProgramNamedParameter4dNV = (PFNGLPROGRAMNAMEDPARAMETER4DNVPROC)glfwGetProcAddress("glProgramNamedParameter4dNV");
  glProgramNamedParameter4dvNV = (PFNGLPROGRAMNAMEDPARAMETER4DVNVPROC)glfwGetProcAddress("glProgramNamedParameter4dvNV");
  glGetProgramNamedParameterfvNV = (PFNGLGETPROGRAMNAMEDPARAMETERFVNVPROC)glfwGetProcAddress("glGetProgramNamedParameterfvNV");
  glGetProgramNamedParameterdvNV = (PFNGLGETPROGRAMNAMEDPARAMETERDVNVPROC)glfwGetProcAddress("glGetProgramNamedParameterdvNV");
  glVertex2hNV = (PFNGLVERTEX2HNVPROC)glfwGetProcAddress("glVertex2hNV");
  glVertex2hvNV = (PFNGLVERTEX2HVNVPROC)glfwGetProcAddress("glVertex2hvNV");
  glVertex3hNV = (PFNGLVERTEX3HNVPROC)glfwGetProcAddress("glVertex3hNV");
  glVertex3hvNV = (PFNGLVERTEX3HVNVPROC)glfwGetProcAddress("glVertex3hvNV");
  glVertex4hNV = (PFNGLVERTEX4HNVPROC)glfwGetProcAddress("glVertex4hNV");
  glVertex4hvNV = (PFNGLVERTEX4HVNVPROC)glfwGetProcAddress("glVertex4hvNV");
  glNormal3hNV = (PFNGLNORMAL3HNVPROC)glfwGetProcAddress("glNormal3hNV");
  glNormal3hvNV = (PFNGLNORMAL3HVNVPROC)glfwGetProcAddress("glNormal3hvNV");
  glColor3hNV = (PFNGLCOLOR3HNVPROC)glfwGetProcAddress("glColor3hNV");
  glColor3hvNV = (PFNGLCOLOR3HVNVPROC)glfwGetProcAddress("glColor3hvNV");
  glColor4hNV = (PFNGLCOLOR4HNVPROC)glfwGetProcAddress("glColor4hNV");
  glColor4hvNV = (PFNGLCOLOR4HVNVPROC)glfwGetProcAddress("glColor4hvNV");
  glTexCoord1hNV = (PFNGLTEXCOORD1HNVPROC)glfwGetProcAddress("glTexCoord1hNV");
  glTexCoord1hvNV = (PFNGLTEXCOORD1HVNVPROC)glfwGetProcAddress("glTexCoord1hvNV");
  glTexCoord2hNV = (PFNGLTEXCOORD2HNVPROC)glfwGetProcAddress("glTexCoord2hNV");
  glTexCoord2hvNV = (PFNGLTEXCOORD2HVNVPROC)glfwGetProcAddress("glTexCoord2hvNV");
  glTexCoord3hNV = (PFNGLTEXCOORD3HNVPROC)glfwGetProcAddress("glTexCoord3hNV");
  glTexCoord3hvNV = (PFNGLTEXCOORD3HVNVPROC)glfwGetProcAddress("glTexCoord3hvNV");
  glTexCoord4hNV = (PFNGLTEXCOORD4HNVPROC)glfwGetProcAddress("glTexCoord4hNV");
  glTexCoord4hvNV = (PFNGLTEXCOORD4HVNVPROC)glfwGetProcAddress("glTexCoord4hvNV");
  glMultiTexCoord1hNV = (PFNGLMULTITEXCOORD1HNVPROC)glfwGetProcAddress("glMultiTexCoord1hNV");
  glMultiTexCoord1hvNV = (PFNGLMULTITEXCOORD1HVNVPROC)glfwGetProcAddress("glMultiTexCoord1hvNV");
  glMultiTexCoord2hNV = (PFNGLMULTITEXCOORD2HNVPROC)glfwGetProcAddress("glMultiTexCoord2hNV");
  glMultiTexCoord2hvNV = (PFNGLMULTITEXCOORD2HVNVPROC)glfwGetProcAddress("glMultiTexCoord2hvNV");
  glMultiTexCoord3hNV = (PFNGLMULTITEXCOORD3HNVPROC)glfwGetProcAddress("glMultiTexCoord3hNV");
  glMultiTexCoord3hvNV = (PFNGLMULTITEXCOORD3HVNVPROC)glfwGetProcAddress("glMultiTexCoord3hvNV");
  glMultiTexCoord4hNV = (PFNGLMULTITEXCOORD4HNVPROC)glfwGetProcAddress("glMultiTexCoord4hNV");
  glMultiTexCoord4hvNV = (PFNGLMULTITEXCOORD4HVNVPROC)glfwGetProcAddress("glMultiTexCoord4hvNV");
  glFogCoordhNV = (PFNGLFOGCOORDHNVPROC)glfwGetProcAddress("glFogCoordhNV");
  glFogCoordhvNV = (PFNGLFOGCOORDHVNVPROC)glfwGetProcAddress("glFogCoordhvNV");
  glSecondaryColor3hNV = (PFNGLSECONDARYCOLOR3HNVPROC)glfwGetProcAddress("glSecondaryColor3hNV");
  glSecondaryColor3hvNV = (PFNGLSECONDARYCOLOR3HVNVPROC)glfwGetProcAddress("glSecondaryColor3hvNV");
  glVertexWeighthNV = (PFNGLVERTEXWEIGHTHNVPROC)glfwGetProcAddress("glVertexWeighthNV");
  glVertexWeighthvNV = (PFNGLVERTEXWEIGHTHVNVPROC)glfwGetProcAddress("glVertexWeighthvNV");
  glVertexAttrib1hNV = (PFNGLVERTEXATTRIB1HNVPROC)glfwGetProcAddress("glVertexAttrib1hNV");
  glVertexAttrib1hvNV = (PFNGLVERTEXATTRIB1HVNVPROC)glfwGetProcAddress("glVertexAttrib1hvNV");
  glVertexAttrib2hNV = (PFNGLVERTEXATTRIB2HNVPROC)glfwGetProcAddress("glVertexAttrib2hNV");
  glVertexAttrib2hvNV = (PFNGLVERTEXATTRIB2HVNVPROC)glfwGetProcAddress("glVertexAttrib2hvNV");
  glVertexAttrib3hNV = (PFNGLVERTEXATTRIB3HNVPROC)glfwGetProcAddress("glVertexAttrib3hNV");
  glVertexAttrib3hvNV = (PFNGLVERTEXATTRIB3HVNVPROC)glfwGetProcAddress("glVertexAttrib3hvNV");
  glVertexAttrib4hNV = (PFNGLVERTEXATTRIB4HNVPROC)glfwGetProcAddress("glVertexAttrib4hNV");
  glVertexAttrib4hvNV = (PFNGLVERTEXATTRIB4HVNVPROC)glfwGetProcAddress("glVertexAttrib4hvNV");
  glVertexAttribs1hvNV = (PFNGLVERTEXATTRIBS1HVNVPROC)glfwGetProcAddress("glVertexAttribs1hvNV");
  glVertexAttribs2hvNV = (PFNGLVERTEXATTRIBS2HVNVPROC)glfwGetProcAddress("glVertexAttribs2hvNV");
  glVertexAttribs3hvNV = (PFNGLVERTEXATTRIBS3HVNVPROC)glfwGetProcAddress("glVertexAttribs3hvNV");
  glVertexAttribs4hvNV = (PFNGLVERTEXATTRIBS4HVNVPROC)glfwGetProcAddress("glVertexAttribs4hvNV");
  glPixelDataRangeNV = (PFNGLPIXELDATARANGENVPROC)glfwGetProcAddress("glPixelDataRangeNV");
  glFlushPixelDataRangeNV = (PFNGLFLUSHPIXELDATARANGENVPROC)glfwGetProcAddress("glFlushPixelDataRangeNV");
  glPrimitiveRestartNV = (PFNGLPRIMITIVERESTARTNVPROC)glfwGetProcAddress("glPrimitiveRestartNV");
  glPrimitiveRestartIndexNV = (PFNGLPRIMITIVERESTARTINDEXNVPROC)glfwGetProcAddress("glPrimitiveRestartIndexNV");
  glMapObjectBufferATI = (PFNGLMAPOBJECTBUFFERATIPROC)glfwGetProcAddress("glMapObjectBufferATI");
  glUnmapObjectBufferATI = (PFNGLUNMAPOBJECTBUFFERATIPROC)glfwGetProcAddress("glUnmapObjectBufferATI");
  glStencilOpSeparateATI = (PFNGLSTENCILOPSEPARATEATIPROC)glfwGetProcAddress("glStencilOpSeparateATI");
  glStencilFuncSeparateATI = (PFNGLSTENCILFUNCSEPARATEATIPROC)glfwGetProcAddress("glStencilFuncSeparateATI");
  glVertexAttribArrayObjectATI = (PFNGLVERTEXATTRIBARRAYOBJECTATIPROC)glfwGetProcAddress("glVertexAttribArrayObjectATI");
  glGetVertexAttribArrayObjectfvATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTFVATIPROC)glfwGetProcAddress("glGetVertexAttribArrayObjectfvATI");
  glGetVertexAttribArrayObjectivATI = (PFNGLGETVERTEXATTRIBARRAYOBJECTIVATIPROC)glfwGetProcAddress("glGetVertexAttribArrayObjectivATI");
  glMultiTexCoord1bOES = (PFNGLMULTITEXCOORD1BOESPROC)glfwGetProcAddress("glMultiTexCoord1bOES");
  glMultiTexCoord1bvOES = (PFNGLMULTITEXCOORD1BVOESPROC)glfwGetProcAddress("glMultiTexCoord1bvOES");
  glMultiTexCoord2bOES = (PFNGLMULTITEXCOORD2BOESPROC)glfwGetProcAddress("glMultiTexCoord2bOES");
  glMultiTexCoord2bvOES = (PFNGLMULTITEXCOORD2BVOESPROC)glfwGetProcAddress("glMultiTexCoord2bvOES");
  glMultiTexCoord3bOES = (PFNGLMULTITEXCOORD3BOESPROC)glfwGetProcAddress("glMultiTexCoord3bOES");
  glMultiTexCoord3bvOES = (PFNGLMULTITEXCOORD3BVOESPROC)glfwGetProcAddress("glMultiTexCoord3bvOES");
  glMultiTexCoord4bOES = (PFNGLMULTITEXCOORD4BOESPROC)glfwGetProcAddress("glMultiTexCoord4bOES");
  glMultiTexCoord4bvOES = (PFNGLMULTITEXCOORD4BVOESPROC)glfwGetProcAddress("glMultiTexCoord4bvOES");
  glTexCoord1bOES = (PFNGLTEXCOORD1BOESPROC)glfwGetProcAddress("glTexCoord1bOES");
  glTexCoord1bvOES = (PFNGLTEXCOORD1BVOESPROC)glfwGetProcAddress("glTexCoord1bvOES");
  glTexCoord2bOES = (PFNGLTEXCOORD2BOESPROC)glfwGetProcAddress("glTexCoord2bOES");
  glTexCoord2bvOES = (PFNGLTEXCOORD2BVOESPROC)glfwGetProcAddress("glTexCoord2bvOES");
  glTexCoord3bOES = (PFNGLTEXCOORD3BOESPROC)glfwGetProcAddress("glTexCoord3bOES");
  glTexCoord3bvOES = (PFNGLTEXCOORD3BVOESPROC)glfwGetProcAddress("glTexCoord3bvOES");
  glTexCoord4bOES = (PFNGLTEXCOORD4BOESPROC)glfwGetProcAddress("glTexCoord4bOES");
  glTexCoord4bvOES = (PFNGLTEXCOORD4BVOESPROC)glfwGetProcAddress("glTexCoord4bvOES");
  glVertex2bOES = (PFNGLVERTEX2BOESPROC)glfwGetProcAddress("glVertex2bOES");
  glVertex2bvOES = (PFNGLVERTEX2BVOESPROC)glfwGetProcAddress("glVertex2bvOES");
  glVertex3bOES = (PFNGLVERTEX3BOESPROC)glfwGetProcAddress("glVertex3bOES");
  glVertex3bvOES = (PFNGLVERTEX3BVOESPROC)glfwGetProcAddress("glVertex3bvOES");
  glVertex4bOES = (PFNGLVERTEX4BOESPROC)glfwGetProcAddress("glVertex4bOES");
  glVertex4bvOES = (PFNGLVERTEX4BVOESPROC)glfwGetProcAddress("glVertex4bvOES");
  glAccumxOES = (PFNGLACCUMXOESPROC)glfwGetProcAddress("glAccumxOES");
  glAlphaFuncxOES = (PFNGLALPHAFUNCXOESPROC)glfwGetProcAddress("glAlphaFuncxOES");
  glBitmapxOES = (PFNGLBITMAPXOESPROC)glfwGetProcAddress("glBitmapxOES");
  glBlendColorxOES = (PFNGLBLENDCOLORXOESPROC)glfwGetProcAddress("glBlendColorxOES");
  glClearAccumxOES = (PFNGLCLEARACCUMXOESPROC)glfwGetProcAddress("glClearAccumxOES");
  glClearColorxOES = (PFNGLCLEARCOLORXOESPROC)glfwGetProcAddress("glClearColorxOES");
  glClearDepthxOES = (PFNGLCLEARDEPTHXOESPROC)glfwGetProcAddress("glClearDepthxOES");
  glClipPlanexOES = (PFNGLCLIPPLANEXOESPROC)glfwGetProcAddress("glClipPlanexOES");
  glColor3xOES = (PFNGLCOLOR3XOESPROC)glfwGetProcAddress("glColor3xOES");
  glColor4xOES = (PFNGLCOLOR4XOESPROC)glfwGetProcAddress("glColor4xOES");
  glColor3xvOES = (PFNGLCOLOR3XVOESPROC)glfwGetProcAddress("glColor3xvOES");
  glColor4xvOES = (PFNGLCOLOR4XVOESPROC)glfwGetProcAddress("glColor4xvOES");
  glConvolutionParameterxOES = (PFNGLCONVOLUTIONPARAMETERXOESPROC)glfwGetProcAddress("glConvolutionParameterxOES");
  glConvolutionParameterxvOES = (PFNGLCONVOLUTIONPARAMETERXVOESPROC)glfwGetProcAddress("glConvolutionParameterxvOES");
  glDepthRangexOES = (PFNGLDEPTHRANGEXOESPROC)glfwGetProcAddress("glDepthRangexOES");
  glEvalCoord1xOES = (PFNGLEVALCOORD1XOESPROC)glfwGetProcAddress("glEvalCoord1xOES");
  glEvalCoord2xOES = (PFNGLEVALCOORD2XOESPROC)glfwGetProcAddress("glEvalCoord2xOES");
  glEvalCoord1xvOES = (PFNGLEVALCOORD1XVOESPROC)glfwGetProcAddress("glEvalCoord1xvOES");
  glEvalCoord2xvOES = (PFNGLEVALCOORD2XVOESPROC)glfwGetProcAddress("glEvalCoord2xvOES");
  glFeedbackBufferxOES = (PFNGLFEEDBACKBUFFERXOESPROC)glfwGetProcAddress("glFeedbackBufferxOES");
  glFogxOES = (PFNGLFOGXOESPROC)glfwGetProcAddress("glFogxOES");
  glFogxvOES = (PFNGLFOGXVOESPROC)glfwGetProcAddress("glFogxvOES");
  glFrustumxOES = (PFNGLFRUSTUMXOESPROC)glfwGetProcAddress("glFrustumxOES");
  glGetClipPlanexOES = (PFNGLGETCLIPPLANEXOESPROC)glfwGetProcAddress("glGetClipPlanexOES");
  glGetConvolutionParameterxvOES = (PFNGLGETCONVOLUTIONPARAMETERXVOESPROC)glfwGetProcAddress("glGetConvolutionParameterxvOES");
  glGetFixedvOES = (PFNGLGETFIXEDVOESPROC)glfwGetProcAddress("glGetFixedvOES");
  glGetHistogramParameterxvOES = (PFNGLGETHISTOGRAMPARAMETERXVOESPROC)glfwGetProcAddress("glGetHistogramParameterxvOES");
  glGetLightxOES = (PFNGLGETLIGHTXOESPROC)glfwGetProcAddress("glGetLightxOES");
  glGetMapxvOES = (PFNGLGETMAPXVOESPROC)glfwGetProcAddress("glGetMapxvOES");
  glGetMaterialxOES = (PFNGLGETMATERIALXOESPROC)glfwGetProcAddress("glGetMaterialxOES");
  glGetPixelMapxv = (PFNGLGETPIXELMAPXVPROC)glfwGetProcAddress("glGetPixelMapxv");
  glGetTexEnvxvOES = (PFNGLGETTEXENVXVOESPROC)glfwGetProcAddress("glGetTexEnvxvOES");
  glGetTexGenxvOES = (PFNGLGETTEXGENXVOESPROC)glfwGetProcAddress("glGetTexGenxvOES");
  glGetTexLevelParameterxvOES = (PFNGLGETTEXLEVELPARAMETERXVOESPROC)glfwGetProcAddress("glGetTexLevelParameterxvOES");
  glGetTexParameterxvOES = (PFNGLGETTEXPARAMETERXVOESPROC)glfwGetProcAddress("glGetTexParameterxvOES");
  glIndexxOES = (PFNGLINDEXXOESPROC)glfwGetProcAddress("glIndexxOES");
  glIndexxvOES = (PFNGLINDEXXVOESPROC)glfwGetProcAddress("glIndexxvOES");
  glLightModelxOES = (PFNGLLIGHTMODELXOESPROC)glfwGetProcAddress("glLightModelxOES");
  glLightModelxvOES = (PFNGLLIGHTMODELXVOESPROC)glfwGetProcAddress("glLightModelxvOES");
  glLightxOES = (PFNGLLIGHTXOESPROC)glfwGetProcAddress("glLightxOES");
  glLightxvOES = (PFNGLLIGHTXVOESPROC)glfwGetProcAddress("glLightxvOES");
  glLineWidthxOES = (PFNGLLINEWIDTHXOESPROC)glfwGetProcAddress("glLineWidthxOES");
  glLoadMatrixxOES = (PFNGLLOADMATRIXXOESPROC)glfwGetProcAddress("glLoadMatrixxOES");
  glLoadTransposeMatrixxOES = (PFNGLLOADTRANSPOSEMATRIXXOESPROC)glfwGetProcAddress("glLoadTransposeMatrixxOES");
  glMap1xOES = (PFNGLMAP1XOESPROC)glfwGetProcAddress("glMap1xOES");
  glMap2xOES = (PFNGLMAP2XOESPROC)glfwGetProcAddress("glMap2xOES");
  glMapGrid1xOES = (PFNGLMAPGRID1XOESPROC)glfwGetProcAddress("glMapGrid1xOES");
  glMapGrid2xOES = (PFNGLMAPGRID2XOESPROC)glfwGetProcAddress("glMapGrid2xOES");
  glMaterialxOES = (PFNGLMATERIALXOESPROC)glfwGetProcAddress("glMaterialxOES");
  glMaterialxvOES = (PFNGLMATERIALXVOESPROC)glfwGetProcAddress("glMaterialxvOES");
  glMultMatrixxOES = (PFNGLMULTMATRIXXOESPROC)glfwGetProcAddress("glMultMatrixxOES");
  glMultTransposeMatrixxOES = (PFNGLMULTTRANSPOSEMATRIXXOESPROC)glfwGetProcAddress("glMultTransposeMatrixxOES");
  glMultiTexCoord1xOES = (PFNGLMULTITEXCOORD1XOESPROC)glfwGetProcAddress("glMultiTexCoord1xOES");
  glMultiTexCoord2xOES = (PFNGLMULTITEXCOORD2XOESPROC)glfwGetProcAddress("glMultiTexCoord2xOES");
  glMultiTexCoord3xOES = (PFNGLMULTITEXCOORD3XOESPROC)glfwGetProcAddress("glMultiTexCoord3xOES");
  glMultiTexCoord4xOES = (PFNGLMULTITEXCOORD4XOESPROC)glfwGetProcAddress("glMultiTexCoord4xOES");
  glMultiTexCoord1xvOES = (PFNGLMULTITEXCOORD1XVOESPROC)glfwGetProcAddress("glMultiTexCoord1xvOES");
  glMultiTexCoord2xvOES = (PFNGLMULTITEXCOORD2XVOESPROC)glfwGetProcAddress("glMultiTexCoord2xvOES");
  glMultiTexCoord3xvOES = (PFNGLMULTITEXCOORD3XVOESPROC)glfwGetProcAddress("glMultiTexCoord3xvOES");
  glMultiTexCoord4xvOES = (PFNGLMULTITEXCOORD4XVOESPROC)glfwGetProcAddress("glMultiTexCoord4xvOES");
  glNormal3xOES = (PFNGLNORMAL3XOESPROC)glfwGetProcAddress("glNormal3xOES");
  glNormal3xvOES = (PFNGLNORMAL3XVOESPROC)glfwGetProcAddress("glNormal3xvOES");
  glOrthoxOES = (PFNGLORTHOXOESPROC)glfwGetProcAddress("glOrthoxOES");
  glPassThroughxOES = (PFNGLPASSTHROUGHXOESPROC)glfwGetProcAddress("glPassThroughxOES");
  glPixelMapx = (PFNGLPIXELMAPXPROC)glfwGetProcAddress("glPixelMapx");
  glPixelStorex = (PFNGLPIXELSTOREXPROC)glfwGetProcAddress("glPixelStorex");
  glPixelTransferxOES = (PFNGLPIXELTRANSFERXOESPROC)glfwGetProcAddress("glPixelTransferxOES");
  glPixelZoomxOES = (PFNGLPIXELZOOMXOESPROC)glfwGetProcAddress("glPixelZoomxOES");
  glPointParameterxvOES = (PFNGLPOINTPARAMETERXVOESPROC)glfwGetProcAddress("glPointParameterxvOES");
  glPointSizexOES = (PFNGLPOINTSIZEXOESPROC)glfwGetProcAddress("glPointSizexOES");
  glPolygonOffsetxOES = (PFNGLPOLYGONOFFSETXOESPROC)glfwGetProcAddress("glPolygonOffsetxOES");
  glPrioritizeTexturesxOES = (PFNGLPRIORITIZETEXTURESXOESPROC)glfwGetProcAddress("glPrioritizeTexturesxOES");
  glRasterPos2xOES = (PFNGLRASTERPOS2XOESPROC)glfwGetProcAddress("glRasterPos2xOES");
  glRasterPos3xOES = (PFNGLRASTERPOS3XOESPROC)glfwGetProcAddress("glRasterPos3xOES");
  glRasterPos4xOES = (PFNGLRASTERPOS4XOESPROC)glfwGetProcAddress("glRasterPos4xOES");
  glRasterPos2xvOES = (PFNGLRASTERPOS2XVOESPROC)glfwGetProcAddress("glRasterPos2xvOES");
  glRasterPos3xvOES = (PFNGLRASTERPOS3XVOESPROC)glfwGetProcAddress("glRasterPos3xvOES");
  glRasterPos4xvOES = (PFNGLRASTERPOS4XVOESPROC)glfwGetProcAddress("glRasterPos4xvOES");
  glRectxOES = (PFNGLRECTXOESPROC)glfwGetProcAddress("glRectxOES");
  glRectxvOES = (PFNGLRECTXVOESPROC)glfwGetProcAddress("glRectxvOES");
  glRotatexOES = (PFNGLROTATEXOESPROC)glfwGetProcAddress("glRotatexOES");
  glSampleCoverageOES = (PFNGLSAMPLECOVERAGEOESPROC)glfwGetProcAddress("glSampleCoverageOES");
  glScalexOES = (PFNGLSCALEXOESPROC)glfwGetProcAddress("glScalexOES");
  glTexCoord1xOES = (PFNGLTEXCOORD1XOESPROC)glfwGetProcAddress("glTexCoord1xOES");
  glTexCoord2xOES = (PFNGLTEXCOORD2XOESPROC)glfwGetProcAddress("glTexCoord2xOES");
  glTexCoord3xOES = (PFNGLTEXCOORD3XOESPROC)glfwGetProcAddress("glTexCoord3xOES");
  glTexCoord4xOES = (PFNGLTEXCOORD4XOESPROC)glfwGetProcAddress("glTexCoord4xOES");
  glTexCoord1xvOES = (PFNGLTEXCOORD1XVOESPROC)glfwGetProcAddress("glTexCoord1xvOES");
  glTexCoord2xvOES = (PFNGLTEXCOORD2XVOESPROC)glfwGetProcAddress("glTexCoord2xvOES");
  glTexCoord3xvOES = (PFNGLTEXCOORD3XVOESPROC)glfwGetProcAddress("glTexCoord3xvOES");
  glTexCoord4xvOES = (PFNGLTEXCOORD4XVOESPROC)glfwGetProcAddress("glTexCoord4xvOES");
  glTexEnvxOES = (PFNGLTEXENVXOESPROC)glfwGetProcAddress("glTexEnvxOES");
  glTexEnvxvOES = (PFNGLTEXENVXVOESPROC)glfwGetProcAddress("glTexEnvxvOES");
  glTexGenxOES = (PFNGLTEXGENXOESPROC)glfwGetProcAddress("glTexGenxOES");
  glTexGenxvOES = (PFNGLTEXGENXVOESPROC)glfwGetProcAddress("glTexGenxvOES");
  glTexParameterxOES = (PFNGLTEXPARAMETERXOESPROC)glfwGetProcAddress("glTexParameterxOES");
  glTexParameterxvOES = (PFNGLTEXPARAMETERXVOESPROC)glfwGetProcAddress("glTexParameterxvOES");
  glTranslatexOES = (PFNGLTRANSLATEXOESPROC)glfwGetProcAddress("glTranslatexOES");
  glVertex2xOES = (PFNGLVERTEX2XOESPROC)glfwGetProcAddress("glVertex2xOES");
  glVertex3xOES = (PFNGLVERTEX3XOESPROC)glfwGetProcAddress("glVertex3xOES");
  glVertex4xOES = (PFNGLVERTEX4XOESPROC)glfwGetProcAddress("glVertex4xOES");
  glVertex2xvOES = (PFNGLVERTEX2XVOESPROC)glfwGetProcAddress("glVertex2xvOES");
  glVertex3xvOES = (PFNGLVERTEX3XVOESPROC)glfwGetProcAddress("glVertex3xvOES");
  glVertex4xvOES = (PFNGLVERTEX4XVOESPROC)glfwGetProcAddress("glVertex4xvOES");
  glDepthRangefOES = (PFNGLDEPTHRANGEFOESPROC)glfwGetProcAddress("glDepthRangefOES");
  glFrustumfOES = (PFNGLFRUSTUMFOESPROC)glfwGetProcAddress("glFrustumfOES");
  glOrthofOES = (PFNGLORTHOFOESPROC)glfwGetProcAddress("glOrthofOES");
  glClipPlanefOES = (PFNGLCLIPPLANEFOESPROC)glfwGetProcAddress("glClipPlanefOES");
  glClearDepthfOES = (PFNGLCLEARDEPTHFOESPROC)glfwGetProcAddress("glClearDepthfOES");
  glGetClipPlanefOES = (PFNGLGETCLIPPLANEFOESPROC)glfwGetProcAddress("glGetClipPlanefOES");
  glQueryMatrixxOES = (PFNGLQUERYMATRIXXOESPROC)glfwGetProcAddress("glQueryMatrixxOES");
  glDepthBoundsEXT = (PFNGLDEPTHBOUNDSEXTPROC)glfwGetProcAddress("glDepthBoundsEXT");
  glBlendEquationSeparateEXT = (PFNGLBLENDEQUATIONSEPARATEEXTPROC)glfwGetProcAddress("glBlendEquationSeparateEXT");
  glIsRenderbufferEXT = (PFNGLISRENDERBUFFEREXTPROC)glfwGetProcAddress("glIsRenderbufferEXT");
  glBindRenderbufferEXT = (PFNGLBINDRENDERBUFFEREXTPROC)glfwGetProcAddress("glBindRenderbufferEXT");
  glDeleteRenderbuffersEXT = (PFNGLDELETERENDERBUFFERSEXTPROC)glfwGetProcAddress("glDeleteRenderbuffersEXT");
  glGenRenderbuffersEXT = (PFNGLGENRENDERBUFFERSEXTPROC)glfwGetProcAddress("glGenRenderbuffersEXT");
  glRenderbufferStorageEXT = (PFNGLRENDERBUFFERSTORAGEEXTPROC)glfwGetProcAddress("glRenderbufferStorageEXT");
  glGetRenderbufferParameterivEXT = (PFNGLGETRENDERBUFFERPARAMETERIVEXTPROC)glfwGetProcAddress("glGetRenderbufferParameterivEXT");
  glIsFramebufferEXT = (PFNGLISFRAMEBUFFEREXTPROC)glfwGetProcAddress("glIsFramebufferEXT");
  glBindFramebufferEXT = (PFNGLBINDFRAMEBUFFEREXTPROC)glfwGetProcAddress("glBindFramebufferEXT");
  glDeleteFramebuffersEXT = (PFNGLDELETEFRAMEBUFFERSEXTPROC)glfwGetProcAddress("glDeleteFramebuffersEXT");
  glGenFramebuffersEXT = (PFNGLGENFRAMEBUFFERSEXTPROC)glfwGetProcAddress("glGenFramebuffersEXT");
  glCheckFramebufferStatusEXT = (PFNGLCHECKFRAMEBUFFERSTATUSEXTPROC)glfwGetProcAddress("glCheckFramebufferStatusEXT");
  glFramebufferTexture1DEXT = (PFNGLFRAMEBUFFERTEXTURE1DEXTPROC)glfwGetProcAddress("glFramebufferTexture1DEXT");
  glFramebufferTexture2DEXT = (PFNGLFRAMEBUFFERTEXTURE2DEXTPROC)glfwGetProcAddress("glFramebufferTexture2DEXT");
  glFramebufferTexture3DEXT = (PFNGLFRAMEBUFFERTEXTURE3DEXTPROC)glfwGetProcAddress("glFramebufferTexture3DEXT");
  glFramebufferRenderbufferEXT = (PFNGLFRAMEBUFFERRENDERBUFFEREXTPROC)glfwGetProcAddress("glFramebufferRenderbufferEXT");
  glGetFramebufferAttachmentParameterivEXT = (PFNGLGETFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)glfwGetProcAddress("glGetFramebufferAttachmentParameterivEXT");
  glGenerateMipmapEXT = (PFNGLGENERATEMIPMAPEXTPROC)glfwGetProcAddress("glGenerateMipmapEXT");
  glStringMarkerGREMEDY = (PFNGLSTRINGMARKERGREMEDYPROC)glfwGetProcAddress("glStringMarkerGREMEDY");
  glStencilClearTagEXT = (PFNGLSTENCILCLEARTAGEXTPROC)glfwGetProcAddress("glStencilClearTagEXT");
  glBlitFramebufferEXT = (PFNGLBLITFRAMEBUFFEREXTPROC)glfwGetProcAddress("glBlitFramebufferEXT");
  glRenderbufferStorageMultisampleEXT = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)glfwGetProcAddress("glRenderbufferStorageMultisampleEXT");
  glGetQueryObjecti64vEXT = (PFNGLGETQUERYOBJECTI64VEXTPROC)glfwGetProcAddress("glGetQueryObjecti64vEXT");
  glGetQueryObjectui64vEXT = (PFNGLGETQUERYOBJECTUI64VEXTPROC)glfwGetProcAddress("glGetQueryObjectui64vEXT");
  glProgramEnvParameters4fvEXT = (PFNGLPROGRAMENVPARAMETERS4FVEXTPROC)glfwGetProcAddress("glProgramEnvParameters4fvEXT");
  glProgramLocalParameters4fvEXT = (PFNGLPROGRAMLOCALPARAMETERS4FVEXTPROC)glfwGetProcAddress("glProgramLocalParameters4fvEXT");
  glBufferParameteriAPPLE = (PFNGLBUFFERPARAMETERIAPPLEPROC)glfwGetProcAddress("glBufferParameteriAPPLE");
  glFlushMappedBufferRangeAPPLE = (PFNGLFLUSHMAPPEDBUFFERRANGEAPPLEPROC)glfwGetProcAddress("glFlushMappedBufferRangeAPPLE");
  glProgramLocalParameterI4iNV = (PFNGLPROGRAMLOCALPARAMETERI4INVPROC)glfwGetProcAddress("glProgramLocalParameterI4iNV");
  glProgramLocalParameterI4ivNV = (PFNGLPROGRAMLOCALPARAMETERI4IVNVPROC)glfwGetProcAddress("glProgramLocalParameterI4ivNV");
  glProgramLocalParametersI4ivNV = (PFNGLPROGRAMLOCALPARAMETERSI4IVNVPROC)glfwGetProcAddress("glProgramLocalParametersI4ivNV");
  glProgramLocalParameterI4uiNV = (PFNGLPROGRAMLOCALPARAMETERI4UINVPROC)glfwGetProcAddress("glProgramLocalParameterI4uiNV");
  glProgramLocalParameterI4uivNV = (PFNGLPROGRAMLOCALPARAMETERI4UIVNVPROC)glfwGetProcAddress("glProgramLocalParameterI4uivNV");
  glProgramLocalParametersI4uivNV = (PFNGLPROGRAMLOCALPARAMETERSI4UIVNVPROC)glfwGetProcAddress("glProgramLocalParametersI4uivNV");
  glProgramEnvParameterI4iNV = (PFNGLPROGRAMENVPARAMETERI4INVPROC)glfwGetProcAddress("glProgramEnvParameterI4iNV");
  glProgramEnvParameterI4ivNV = (PFNGLPROGRAMENVPARAMETERI4IVNVPROC)glfwGetProcAddress("glProgramEnvParameterI4ivNV");
  glProgramEnvParametersI4ivNV = (PFNGLPROGRAMENVPARAMETERSI4IVNVPROC)glfwGetProcAddress("glProgramEnvParametersI4ivNV");
  glProgramEnvParameterI4uiNV = (PFNGLPROGRAMENVPARAMETERI4UINVPROC)glfwGetProcAddress("glProgramEnvParameterI4uiNV");
  glProgramEnvParameterI4uivNV = (PFNGLPROGRAMENVPARAMETERI4UIVNVPROC)glfwGetProcAddress("glProgramEnvParameterI4uivNV");
  glProgramEnvParametersI4uivNV = (PFNGLPROGRAMENVPARAMETERSI4UIVNVPROC)glfwGetProcAddress("glProgramEnvParametersI4uivNV");
  glGetProgramLocalParameterIivNV = (PFNGLGETPROGRAMLOCALPARAMETERIIVNVPROC)glfwGetProcAddress("glGetProgramLocalParameterIivNV");
  glGetProgramLocalParameterIuivNV = (PFNGLGETPROGRAMLOCALPARAMETERIUIVNVPROC)glfwGetProcAddress("glGetProgramLocalParameterIuivNV");
  glGetProgramEnvParameterIivNV = (PFNGLGETPROGRAMENVPARAMETERIIVNVPROC)glfwGetProcAddress("glGetProgramEnvParameterIivNV");
  glGetProgramEnvParameterIuivNV = (PFNGLGETPROGRAMENVPARAMETERIUIVNVPROC)glfwGetProcAddress("glGetProgramEnvParameterIuivNV");
  glProgramVertexLimitNV = (PFNGLPROGRAMVERTEXLIMITNVPROC)glfwGetProcAddress("glProgramVertexLimitNV");
  glFramebufferTextureEXT = (PFNGLFRAMEBUFFERTEXTUREEXTPROC)glfwGetProcAddress("glFramebufferTextureEXT");
  glFramebufferTextureLayerEXT = (PFNGLFRAMEBUFFERTEXTURELAYEREXTPROC)glfwGetProcAddress("glFramebufferTextureLayerEXT");
  glFramebufferTextureFaceEXT = (PFNGLFRAMEBUFFERTEXTUREFACEEXTPROC)glfwGetProcAddress("glFramebufferTextureFaceEXT");
  glProgramParameteriEXT = (PFNGLPROGRAMPARAMETERIEXTPROC)glfwGetProcAddress("glProgramParameteriEXT");
  glVertexAttribI1iEXT = (PFNGLVERTEXATTRIBI1IEXTPROC)glfwGetProcAddress("glVertexAttribI1iEXT");
  glVertexAttribI2iEXT = (PFNGLVERTEXATTRIBI2IEXTPROC)glfwGetProcAddress("glVertexAttribI2iEXT");
  glVertexAttribI3iEXT = (PFNGLVERTEXATTRIBI3IEXTPROC)glfwGetProcAddress("glVertexAttribI3iEXT");
  glVertexAttribI4iEXT = (PFNGLVERTEXATTRIBI4IEXTPROC)glfwGetProcAddress("glVertexAttribI4iEXT");
  glVertexAttribI1uiEXT = (PFNGLVERTEXATTRIBI1UIEXTPROC)glfwGetProcAddress("glVertexAttribI1uiEXT");
  glVertexAttribI2uiEXT = (PFNGLVERTEXATTRIBI2UIEXTPROC)glfwGetProcAddress("glVertexAttribI2uiEXT");
  glVertexAttribI3uiEXT = (PFNGLVERTEXATTRIBI3UIEXTPROC)glfwGetProcAddress("glVertexAttribI3uiEXT");
  glVertexAttribI4uiEXT = (PFNGLVERTEXATTRIBI4UIEXTPROC)glfwGetProcAddress("glVertexAttribI4uiEXT");
  glVertexAttribI1ivEXT = (PFNGLVERTEXATTRIBI1IVEXTPROC)glfwGetProcAddress("glVertexAttribI1ivEXT");
  glVertexAttribI2ivEXT = (PFNGLVERTEXATTRIBI2IVEXTPROC)glfwGetProcAddress("glVertexAttribI2ivEXT");
  glVertexAttribI3ivEXT = (PFNGLVERTEXATTRIBI3IVEXTPROC)glfwGetProcAddress("glVertexAttribI3ivEXT");
  glVertexAttribI4ivEXT = (PFNGLVERTEXATTRIBI4IVEXTPROC)glfwGetProcAddress("glVertexAttribI4ivEXT");
  glVertexAttribI1uivEXT = (PFNGLVERTEXATTRIBI1UIVEXTPROC)glfwGetProcAddress("glVertexAttribI1uivEXT");
  glVertexAttribI2uivEXT = (PFNGLVERTEXATTRIBI2UIVEXTPROC)glfwGetProcAddress("glVertexAttribI2uivEXT");
  glVertexAttribI3uivEXT = (PFNGLVERTEXATTRIBI3UIVEXTPROC)glfwGetProcAddress("glVertexAttribI3uivEXT");
  glVertexAttribI4uivEXT = (PFNGLVERTEXATTRIBI4UIVEXTPROC)glfwGetProcAddress("glVertexAttribI4uivEXT");
  glVertexAttribI4bvEXT = (PFNGLVERTEXATTRIBI4BVEXTPROC)glfwGetProcAddress("glVertexAttribI4bvEXT");
  glVertexAttribI4svEXT = (PFNGLVERTEXATTRIBI4SVEXTPROC)glfwGetProcAddress("glVertexAttribI4svEXT");
  glVertexAttribI4ubvEXT = (PFNGLVERTEXATTRIBI4UBVEXTPROC)glfwGetProcAddress("glVertexAttribI4ubvEXT");
  glVertexAttribI4usvEXT = (PFNGLVERTEXATTRIBI4USVEXTPROC)glfwGetProcAddress("glVertexAttribI4usvEXT");
  glVertexAttribIPointerEXT = (PFNGLVERTEXATTRIBIPOINTEREXTPROC)glfwGetProcAddress("glVertexAttribIPointerEXT");
  glGetVertexAttribIivEXT = (PFNGLGETVERTEXATTRIBIIVEXTPROC)glfwGetProcAddress("glGetVertexAttribIivEXT");
  glGetVertexAttribIuivEXT = (PFNGLGETVERTEXATTRIBIUIVEXTPROC)glfwGetProcAddress("glGetVertexAttribIuivEXT");
  glGetUniformuivEXT = (PFNGLGETUNIFORMUIVEXTPROC)glfwGetProcAddress("glGetUniformuivEXT");
  glBindFragDataLocationEXT = (PFNGLBINDFRAGDATALOCATIONEXTPROC)glfwGetProcAddress("glBindFragDataLocationEXT");
  glGetFragDataLocationEXT = (PFNGLGETFRAGDATALOCATIONEXTPROC)glfwGetProcAddress("glGetFragDataLocationEXT");
  glUniform1uiEXT = (PFNGLUNIFORM1UIEXTPROC)glfwGetProcAddress("glUniform1uiEXT");
  glUniform2uiEXT = (PFNGLUNIFORM2UIEXTPROC)glfwGetProcAddress("glUniform2uiEXT");
  glUniform3uiEXT = (PFNGLUNIFORM3UIEXTPROC)glfwGetProcAddress("glUniform3uiEXT");
  glUniform4uiEXT = (PFNGLUNIFORM4UIEXTPROC)glfwGetProcAddress("glUniform4uiEXT");
  glUniform1uivEXT = (PFNGLUNIFORM1UIVEXTPROC)glfwGetProcAddress("glUniform1uivEXT");
  glUniform2uivEXT = (PFNGLUNIFORM2UIVEXTPROC)glfwGetProcAddress("glUniform2uivEXT");
  glUniform3uivEXT = (PFNGLUNIFORM3UIVEXTPROC)glfwGetProcAddress("glUniform3uivEXT");
  glUniform4uivEXT = (PFNGLUNIFORM4UIVEXTPROC)glfwGetProcAddress("glUniform4uivEXT");
  glDrawArraysInstancedEXT = (PFNGLDRAWARRAYSINSTANCEDEXTPROC)glfwGetProcAddress("glDrawArraysInstancedEXT");
  glDrawElementsInstancedEXT = (PFNGLDRAWELEMENTSINSTANCEDEXTPROC)glfwGetProcAddress("glDrawElementsInstancedEXT");
  glTexBufferEXT = (PFNGLTEXBUFFEREXTPROC)glfwGetProcAddress("glTexBufferEXT");
  glDepthRangedNV = (PFNGLDEPTHRANGEDNVPROC)glfwGetProcAddress("glDepthRangedNV");
  glClearDepthdNV = (PFNGLCLEARDEPTHDNVPROC)glfwGetProcAddress("glClearDepthdNV");
  glDepthBoundsdNV = (PFNGLDEPTHBOUNDSDNVPROC)glfwGetProcAddress("glDepthBoundsdNV");
  glRenderbufferStorageMultisampleCoverageNV = (PFNGLRENDERBUFFERSTORAGEMULTISAMPLECOVERAGENVPROC)glfwGetProcAddress("glRenderbufferStorageMultisampleCoverageNV");
  glProgramBufferParametersfvNV = (PFNGLPROGRAMBUFFERPARAMETERSFVNVPROC)glfwGetProcAddress("glProgramBufferParametersfvNV");
  glProgramBufferParametersIivNV = (PFNGLPROGRAMBUFFERPARAMETERSIIVNVPROC)glfwGetProcAddress("glProgramBufferParametersIivNV");
  glProgramBufferParametersIuivNV = (PFNGLPROGRAMBUFFERPARAMETERSIUIVNVPROC)glfwGetProcAddress("glProgramBufferParametersIuivNV");
  glColorMaskIndexedEXT = (PFNGLCOLORMASKINDEXEDEXTPROC)glfwGetProcAddress("glColorMaskIndexedEXT");
  glGetBooleanIndexedvEXT = (PFNGLGETBOOLEANINDEXEDVEXTPROC)glfwGetProcAddress("glGetBooleanIndexedvEXT");
  glGetIntegerIndexedvEXT = (PFNGLGETINTEGERINDEXEDVEXTPROC)glfwGetProcAddress("glGetIntegerIndexedvEXT");
  glEnableIndexedEXT = (PFNGLENABLEINDEXEDEXTPROC)glfwGetProcAddress("glEnableIndexedEXT");
  glDisableIndexedEXT = (PFNGLDISABLEINDEXEDEXTPROC)glfwGetProcAddress("glDisableIndexedEXT");
  glIsEnabledIndexedEXT = (PFNGLISENABLEDINDEXEDEXTPROC)glfwGetProcAddress("glIsEnabledIndexedEXT");
  glBeginTransformFeedbackNV = (PFNGLBEGINTRANSFORMFEEDBACKNVPROC)glfwGetProcAddress("glBeginTransformFeedbackNV");
  glEndTransformFeedbackNV = (PFNGLENDTRANSFORMFEEDBACKNVPROC)glfwGetProcAddress("glEndTransformFeedbackNV");
  glTransformFeedbackAttribsNV = (PFNGLTRANSFORMFEEDBACKATTRIBSNVPROC)glfwGetProcAddress("glTransformFeedbackAttribsNV");
  glBindBufferRangeNV = (PFNGLBINDBUFFERRANGENVPROC)glfwGetProcAddress("glBindBufferRangeNV");
  glBindBufferOffsetNV = (PFNGLBINDBUFFEROFFSETNVPROC)glfwGetProcAddress("glBindBufferOffsetNV");
  glBindBufferBaseNV = (PFNGLBINDBUFFERBASENVPROC)glfwGetProcAddress("glBindBufferBaseNV");
  glTransformFeedbackVaryingsNV = (PFNGLTRANSFORMFEEDBACKVARYINGSNVPROC)glfwGetProcAddress("glTransformFeedbackVaryingsNV");
  glActiveVaryingNV = (PFNGLACTIVEVARYINGNVPROC)glfwGetProcAddress("glActiveVaryingNV");
  glGetVaryingLocationNV = (PFNGLGETVARYINGLOCATIONNVPROC)glfwGetProcAddress("glGetVaryingLocationNV");
  glGetActiveVaryingNV = (PFNGLGETACTIVEVARYINGNVPROC)glfwGetProcAddress("glGetActiveVaryingNV");
  glGetTransformFeedbackVaryingNV = (PFNGLGETTRANSFORMFEEDBACKVARYINGNVPROC)glfwGetProcAddress("glGetTransformFeedbackVaryingNV");
  glTransformFeedbackStreamAttribsNV = (PFNGLTRANSFORMFEEDBACKSTREAMATTRIBSNVPROC)glfwGetProcAddress("glTransformFeedbackStreamAttribsNV");
  glUniformBufferEXT = (PFNGLUNIFORMBUFFEREXTPROC)glfwGetProcAddress("glUniformBufferEXT");
  glGetUniformBufferSizeEXT = (PFNGLGETUNIFORMBUFFERSIZEEXTPROC)glfwGetProcAddress("glGetUniformBufferSizeEXT");
  glGetUniformOffsetEXT = (PFNGLGETUNIFORMOFFSETEXTPROC)glfwGetProcAddress("glGetUniformOffsetEXT");
  glTexParameterIivEXT = (PFNGLTEXPARAMETERIIVEXTPROC)glfwGetProcAddress("glTexParameterIivEXT");
  glTexParameterIuivEXT = (PFNGLTEXPARAMETERIUIVEXTPROC)glfwGetProcAddress("glTexParameterIuivEXT");
  glGetTexParameterIivEXT = (PFNGLGETTEXPARAMETERIIVEXTPROC)glfwGetProcAddress("glGetTexParameterIivEXT");
  glGetTexParameterIuivEXT = (PFNGLGETTEXPARAMETERIUIVEXTPROC)glfwGetProcAddress("glGetTexParameterIuivEXT");
  glClearColorIiEXT = (PFNGLCLEARCOLORIIEXTPROC)glfwGetProcAddress("glClearColorIiEXT");
  glClearColorIuiEXT = (PFNGLCLEARCOLORIUIEXTPROC)glfwGetProcAddress("glClearColorIuiEXT");
  glFrameTerminatorGREMEDY = (PFNGLFRAMETERMINATORGREMEDYPROC)glfwGetProcAddress("glFrameTerminatorGREMEDY");
  glBeginConditionalRenderNV = (PFNGLBEGINCONDITIONALRENDERNVPROC)glfwGetProcAddress("glBeginConditionalRenderNV");
  glEndConditionalRenderNV = (PFNGLENDCONDITIONALRENDERNVPROC)glfwGetProcAddress("glEndConditionalRenderNV");
  glPresentFrameKeyedNV = (PFNGLPRESENTFRAMEKEYEDNVPROC)glfwGetProcAddress("glPresentFrameKeyedNV");
  glPresentFrameDualFillNV = (PFNGLPRESENTFRAMEDUALFILLNVPROC)glfwGetProcAddress("glPresentFrameDualFillNV");
  glGetVideoivNV = (PFNGLGETVIDEOIVNVPROC)glfwGetProcAddress("glGetVideoivNV");
  glGetVideouivNV = (PFNGLGETVIDEOUIVNVPROC)glfwGetProcAddress("glGetVideouivNV");
  glGetVideoi64vNV = (PFNGLGETVIDEOI64VNVPROC)glfwGetProcAddress("glGetVideoi64vNV");
  glGetVideoui64vNV = (PFNGLGETVIDEOUI64VNVPROC)glfwGetProcAddress("glGetVideoui64vNV");
  glBeginTransformFeedbackEXT = (PFNGLBEGINTRANSFORMFEEDBACKEXTPROC)glfwGetProcAddress("glBeginTransformFeedbackEXT");
  glEndTransformFeedbackEXT = (PFNGLENDTRANSFORMFEEDBACKEXTPROC)glfwGetProcAddress("glEndTransformFeedbackEXT");
  glBindBufferRangeEXT = (PFNGLBINDBUFFERRANGEEXTPROC)glfwGetProcAddress("glBindBufferRangeEXT");
  glBindBufferOffsetEXT = (PFNGLBINDBUFFEROFFSETEXTPROC)glfwGetProcAddress("glBindBufferOffsetEXT");
  glBindBufferBaseEXT = (PFNGLBINDBUFFERBASEEXTPROC)glfwGetProcAddress("glBindBufferBaseEXT");
  glTransformFeedbackVaryingsEXT = (PFNGLTRANSFORMFEEDBACKVARYINGSEXTPROC)glfwGetProcAddress("glTransformFeedbackVaryingsEXT");
  glGetTransformFeedbackVaryingEXT = (PFNGLGETTRANSFORMFEEDBACKVARYINGEXTPROC)glfwGetProcAddress("glGetTransformFeedbackVaryingEXT");
  glClientAttribDefaultEXT = (PFNGLCLIENTATTRIBDEFAULTEXTPROC)glfwGetProcAddress("glClientAttribDefaultEXT");
  glPushClientAttribDefaultEXT = (PFNGLPUSHCLIENTATTRIBDEFAULTEXTPROC)glfwGetProcAddress("glPushClientAttribDefaultEXT");
  glMatrixLoadfEXT = (PFNGLMATRIXLOADFEXTPROC)glfwGetProcAddress("glMatrixLoadfEXT");
  glMatrixLoaddEXT = (PFNGLMATRIXLOADDEXTPROC)glfwGetProcAddress("glMatrixLoaddEXT");
  glMatrixMultfEXT = (PFNGLMATRIXMULTFEXTPROC)glfwGetProcAddress("glMatrixMultfEXT");
  glMatrixMultdEXT = (PFNGLMATRIXMULTDEXTPROC)glfwGetProcAddress("glMatrixMultdEXT");
  glMatrixLoadIdentityEXT = (PFNGLMATRIXLOADIDENTITYEXTPROC)glfwGetProcAddress("glMatrixLoadIdentityEXT");
  glMatrixRotatefEXT = (PFNGLMATRIXROTATEFEXTPROC)glfwGetProcAddress("glMatrixRotatefEXT");
  glMatrixRotatedEXT = (PFNGLMATRIXROTATEDEXTPROC)glfwGetProcAddress("glMatrixRotatedEXT");
  glMatrixScalefEXT = (PFNGLMATRIXSCALEFEXTPROC)glfwGetProcAddress("glMatrixScalefEXT");
  glMatrixScaledEXT = (PFNGLMATRIXSCALEDEXTPROC)glfwGetProcAddress("glMatrixScaledEXT");
  glMatrixTranslatefEXT = (PFNGLMATRIXTRANSLATEFEXTPROC)glfwGetProcAddress("glMatrixTranslatefEXT");
  glMatrixTranslatedEXT = (PFNGLMATRIXTRANSLATEDEXTPROC)glfwGetProcAddress("glMatrixTranslatedEXT");
  glMatrixFrustumEXT = (PFNGLMATRIXFRUSTUMEXTPROC)glfwGetProcAddress("glMatrixFrustumEXT");
  glMatrixOrthoEXT = (PFNGLMATRIXORTHOEXTPROC)glfwGetProcAddress("glMatrixOrthoEXT");
  glMatrixPopEXT = (PFNGLMATRIXPOPEXTPROC)glfwGetProcAddress("glMatrixPopEXT");
  glMatrixPushEXT = (PFNGLMATRIXPUSHEXTPROC)glfwGetProcAddress("glMatrixPushEXT");
  glMatrixLoadTransposefEXT = (PFNGLMATRIXLOADTRANSPOSEFEXTPROC)glfwGetProcAddress("glMatrixLoadTransposefEXT");
  glMatrixLoadTransposedEXT = (PFNGLMATRIXLOADTRANSPOSEDEXTPROC)glfwGetProcAddress("glMatrixLoadTransposedEXT");
  glMatrixMultTransposefEXT = (PFNGLMATRIXMULTTRANSPOSEFEXTPROC)glfwGetProcAddress("glMatrixMultTransposefEXT");
  glMatrixMultTransposedEXT = (PFNGLMATRIXMULTTRANSPOSEDEXTPROC)glfwGetProcAddress("glMatrixMultTransposedEXT");
  glTextureParameterfEXT = (PFNGLTEXTUREPARAMETERFEXTPROC)glfwGetProcAddress("glTextureParameterfEXT");
  glTextureParameterfvEXT = (PFNGLTEXTUREPARAMETERFVEXTPROC)glfwGetProcAddress("glTextureParameterfvEXT");
  glTextureParameteriEXT = (PFNGLTEXTUREPARAMETERIEXTPROC)glfwGetProcAddress("glTextureParameteriEXT");
  glTextureParameterivEXT = (PFNGLTEXTUREPARAMETERIVEXTPROC)glfwGetProcAddress("glTextureParameterivEXT");
  glTextureImage1DEXT = (PFNGLTEXTUREIMAGE1DEXTPROC)glfwGetProcAddress("glTextureImage1DEXT");
  glTextureImage2DEXT = (PFNGLTEXTUREIMAGE2DEXTPROC)glfwGetProcAddress("glTextureImage2DEXT");
  glTextureSubImage1DEXT = (PFNGLTEXTURESUBIMAGE1DEXTPROC)glfwGetProcAddress("glTextureSubImage1DEXT");
  glTextureSubImage2DEXT = (PFNGLTEXTURESUBIMAGE2DEXTPROC)glfwGetProcAddress("glTextureSubImage2DEXT");
  glCopyTextureImage1DEXT = (PFNGLCOPYTEXTUREIMAGE1DEXTPROC)glfwGetProcAddress("glCopyTextureImage1DEXT");
  glCopyTextureImage2DEXT = (PFNGLCOPYTEXTUREIMAGE2DEXTPROC)glfwGetProcAddress("glCopyTextureImage2DEXT");
  glCopyTextureSubImage1DEXT = (PFNGLCOPYTEXTURESUBIMAGE1DEXTPROC)glfwGetProcAddress("glCopyTextureSubImage1DEXT");
  glCopyTextureSubImage2DEXT = (PFNGLCOPYTEXTURESUBIMAGE2DEXTPROC)glfwGetProcAddress("glCopyTextureSubImage2DEXT");
  glGetTextureImageEXT = (PFNGLGETTEXTUREIMAGEEXTPROC)glfwGetProcAddress("glGetTextureImageEXT");
  glGetTextureParameterfvEXT = (PFNGLGETTEXTUREPARAMETERFVEXTPROC)glfwGetProcAddress("glGetTextureParameterfvEXT");
  glGetTextureParameterivEXT = (PFNGLGETTEXTUREPARAMETERIVEXTPROC)glfwGetProcAddress("glGetTextureParameterivEXT");
  glGetTextureLevelParameterfvEXT = (PFNGLGETTEXTURELEVELPARAMETERFVEXTPROC)glfwGetProcAddress("glGetTextureLevelParameterfvEXT");
  glGetTextureLevelParameterivEXT = (PFNGLGETTEXTURELEVELPARAMETERIVEXTPROC)glfwGetProcAddress("glGetTextureLevelParameterivEXT");
  glTextureImage3DEXT = (PFNGLTEXTUREIMAGE3DEXTPROC)glfwGetProcAddress("glTextureImage3DEXT");
  glTextureSubImage3DEXT = (PFNGLTEXTURESUBIMAGE3DEXTPROC)glfwGetProcAddress("glTextureSubImage3DEXT");
  glCopyTextureSubImage3DEXT = (PFNGLCOPYTEXTURESUBIMAGE3DEXTPROC)glfwGetProcAddress("glCopyTextureSubImage3DEXT");
  glMultiTexParameterfEXT = (PFNGLMULTITEXPARAMETERFEXTPROC)glfwGetProcAddress("glMultiTexParameterfEXT");
  glMultiTexParameterfvEXT = (PFNGLMULTITEXPARAMETERFVEXTPROC)glfwGetProcAddress("glMultiTexParameterfvEXT");
  glMultiTexParameteriEXT = (PFNGLMULTITEXPARAMETERIEXTPROC)glfwGetProcAddress("glMultiTexParameteriEXT");
  glMultiTexParameterivEXT = (PFNGLMULTITEXPARAMETERIVEXTPROC)glfwGetProcAddress("glMultiTexParameterivEXT");
  glMultiTexImage1DEXT = (PFNGLMULTITEXIMAGE1DEXTPROC)glfwGetProcAddress("glMultiTexImage1DEXT");
  glMultiTexImage2DEXT = (PFNGLMULTITEXIMAGE2DEXTPROC)glfwGetProcAddress("glMultiTexImage2DEXT");
  glMultiTexSubImage1DEXT = (PFNGLMULTITEXSUBIMAGE1DEXTPROC)glfwGetProcAddress("glMultiTexSubImage1DEXT");
  glMultiTexSubImage2DEXT = (PFNGLMULTITEXSUBIMAGE2DEXTPROC)glfwGetProcAddress("glMultiTexSubImage2DEXT");
  glCopyMultiTexImage1DEXT = (PFNGLCOPYMULTITEXIMAGE1DEXTPROC)glfwGetProcAddress("glCopyMultiTexImage1DEXT");
  glCopyMultiTexImage2DEXT = (PFNGLCOPYMULTITEXIMAGE2DEXTPROC)glfwGetProcAddress("glCopyMultiTexImage2DEXT");
  glCopyMultiTexSubImage1DEXT = (PFNGLCOPYMULTITEXSUBIMAGE1DEXTPROC)glfwGetProcAddress("glCopyMultiTexSubImage1DEXT");
  glCopyMultiTexSubImage2DEXT = (PFNGLCOPYMULTITEXSUBIMAGE2DEXTPROC)glfwGetProcAddress("glCopyMultiTexSubImage2DEXT");
  glGetMultiTexImageEXT = (PFNGLGETMULTITEXIMAGEEXTPROC)glfwGetProcAddress("glGetMultiTexImageEXT");
  glGetMultiTexParameterfvEXT = (PFNGLGETMULTITEXPARAMETERFVEXTPROC)glfwGetProcAddress("glGetMultiTexParameterfvEXT");
  glGetMultiTexParameterivEXT = (PFNGLGETMULTITEXPARAMETERIVEXTPROC)glfwGetProcAddress("glGetMultiTexParameterivEXT");
  glGetMultiTexLevelParameterfvEXT = (PFNGLGETMULTITEXLEVELPARAMETERFVEXTPROC)glfwGetProcAddress("glGetMultiTexLevelParameterfvEXT");
  glGetMultiTexLevelParameterivEXT = (PFNGLGETMULTITEXLEVELPARAMETERIVEXTPROC)glfwGetProcAddress("glGetMultiTexLevelParameterivEXT");
  glMultiTexImage3DEXT = (PFNGLMULTITEXIMAGE3DEXTPROC)glfwGetProcAddress("glMultiTexImage3DEXT");
  glMultiTexSubImage3DEXT = (PFNGLMULTITEXSUBIMAGE3DEXTPROC)glfwGetProcAddress("glMultiTexSubImage3DEXT");
  glCopyMultiTexSubImage3DEXT = (PFNGLCOPYMULTITEXSUBIMAGE3DEXTPROC)glfwGetProcAddress("glCopyMultiTexSubImage3DEXT");
  glBindMultiTextureEXT = (PFNGLBINDMULTITEXTUREEXTPROC)glfwGetProcAddress("glBindMultiTextureEXT");
  glEnableClientStateIndexedEXT = (PFNGLENABLECLIENTSTATEINDEXEDEXTPROC)glfwGetProcAddress("glEnableClientStateIndexedEXT");
  glDisableClientStateIndexedEXT = (PFNGLDISABLECLIENTSTATEINDEXEDEXTPROC)glfwGetProcAddress("glDisableClientStateIndexedEXT");
  glMultiTexCoordPointerEXT = (PFNGLMULTITEXCOORDPOINTEREXTPROC)glfwGetProcAddress("glMultiTexCoordPointerEXT");
  glMultiTexEnvfEXT = (PFNGLMULTITEXENVFEXTPROC)glfwGetProcAddress("glMultiTexEnvfEXT");
  glMultiTexEnvfvEXT = (PFNGLMULTITEXENVFVEXTPROC)glfwGetProcAddress("glMultiTexEnvfvEXT");
  glMultiTexEnviEXT = (PFNGLMULTITEXENVIEXTPROC)glfwGetProcAddress("glMultiTexEnviEXT");
  glMultiTexEnvivEXT = (PFNGLMULTITEXENVIVEXTPROC)glfwGetProcAddress("glMultiTexEnvivEXT");
  glMultiTexGendEXT = (PFNGLMULTITEXGENDEXTPROC)glfwGetProcAddress("glMultiTexGendEXT");
  glMultiTexGendvEXT = (PFNGLMULTITEXGENDVEXTPROC)glfwGetProcAddress("glMultiTexGendvEXT");
  glMultiTexGenfEXT = (PFNGLMULTITEXGENFEXTPROC)glfwGetProcAddress("glMultiTexGenfEXT");
  glMultiTexGenfvEXT = (PFNGLMULTITEXGENFVEXTPROC)glfwGetProcAddress("glMultiTexGenfvEXT");
  glMultiTexGeniEXT = (PFNGLMULTITEXGENIEXTPROC)glfwGetProcAddress("glMultiTexGeniEXT");
  glMultiTexGenivEXT = (PFNGLMULTITEXGENIVEXTPROC)glfwGetProcAddress("glMultiTexGenivEXT");
  glGetMultiTexEnvfvEXT = (PFNGLGETMULTITEXENVFVEXTPROC)glfwGetProcAddress("glGetMultiTexEnvfvEXT");
  glGetMultiTexEnvivEXT = (PFNGLGETMULTITEXENVIVEXTPROC)glfwGetProcAddress("glGetMultiTexEnvivEXT");
  glGetMultiTexGendvEXT = (PFNGLGETMULTITEXGENDVEXTPROC)glfwGetProcAddress("glGetMultiTexGendvEXT");
  glGetMultiTexGenfvEXT = (PFNGLGETMULTITEXGENFVEXTPROC)glfwGetProcAddress("glGetMultiTexGenfvEXT");
  glGetMultiTexGenivEXT = (PFNGLGETMULTITEXGENIVEXTPROC)glfwGetProcAddress("glGetMultiTexGenivEXT");
  glGetFloatIndexedvEXT = (PFNGLGETFLOATINDEXEDVEXTPROC)glfwGetProcAddress("glGetFloatIndexedvEXT");
  glGetDoubleIndexedvEXT = (PFNGLGETDOUBLEINDEXEDVEXTPROC)glfwGetProcAddress("glGetDoubleIndexedvEXT");
  glGetPointerIndexedvEXT = (PFNGLGETPOINTERINDEXEDVEXTPROC)glfwGetProcAddress("glGetPointerIndexedvEXT");
  glCompressedTextureImage3DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE3DEXTPROC)glfwGetProcAddress("glCompressedTextureImage3DEXT");
  glCompressedTextureImage2DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE2DEXTPROC)glfwGetProcAddress("glCompressedTextureImage2DEXT");
  glCompressedTextureImage1DEXT = (PFNGLCOMPRESSEDTEXTUREIMAGE1DEXTPROC)glfwGetProcAddress("glCompressedTextureImage1DEXT");
  glCompressedTextureSubImage3DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE3DEXTPROC)glfwGetProcAddress("glCompressedTextureSubImage3DEXT");
  glCompressedTextureSubImage2DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE2DEXTPROC)glfwGetProcAddress("glCompressedTextureSubImage2DEXT");
  glCompressedTextureSubImage1DEXT = (PFNGLCOMPRESSEDTEXTURESUBIMAGE1DEXTPROC)glfwGetProcAddress("glCompressedTextureSubImage1DEXT");
  glGetCompressedTextureImageEXT = (PFNGLGETCOMPRESSEDTEXTUREIMAGEEXTPROC)glfwGetProcAddress("glGetCompressedTextureImageEXT");
  glCompressedMultiTexImage3DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE3DEXTPROC)glfwGetProcAddress("glCompressedMultiTexImage3DEXT");
  glCompressedMultiTexImage2DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE2DEXTPROC)glfwGetProcAddress("glCompressedMultiTexImage2DEXT");
  glCompressedMultiTexImage1DEXT = (PFNGLCOMPRESSEDMULTITEXIMAGE1DEXTPROC)glfwGetProcAddress("glCompressedMultiTexImage1DEXT");
  glCompressedMultiTexSubImage3DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE3DEXTPROC)glfwGetProcAddress("glCompressedMultiTexSubImage3DEXT");
  glCompressedMultiTexSubImage2DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE2DEXTPROC)glfwGetProcAddress("glCompressedMultiTexSubImage2DEXT");
  glCompressedMultiTexSubImage1DEXT = (PFNGLCOMPRESSEDMULTITEXSUBIMAGE1DEXTPROC)glfwGetProcAddress("glCompressedMultiTexSubImage1DEXT");
  glGetCompressedMultiTexImageEXT = (PFNGLGETCOMPRESSEDMULTITEXIMAGEEXTPROC)glfwGetProcAddress("glGetCompressedMultiTexImageEXT");
  glNamedProgramStringEXT = (PFNGLNAMEDPROGRAMSTRINGEXTPROC)glfwGetProcAddress("glNamedProgramStringEXT");
  glNamedProgramLocalParameter4dEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameter4dEXT");
  glNamedProgramLocalParameter4dvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4DVEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameter4dvEXT");
  glNamedProgramLocalParameter4fEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameter4fEXT");
  glNamedProgramLocalParameter4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETER4FVEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameter4fvEXT");
  glGetNamedProgramLocalParameterdvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERDVEXTPROC)glfwGetProcAddress("glGetNamedProgramLocalParameterdvEXT");
  glGetNamedProgramLocalParameterfvEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERFVEXTPROC)glfwGetProcAddress("glGetNamedProgramLocalParameterfvEXT");
  glGetNamedProgramivEXT = (PFNGLGETNAMEDPROGRAMIVEXTPROC)glfwGetProcAddress("glGetNamedProgramivEXT");
  glGetNamedProgramStringEXT = (PFNGLGETNAMEDPROGRAMSTRINGEXTPROC)glfwGetProcAddress("glGetNamedProgramStringEXT");
  glNamedProgramLocalParameters4fvEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERS4FVEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameters4fvEXT");
  glNamedProgramLocalParameterI4iEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameterI4iEXT");
  glNamedProgramLocalParameterI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4IVEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameterI4ivEXT");
  glNamedProgramLocalParametersI4ivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4IVEXTPROC)glfwGetProcAddress("glNamedProgramLocalParametersI4ivEXT");
  glNamedProgramLocalParameterI4uiEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameterI4uiEXT");
  glNamedProgramLocalParameterI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERI4UIVEXTPROC)glfwGetProcAddress("glNamedProgramLocalParameterI4uivEXT");
  glNamedProgramLocalParametersI4uivEXT = (PFNGLNAMEDPROGRAMLOCALPARAMETERSI4UIVEXTPROC)glfwGetProcAddress("glNamedProgramLocalParametersI4uivEXT");
  glGetNamedProgramLocalParameterIivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIIVEXTPROC)glfwGetProcAddress("glGetNamedProgramLocalParameterIivEXT");
  glGetNamedProgramLocalParameterIuivEXT = (PFNGLGETNAMEDPROGRAMLOCALPARAMETERIUIVEXTPROC)glfwGetProcAddress("glGetNamedProgramLocalParameterIuivEXT");
  glTextureParameterIivEXT = (PFNGLTEXTUREPARAMETERIIVEXTPROC)glfwGetProcAddress("glTextureParameterIivEXT");
  glTextureParameterIuivEXT = (PFNGLTEXTUREPARAMETERIUIVEXTPROC)glfwGetProcAddress("glTextureParameterIuivEXT");
  glGetTextureParameterIivEXT = (PFNGLGETTEXTUREPARAMETERIIVEXTPROC)glfwGetProcAddress("glGetTextureParameterIivEXT");
  glGetTextureParameterIuivEXT = (PFNGLGETTEXTUREPARAMETERIUIVEXTPROC)glfwGetProcAddress("glGetTextureParameterIuivEXT");
  glMultiTexParameterIivEXT = (PFNGLMULTITEXPARAMETERIIVEXTPROC)glfwGetProcAddress("glMultiTexParameterIivEXT");
  glMultiTexParameterIuivEXT = (PFNGLMULTITEXPARAMETERIUIVEXTPROC)glfwGetProcAddress("glMultiTexParameterIuivEXT");
  glGetMultiTexParameterIivEXT = (PFNGLGETMULTITEXPARAMETERIIVEXTPROC)glfwGetProcAddress("glGetMultiTexParameterIivEXT");
  glGetMultiTexParameterIuivEXT = (PFNGLGETMULTITEXPARAMETERIUIVEXTPROC)glfwGetProcAddress("glGetMultiTexParameterIuivEXT");
  glProgramUniform1fEXT = (PFNGLPROGRAMUNIFORM1FEXTPROC)glfwGetProcAddress("glProgramUniform1fEXT");
  glProgramUniform2fEXT = (PFNGLPROGRAMUNIFORM2FEXTPROC)glfwGetProcAddress("glProgramUniform2fEXT");
  glProgramUniform3fEXT = (PFNGLPROGRAMUNIFORM3FEXTPROC)glfwGetProcAddress("glProgramUniform3fEXT");
  glProgramUniform4fEXT = (PFNGLPROGRAMUNIFORM4FEXTPROC)glfwGetProcAddress("glProgramUniform4fEXT");
  glProgramUniform1iEXT = (PFNGLPROGRAMUNIFORM1IEXTPROC)glfwGetProcAddress("glProgramUniform1iEXT");
  glProgramUniform2iEXT = (PFNGLPROGRAMUNIFORM2IEXTPROC)glfwGetProcAddress("glProgramUniform2iEXT");
  glProgramUniform3iEXT = (PFNGLPROGRAMUNIFORM3IEXTPROC)glfwGetProcAddress("glProgramUniform3iEXT");
  glProgramUniform4iEXT = (PFNGLPROGRAMUNIFORM4IEXTPROC)glfwGetProcAddress("glProgramUniform4iEXT");
  glProgramUniform1fvEXT = (PFNGLPROGRAMUNIFORM1FVEXTPROC)glfwGetProcAddress("glProgramUniform1fvEXT");
  glProgramUniform2fvEXT = (PFNGLPROGRAMUNIFORM2FVEXTPROC)glfwGetProcAddress("glProgramUniform2fvEXT");
  glProgramUniform3fvEXT = (PFNGLPROGRAMUNIFORM3FVEXTPROC)glfwGetProcAddress("glProgramUniform3fvEXT");
  glProgramUniform4fvEXT = (PFNGLPROGRAMUNIFORM4FVEXTPROC)glfwGetProcAddress("glProgramUniform4fvEXT");
  glProgramUniform1ivEXT = (PFNGLPROGRAMUNIFORM1IVEXTPROC)glfwGetProcAddress("glProgramUniform1ivEXT");
  glProgramUniform2ivEXT = (PFNGLPROGRAMUNIFORM2IVEXTPROC)glfwGetProcAddress("glProgramUniform2ivEXT");
  glProgramUniform3ivEXT = (PFNGLPROGRAMUNIFORM3IVEXTPROC)glfwGetProcAddress("glProgramUniform3ivEXT");
  glProgramUniform4ivEXT = (PFNGLPROGRAMUNIFORM4IVEXTPROC)glfwGetProcAddress("glProgramUniform4ivEXT");
  glProgramUniformMatrix2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix2fvEXT");
  glProgramUniformMatrix3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix3fvEXT");
  glProgramUniformMatrix4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix4fvEXT");
  glProgramUniformMatrix2x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix2x3fvEXT");
  glProgramUniformMatrix3x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix3x2fvEXT");
  glProgramUniformMatrix2x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix2x4fvEXT");
  glProgramUniformMatrix4x2fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix4x2fvEXT");
  glProgramUniformMatrix3x4fvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix3x4fvEXT");
  glProgramUniformMatrix4x3fvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3FVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix4x3fvEXT");
  glProgramUniform1uiEXT = (PFNGLPROGRAMUNIFORM1UIEXTPROC)glfwGetProcAddress("glProgramUniform1uiEXT");
  glProgramUniform2uiEXT = (PFNGLPROGRAMUNIFORM2UIEXTPROC)glfwGetProcAddress("glProgramUniform2uiEXT");
  glProgramUniform3uiEXT = (PFNGLPROGRAMUNIFORM3UIEXTPROC)glfwGetProcAddress("glProgramUniform3uiEXT");
  glProgramUniform4uiEXT = (PFNGLPROGRAMUNIFORM4UIEXTPROC)glfwGetProcAddress("glProgramUniform4uiEXT");
  glProgramUniform1uivEXT = (PFNGLPROGRAMUNIFORM1UIVEXTPROC)glfwGetProcAddress("glProgramUniform1uivEXT");
  glProgramUniform2uivEXT = (PFNGLPROGRAMUNIFORM2UIVEXTPROC)glfwGetProcAddress("glProgramUniform2uivEXT");
  glProgramUniform3uivEXT = (PFNGLPROGRAMUNIFORM3UIVEXTPROC)glfwGetProcAddress("glProgramUniform3uivEXT");
  glProgramUniform4uivEXT = (PFNGLPROGRAMUNIFORM4UIVEXTPROC)glfwGetProcAddress("glProgramUniform4uivEXT");
  glNamedBufferDataEXT = (PFNGLNAMEDBUFFERDATAEXTPROC)glfwGetProcAddress("glNamedBufferDataEXT");
  glNamedBufferSubDataEXT = (PFNGLNAMEDBUFFERSUBDATAEXTPROC)glfwGetProcAddress("glNamedBufferSubDataEXT");
  glMapNamedBufferEXT = (PFNGLMAPNAMEDBUFFEREXTPROC)glfwGetProcAddress("glMapNamedBufferEXT");
  glUnmapNamedBufferEXT = (PFNGLUNMAPNAMEDBUFFEREXTPROC)glfwGetProcAddress("glUnmapNamedBufferEXT");
  glMapNamedBufferRangeEXT = (PFNGLMAPNAMEDBUFFERRANGEEXTPROC)glfwGetProcAddress("glMapNamedBufferRangeEXT");
  glFlushMappedNamedBufferRangeEXT = (PFNGLFLUSHMAPPEDNAMEDBUFFERRANGEEXTPROC)glfwGetProcAddress("glFlushMappedNamedBufferRangeEXT");
  glNamedCopyBufferSubDataEXT = (PFNGLNAMEDCOPYBUFFERSUBDATAEXTPROC)glfwGetProcAddress("glNamedCopyBufferSubDataEXT");
  glGetNamedBufferParameterivEXT = (PFNGLGETNAMEDBUFFERPARAMETERIVEXTPROC)glfwGetProcAddress("glGetNamedBufferParameterivEXT");
  glGetNamedBufferPointervEXT = (PFNGLGETNAMEDBUFFERPOINTERVEXTPROC)glfwGetProcAddress("glGetNamedBufferPointervEXT");
  glGetNamedBufferSubDataEXT = (PFNGLGETNAMEDBUFFERSUBDATAEXTPROC)glfwGetProcAddress("glGetNamedBufferSubDataEXT");
  glTextureBufferEXT = (PFNGLTEXTUREBUFFEREXTPROC)glfwGetProcAddress("glTextureBufferEXT");
  glMultiTexBufferEXT = (PFNGLMULTITEXBUFFEREXTPROC)glfwGetProcAddress("glMultiTexBufferEXT");
  glNamedRenderbufferStorageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEEXTPROC)glfwGetProcAddress("glNamedRenderbufferStorageEXT");
  glGetNamedRenderbufferParameterivEXT = (PFNGLGETNAMEDRENDERBUFFERPARAMETERIVEXTPROC)glfwGetProcAddress("glGetNamedRenderbufferParameterivEXT");
  glCheckNamedFramebufferStatusEXT = (PFNGLCHECKNAMEDFRAMEBUFFERSTATUSEXTPROC)glfwGetProcAddress("glCheckNamedFramebufferStatusEXT");
  glNamedFramebufferTexture1DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE1DEXTPROC)glfwGetProcAddress("glNamedFramebufferTexture1DEXT");
  glNamedFramebufferTexture2DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE2DEXTPROC)glfwGetProcAddress("glNamedFramebufferTexture2DEXT");
  glNamedFramebufferTexture3DEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURE3DEXTPROC)glfwGetProcAddress("glNamedFramebufferTexture3DEXT");
  glNamedFramebufferRenderbufferEXT = (PFNGLNAMEDFRAMEBUFFERRENDERBUFFEREXTPROC)glfwGetProcAddress("glNamedFramebufferRenderbufferEXT");
  glGetNamedFramebufferAttachmentParameterivEXT = (PFNGLGETNAMEDFRAMEBUFFERATTACHMENTPARAMETERIVEXTPROC)glfwGetProcAddress("glGetNamedFramebufferAttachmentParameterivEXT");
  glGenerateTextureMipmapEXT = (PFNGLGENERATETEXTUREMIPMAPEXTPROC)glfwGetProcAddress("glGenerateTextureMipmapEXT");
  glGenerateMultiTexMipmapEXT = (PFNGLGENERATEMULTITEXMIPMAPEXTPROC)glfwGetProcAddress("glGenerateMultiTexMipmapEXT");
  glFramebufferDrawBufferEXT = (PFNGLFRAMEBUFFERDRAWBUFFEREXTPROC)glfwGetProcAddress("glFramebufferDrawBufferEXT");
  glFramebufferDrawBuffersEXT = (PFNGLFRAMEBUFFERDRAWBUFFERSEXTPROC)glfwGetProcAddress("glFramebufferDrawBuffersEXT");
  glFramebufferReadBufferEXT = (PFNGLFRAMEBUFFERREADBUFFEREXTPROC)glfwGetProcAddress("glFramebufferReadBufferEXT");
  glGetFramebufferParameterivEXT = (PFNGLGETFRAMEBUFFERPARAMETERIVEXTPROC)glfwGetProcAddress("glGetFramebufferParameterivEXT");
  glNamedRenderbufferStorageMultisampleEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLEEXTPROC)glfwGetProcAddress("glNamedRenderbufferStorageMultisampleEXT");
  glNamedRenderbufferStorageMultisampleCoverageEXT = (PFNGLNAMEDRENDERBUFFERSTORAGEMULTISAMPLECOVERAGEEXTPROC)glfwGetProcAddress("glNamedRenderbufferStorageMultisampleCoverageEXT");
  glNamedFramebufferTextureEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREEXTPROC)glfwGetProcAddress("glNamedFramebufferTextureEXT");
  glNamedFramebufferTextureLayerEXT = (PFNGLNAMEDFRAMEBUFFERTEXTURELAYEREXTPROC)glfwGetProcAddress("glNamedFramebufferTextureLayerEXT");
  glNamedFramebufferTextureFaceEXT = (PFNGLNAMEDFRAMEBUFFERTEXTUREFACEEXTPROC)glfwGetProcAddress("glNamedFramebufferTextureFaceEXT");
  glTextureRenderbufferEXT = (PFNGLTEXTURERENDERBUFFEREXTPROC)glfwGetProcAddress("glTextureRenderbufferEXT");
  glMultiTexRenderbufferEXT = (PFNGLMULTITEXRENDERBUFFEREXTPROC)glfwGetProcAddress("glMultiTexRenderbufferEXT");
  glProgramUniform1dEXT = (PFNGLPROGRAMUNIFORM1DEXTPROC)glfwGetProcAddress("glProgramUniform1dEXT");
  glProgramUniform2dEXT = (PFNGLPROGRAMUNIFORM2DEXTPROC)glfwGetProcAddress("glProgramUniform2dEXT");
  glProgramUniform3dEXT = (PFNGLPROGRAMUNIFORM3DEXTPROC)glfwGetProcAddress("glProgramUniform3dEXT");
  glProgramUniform4dEXT = (PFNGLPROGRAMUNIFORM4DEXTPROC)glfwGetProcAddress("glProgramUniform4dEXT");
  glProgramUniform1dvEXT = (PFNGLPROGRAMUNIFORM1DVEXTPROC)glfwGetProcAddress("glProgramUniform1dvEXT");
  glProgramUniform2dvEXT = (PFNGLPROGRAMUNIFORM2DVEXTPROC)glfwGetProcAddress("glProgramUniform2dvEXT");
  glProgramUniform3dvEXT = (PFNGLPROGRAMUNIFORM3DVEXTPROC)glfwGetProcAddress("glProgramUniform3dvEXT");
  glProgramUniform4dvEXT = (PFNGLPROGRAMUNIFORM4DVEXTPROC)glfwGetProcAddress("glProgramUniform4dvEXT");
  glProgramUniformMatrix2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix2dvEXT");
  glProgramUniformMatrix3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix3dvEXT");
  glProgramUniformMatrix4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix4dvEXT");
  glProgramUniformMatrix2x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X3DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix2x3dvEXT");
  glProgramUniformMatrix2x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX2X4DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix2x4dvEXT");
  glProgramUniformMatrix3x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X2DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix3x2dvEXT");
  glProgramUniformMatrix3x4dvEXT = (PFNGLPROGRAMUNIFORMMATRIX3X4DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix3x4dvEXT");
  glProgramUniformMatrix4x2dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X2DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix4x2dvEXT");
  glProgramUniformMatrix4x3dvEXT = (PFNGLPROGRAMUNIFORMMATRIX4X3DVEXTPROC)glfwGetProcAddress("glProgramUniformMatrix4x3dvEXT");
  glGetMultisamplefvNV = (PFNGLGETMULTISAMPLEFVNVPROC)glfwGetProcAddress("glGetMultisamplefvNV");
  glSampleMaskIndexedNV = (PFNGLSAMPLEMASKINDEXEDNVPROC)glfwGetProcAddress("glSampleMaskIndexedNV");
  glTexRenderbufferNV = (PFNGLTEXRENDERBUFFERNVPROC)glfwGetProcAddress("glTexRenderbufferNV");
  glBindTransformFeedbackNV = (PFNGLBINDTRANSFORMFEEDBACKNVPROC)glfwGetProcAddress("glBindTransformFeedbackNV");
  glDeleteTransformFeedbacksNV = (PFNGLDELETETRANSFORMFEEDBACKSNVPROC)glfwGetProcAddress("glDeleteTransformFeedbacksNV");
  glGenTransformFeedbacksNV = (PFNGLGENTRANSFORMFEEDBACKSNVPROC)glfwGetProcAddress("glGenTransformFeedbacksNV");
  glIsTransformFeedbackNV = (PFNGLISTRANSFORMFEEDBACKNVPROC)glfwGetProcAddress("glIsTransformFeedbackNV");
  glPauseTransformFeedbackNV = (PFNGLPAUSETRANSFORMFEEDBACKNVPROC)glfwGetProcAddress("glPauseTransformFeedbackNV");
  glResumeTransformFeedbackNV = (PFNGLRESUMETRANSFORMFEEDBACKNVPROC)glfwGetProcAddress("glResumeTransformFeedbackNV");
  glDrawTransformFeedbackNV = (PFNGLDRAWTRANSFORMFEEDBACKNVPROC)glfwGetProcAddress("glDrawTransformFeedbackNV");
  glGetPerfMonitorGroupsAMD = (PFNGLGETPERFMONITORGROUPSAMDPROC)glfwGetProcAddress("glGetPerfMonitorGroupsAMD");
  glGetPerfMonitorCountersAMD = (PFNGLGETPERFMONITORCOUNTERSAMDPROC)glfwGetProcAddress("glGetPerfMonitorCountersAMD");
  glGetPerfMonitorGroupStringAMD = (PFNGLGETPERFMONITORGROUPSTRINGAMDPROC)glfwGetProcAddress("glGetPerfMonitorGroupStringAMD");
  glGetPerfMonitorCounterStringAMD = (PFNGLGETPERFMONITORCOUNTERSTRINGAMDPROC)glfwGetProcAddress("glGetPerfMonitorCounterStringAMD");
  glGetPerfMonitorCounterInfoAMD = (PFNGLGETPERFMONITORCOUNTERINFOAMDPROC)glfwGetProcAddress("glGetPerfMonitorCounterInfoAMD");
  glGenPerfMonitorsAMD = (PFNGLGENPERFMONITORSAMDPROC)glfwGetProcAddress("glGenPerfMonitorsAMD");
  glDeletePerfMonitorsAMD = (PFNGLDELETEPERFMONITORSAMDPROC)glfwGetProcAddress("glDeletePerfMonitorsAMD");
  glSelectPerfMonitorCountersAMD = (PFNGLSELECTPERFMONITORCOUNTERSAMDPROC)glfwGetProcAddress("glSelectPerfMonitorCountersAMD");
  glBeginPerfMonitorAMD = (PFNGLBEGINPERFMONITORAMDPROC)glfwGetProcAddress("glBeginPerfMonitorAMD");
  glEndPerfMonitorAMD = (PFNGLENDPERFMONITORAMDPROC)glfwGetProcAddress("glEndPerfMonitorAMD");
  glGetPerfMonitorCounterDataAMD = (PFNGLGETPERFMONITORCOUNTERDATAAMDPROC)glfwGetProcAddress("glGetPerfMonitorCounterDataAMD");
  glTessellationFactorAMD = (PFNGLTESSELLATIONFACTORAMDPROC)glfwGetProcAddress("glTessellationFactorAMD");
  glTessellationModeAMD = (PFNGLTESSELLATIONMODEAMDPROC)glfwGetProcAddress("glTessellationModeAMD");
  glProvokingVertexEXT = (PFNGLPROVOKINGVERTEXEXTPROC)glfwGetProcAddress("glProvokingVertexEXT");
  glBlendFuncIndexedAMD = (PFNGLBLENDFUNCINDEXEDAMDPROC)glfwGetProcAddress("glBlendFuncIndexedAMD");
  glBlendFuncSeparateIndexedAMD = (PFNGLBLENDFUNCSEPARATEINDEXEDAMDPROC)glfwGetProcAddress("glBlendFuncSeparateIndexedAMD");
  glBlendEquationIndexedAMD = (PFNGLBLENDEQUATIONINDEXEDAMDPROC)glfwGetProcAddress("glBlendEquationIndexedAMD");
  glBlendEquationSeparateIndexedAMD = (PFNGLBLENDEQUATIONSEPARATEINDEXEDAMDPROC)glfwGetProcAddress("glBlendEquationSeparateIndexedAMD");
  glTextureRangeAPPLE = (PFNGLTEXTURERANGEAPPLEPROC)glfwGetProcAddress("glTextureRangeAPPLE");
  glGetTexParameterPointervAPPLE = (PFNGLGETTEXPARAMETERPOINTERVAPPLEPROC)glfwGetProcAddress("glGetTexParameterPointervAPPLE");
  glEnableVertexAttribAPPLE = (PFNGLENABLEVERTEXATTRIBAPPLEPROC)glfwGetProcAddress("glEnableVertexAttribAPPLE");
  glDisableVertexAttribAPPLE = (PFNGLDISABLEVERTEXATTRIBAPPLEPROC)glfwGetProcAddress("glDisableVertexAttribAPPLE");
  glIsVertexAttribEnabledAPPLE = (PFNGLISVERTEXATTRIBENABLEDAPPLEPROC)glfwGetProcAddress("glIsVertexAttribEnabledAPPLE");
  glMapVertexAttrib1dAPPLE = (PFNGLMAPVERTEXATTRIB1DAPPLEPROC)glfwGetProcAddress("glMapVertexAttrib1dAPPLE");
  glMapVertexAttrib1fAPPLE = (PFNGLMAPVERTEXATTRIB1FAPPLEPROC)glfwGetProcAddress("glMapVertexAttrib1fAPPLE");
  glMapVertexAttrib2dAPPLE = (PFNGLMAPVERTEXATTRIB2DAPPLEPROC)glfwGetProcAddress("glMapVertexAttrib2dAPPLE");
  glMapVertexAttrib2fAPPLE = (PFNGLMAPVERTEXATTRIB2FAPPLEPROC)glfwGetProcAddress("glMapVertexAttrib2fAPPLE");
  glObjectPurgeableAPPLE = (PFNGLOBJECTPURGEABLEAPPLEPROC)glfwGetProcAddress("glObjectPurgeableAPPLE");
  glObjectUnpurgeableAPPLE = (PFNGLOBJECTUNPURGEABLEAPPLEPROC)glfwGetProcAddress("glObjectUnpurgeableAPPLE");
  glGetObjectParameterivAPPLE = (PFNGLGETOBJECTPARAMETERIVAPPLEPROC)glfwGetProcAddress("glGetObjectParameterivAPPLE");
  glBeginVideoCaptureNV = (PFNGLBEGINVIDEOCAPTURENVPROC)glfwGetProcAddress("glBeginVideoCaptureNV");
  glBindVideoCaptureStreamBufferNV = (PFNGLBINDVIDEOCAPTURESTREAMBUFFERNVPROC)glfwGetProcAddress("glBindVideoCaptureStreamBufferNV");
  glBindVideoCaptureStreamTextureNV = (PFNGLBINDVIDEOCAPTURESTREAMTEXTURENVPROC)glfwGetProcAddress("glBindVideoCaptureStreamTextureNV");
  glEndVideoCaptureNV = (PFNGLENDVIDEOCAPTURENVPROC)glfwGetProcAddress("glEndVideoCaptureNV");
  glGetVideoCaptureivNV = (PFNGLGETVIDEOCAPTUREIVNVPROC)glfwGetProcAddress("glGetVideoCaptureivNV");
  glGetVideoCaptureStreamivNV = (PFNGLGETVIDEOCAPTURESTREAMIVNVPROC)glfwGetProcAddress("glGetVideoCaptureStreamivNV");
  glGetVideoCaptureStreamfvNV = (PFNGLGETVIDEOCAPTURESTREAMFVNVPROC)glfwGetProcAddress("glGetVideoCaptureStreamfvNV");
  glGetVideoCaptureStreamdvNV = (PFNGLGETVIDEOCAPTURESTREAMDVNVPROC)glfwGetProcAddress("glGetVideoCaptureStreamdvNV");
  glVideoCaptureNV = (PFNGLVIDEOCAPTURENVPROC)glfwGetProcAddress("glVideoCaptureNV");
  glVideoCaptureStreamParameterivNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERIVNVPROC)glfwGetProcAddress("glVideoCaptureStreamParameterivNV");
  glVideoCaptureStreamParameterfvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERFVNVPROC)glfwGetProcAddress("glVideoCaptureStreamParameterfvNV");
  glVideoCaptureStreamParameterdvNV = (PFNGLVIDEOCAPTURESTREAMPARAMETERDVNVPROC)glfwGetProcAddress("glVideoCaptureStreamParameterdvNV");
  glCopyImageSubDataNV = (PFNGLCOPYIMAGESUBDATANVPROC)glfwGetProcAddress("glCopyImageSubDataNV");
  glUseShaderProgramEXT = (PFNGLUSESHADERPROGRAMEXTPROC)glfwGetProcAddress("glUseShaderProgramEXT");
  glActiveProgramEXT = (PFNGLACTIVEPROGRAMEXTPROC)glfwGetProcAddress("glActiveProgramEXT");
  glCreateShaderProgramEXT = (PFNGLCREATESHADERPROGRAMEXTPROC)glfwGetProcAddress("glCreateShaderProgramEXT");
  glMakeBufferResidentNV = (PFNGLMAKEBUFFERRESIDENTNVPROC)glfwGetProcAddress("glMakeBufferResidentNV");
  glMakeBufferNonResidentNV = (PFNGLMAKEBUFFERNONRESIDENTNVPROC)glfwGetProcAddress("glMakeBufferNonResidentNV");
  glIsBufferResidentNV = (PFNGLISBUFFERRESIDENTNVPROC)glfwGetProcAddress("glIsBufferResidentNV");
  glMakeNamedBufferResidentNV = (PFNGLMAKENAMEDBUFFERRESIDENTNVPROC)glfwGetProcAddress("glMakeNamedBufferResidentNV");
  glMakeNamedBufferNonResidentNV = (PFNGLMAKENAMEDBUFFERNONRESIDENTNVPROC)glfwGetProcAddress("glMakeNamedBufferNonResidentNV");
  glIsNamedBufferResidentNV = (PFNGLISNAMEDBUFFERRESIDENTNVPROC)glfwGetProcAddress("glIsNamedBufferResidentNV");
  glGetBufferParameterui64vNV = (PFNGLGETBUFFERPARAMETERUI64VNVPROC)glfwGetProcAddress("glGetBufferParameterui64vNV");
  glGetNamedBufferParameterui64vNV = (PFNGLGETNAMEDBUFFERPARAMETERUI64VNVPROC)glfwGetProcAddress("glGetNamedBufferParameterui64vNV");
  glGetIntegerui64vNV = (PFNGLGETINTEGERUI64VNVPROC)glfwGetProcAddress("glGetIntegerui64vNV");
  glUniformui64NV = (PFNGLUNIFORMUI64NVPROC)glfwGetProcAddress("glUniformui64NV");
  glUniformui64vNV = (PFNGLUNIFORMUI64VNVPROC)glfwGetProcAddress("glUniformui64vNV");
  glGetUniformui64vNV = (PFNGLGETUNIFORMUI64VNVPROC)glfwGetProcAddress("glGetUniformui64vNV");
  glProgramUniformui64NV = (PFNGLPROGRAMUNIFORMUI64NVPROC)glfwGetProcAddress("glProgramUniformui64NV");
  glProgramUniformui64vNV = (PFNGLPROGRAMUNIFORMUI64VNVPROC)glfwGetProcAddress("glProgramUniformui64vNV");
  glBufferAddressRangeNV = (PFNGLBUFFERADDRESSRANGENVPROC)glfwGetProcAddress("glBufferAddressRangeNV");
  glVertexFormatNV = (PFNGLVERTEXFORMATNVPROC)glfwGetProcAddress("glVertexFormatNV");
  glNormalFormatNV = (PFNGLNORMALFORMATNVPROC)glfwGetProcAddress("glNormalFormatNV");
  glColorFormatNV = (PFNGLCOLORFORMATNVPROC)glfwGetProcAddress("glColorFormatNV");
  glIndexFormatNV = (PFNGLINDEXFORMATNVPROC)glfwGetProcAddress("glIndexFormatNV");
  glTexCoordFormatNV = (PFNGLTEXCOORDFORMATNVPROC)glfwGetProcAddress("glTexCoordFormatNV");
  glEdgeFlagFormatNV = (PFNGLEDGEFLAGFORMATNVPROC)glfwGetProcAddress("glEdgeFlagFormatNV");
  glSecondaryColorFormatNV = (PFNGLSECONDARYCOLORFORMATNVPROC)glfwGetProcAddress("glSecondaryColorFormatNV");
  glFogCoordFormatNV = (PFNGLFOGCOORDFORMATNVPROC)glfwGetProcAddress("glFogCoordFormatNV");
  glVertexAttribFormatNV = (PFNGLVERTEXATTRIBFORMATNVPROC)glfwGetProcAddress("glVertexAttribFormatNV");
  glVertexAttribIFormatNV = (PFNGLVERTEXATTRIBIFORMATNVPROC)glfwGetProcAddress("glVertexAttribIFormatNV");
  glGetIntegerui64i_vNV = (PFNGLGETINTEGERUI64I_VNVPROC)glfwGetProcAddress("glGetIntegerui64i_vNV");
  glTextureBarrierNV = (PFNGLTEXTUREBARRIERNVPROC)glfwGetProcAddress("glTextureBarrierNV");
  glBindImageTextureEXT = (PFNGLBINDIMAGETEXTUREEXTPROC)glfwGetProcAddress("glBindImageTextureEXT");
  glMemoryBarrierEXT = (PFNGLMEMORYBARRIEREXTPROC)glfwGetProcAddress("glMemoryBarrierEXT");
  glVertexAttribL1dEXT = (PFNGLVERTEXATTRIBL1DEXTPROC)glfwGetProcAddress("glVertexAttribL1dEXT");
  glVertexAttribL2dEXT = (PFNGLVERTEXATTRIBL2DEXTPROC)glfwGetProcAddress("glVertexAttribL2dEXT");
  glVertexAttribL3dEXT = (PFNGLVERTEXATTRIBL3DEXTPROC)glfwGetProcAddress("glVertexAttribL3dEXT");
  glVertexAttribL4dEXT = (PFNGLVERTEXATTRIBL4DEXTPROC)glfwGetProcAddress("glVertexAttribL4dEXT");
  glVertexAttribL1dvEXT = (PFNGLVERTEXATTRIBL1DVEXTPROC)glfwGetProcAddress("glVertexAttribL1dvEXT");
  glVertexAttribL2dvEXT = (PFNGLVERTEXATTRIBL2DVEXTPROC)glfwGetProcAddress("glVertexAttribL2dvEXT");
  glVertexAttribL3dvEXT = (PFNGLVERTEXATTRIBL3DVEXTPROC)glfwGetProcAddress("glVertexAttribL3dvEXT");
  glVertexAttribL4dvEXT = (PFNGLVERTEXATTRIBL4DVEXTPROC)glfwGetProcAddress("glVertexAttribL4dvEXT");
  glVertexAttribLPointerEXT = (PFNGLVERTEXATTRIBLPOINTEREXTPROC)glfwGetProcAddress("glVertexAttribLPointerEXT");
  glGetVertexAttribLdvEXT = (PFNGLGETVERTEXATTRIBLDVEXTPROC)glfwGetProcAddress("glGetVertexAttribLdvEXT");
  glVertexArrayVertexAttribLOffsetEXT = (PFNGLVERTEXARRAYVERTEXATTRIBLOFFSETEXTPROC)glfwGetProcAddress("glVertexArrayVertexAttribLOffsetEXT");
  glProgramSubroutineParametersuivNV = (PFNGLPROGRAMSUBROUTINEPARAMETERSUIVNVPROC)glfwGetProcAddress("glProgramSubroutineParametersuivNV");
  glGetProgramSubroutineParameteruivNV = (PFNGLGETPROGRAMSUBROUTINEPARAMETERUIVNVPROC)glfwGetProcAddress("glGetProgramSubroutineParameteruivNV");
  glUniform1i64NV = (PFNGLUNIFORM1I64NVPROC)glfwGetProcAddress("glUniform1i64NV");
  glUniform2i64NV = (PFNGLUNIFORM2I64NVPROC)glfwGetProcAddress("glUniform2i64NV");
  glUniform3i64NV = (PFNGLUNIFORM3I64NVPROC)glfwGetProcAddress("glUniform3i64NV");
  glUniform4i64NV = (PFNGLUNIFORM4I64NVPROC)glfwGetProcAddress("glUniform4i64NV");
  glUniform1i64vNV = (PFNGLUNIFORM1I64VNVPROC)glfwGetProcAddress("glUniform1i64vNV");
  glUniform2i64vNV = (PFNGLUNIFORM2I64VNVPROC)glfwGetProcAddress("glUniform2i64vNV");
  glUniform3i64vNV = (PFNGLUNIFORM3I64VNVPROC)glfwGetProcAddress("glUniform3i64vNV");
  glUniform4i64vNV = (PFNGLUNIFORM4I64VNVPROC)glfwGetProcAddress("glUniform4i64vNV");
  glUniform1ui64NV = (PFNGLUNIFORM1UI64NVPROC)glfwGetProcAddress("glUniform1ui64NV");
  glUniform2ui64NV = (PFNGLUNIFORM2UI64NVPROC)glfwGetProcAddress("glUniform2ui64NV");
  glUniform3ui64NV = (PFNGLUNIFORM3UI64NVPROC)glfwGetProcAddress("glUniform3ui64NV");
  glUniform4ui64NV = (PFNGLUNIFORM4UI64NVPROC)glfwGetProcAddress("glUniform4ui64NV");
  glUniform1ui64vNV = (PFNGLUNIFORM1UI64VNVPROC)glfwGetProcAddress("glUniform1ui64vNV");
  glUniform2ui64vNV = (PFNGLUNIFORM2UI64VNVPROC)glfwGetProcAddress("glUniform2ui64vNV");
  glUniform3ui64vNV = (PFNGLUNIFORM3UI64VNVPROC)glfwGetProcAddress("glUniform3ui64vNV");
  glUniform4ui64vNV = (PFNGLUNIFORM4UI64VNVPROC)glfwGetProcAddress("glUniform4ui64vNV");
  glGetUniformi64vNV = (PFNGLGETUNIFORMI64VNVPROC)glfwGetProcAddress("glGetUniformi64vNV");
  glProgramUniform1i64NV = (PFNGLPROGRAMUNIFORM1I64NVPROC)glfwGetProcAddress("glProgramUniform1i64NV");
  glProgramUniform2i64NV = (PFNGLPROGRAMUNIFORM2I64NVPROC)glfwGetProcAddress("glProgramUniform2i64NV");
  glProgramUniform3i64NV = (PFNGLPROGRAMUNIFORM3I64NVPROC)glfwGetProcAddress("glProgramUniform3i64NV");
  glProgramUniform4i64NV = (PFNGLPROGRAMUNIFORM4I64NVPROC)glfwGetProcAddress("glProgramUniform4i64NV");
  glProgramUniform1i64vNV = (PFNGLPROGRAMUNIFORM1I64VNVPROC)glfwGetProcAddress("glProgramUniform1i64vNV");
  glProgramUniform2i64vNV = (PFNGLPROGRAMUNIFORM2I64VNVPROC)glfwGetProcAddress("glProgramUniform2i64vNV");
  glProgramUniform3i64vNV = (PFNGLPROGRAMUNIFORM3I64VNVPROC)glfwGetProcAddress("glProgramUniform3i64vNV");
  glProgramUniform4i64vNV = (PFNGLPROGRAMUNIFORM4I64VNVPROC)glfwGetProcAddress("glProgramUniform4i64vNV");
  glProgramUniform1ui64NV = (PFNGLPROGRAMUNIFORM1UI64NVPROC)glfwGetProcAddress("glProgramUniform1ui64NV");
  glProgramUniform2ui64NV = (PFNGLPROGRAMUNIFORM2UI64NVPROC)glfwGetProcAddress("glProgramUniform2ui64NV");
  glProgramUniform3ui64NV = (PFNGLPROGRAMUNIFORM3UI64NVPROC)glfwGetProcAddress("glProgramUniform3ui64NV");
  glProgramUniform4ui64NV = (PFNGLPROGRAMUNIFORM4UI64NVPROC)glfwGetProcAddress("glProgramUniform4ui64NV");
  glProgramUniform1ui64vNV = (PFNGLPROGRAMUNIFORM1UI64VNVPROC)glfwGetProcAddress("glProgramUniform1ui64vNV");
  glProgramUniform2ui64vNV = (PFNGLPROGRAMUNIFORM2UI64VNVPROC)glfwGetProcAddress("glProgramUniform2ui64vNV");
  glProgramUniform3ui64vNV = (PFNGLPROGRAMUNIFORM3UI64VNVPROC)glfwGetProcAddress("glProgramUniform3ui64vNV");
  glProgramUniform4ui64vNV = (PFNGLPROGRAMUNIFORM4UI64VNVPROC)glfwGetProcAddress("glProgramUniform4ui64vNV");
  glVertexAttribL1i64NV = (PFNGLVERTEXATTRIBL1I64NVPROC)glfwGetProcAddress("glVertexAttribL1i64NV");
  glVertexAttribL2i64NV = (PFNGLVERTEXATTRIBL2I64NVPROC)glfwGetProcAddress("glVertexAttribL2i64NV");
  glVertexAttribL3i64NV = (PFNGLVERTEXATTRIBL3I64NVPROC)glfwGetProcAddress("glVertexAttribL3i64NV");
  glVertexAttribL4i64NV = (PFNGLVERTEXATTRIBL4I64NVPROC)glfwGetProcAddress("glVertexAttribL4i64NV");
  glVertexAttribL1i64vNV = (PFNGLVERTEXATTRIBL1I64VNVPROC)glfwGetProcAddress("glVertexAttribL1i64vNV");
  glVertexAttribL2i64vNV = (PFNGLVERTEXATTRIBL2I64VNVPROC)glfwGetProcAddress("glVertexAttribL2i64vNV");
  glVertexAttribL3i64vNV = (PFNGLVERTEXATTRIBL3I64VNVPROC)glfwGetProcAddress("glVertexAttribL3i64vNV");
  glVertexAttribL4i64vNV = (PFNGLVERTEXATTRIBL4I64VNVPROC)glfwGetProcAddress("glVertexAttribL4i64vNV");
  glVertexAttribL1ui64NV = (PFNGLVERTEXATTRIBL1UI64NVPROC)glfwGetProcAddress("glVertexAttribL1ui64NV");
  glVertexAttribL2ui64NV = (PFNGLVERTEXATTRIBL2UI64NVPROC)glfwGetProcAddress("glVertexAttribL2ui64NV");
  glVertexAttribL3ui64NV = (PFNGLVERTEXATTRIBL3UI64NVPROC)glfwGetProcAddress("glVertexAttribL3ui64NV");
  glVertexAttribL4ui64NV = (PFNGLVERTEXATTRIBL4UI64NVPROC)glfwGetProcAddress("glVertexAttribL4ui64NV");
  glVertexAttribL1ui64vNV = (PFNGLVERTEXATTRIBL1UI64VNVPROC)glfwGetProcAddress("glVertexAttribL1ui64vNV");
  glVertexAttribL2ui64vNV = (PFNGLVERTEXATTRIBL2UI64VNVPROC)glfwGetProcAddress("glVertexAttribL2ui64vNV");
  glVertexAttribL3ui64vNV = (PFNGLVERTEXATTRIBL3UI64VNVPROC)glfwGetProcAddress("glVertexAttribL3ui64vNV");
  glVertexAttribL4ui64vNV = (PFNGLVERTEXATTRIBL4UI64VNVPROC)glfwGetProcAddress("glVertexAttribL4ui64vNV");
  glGetVertexAttribLi64vNV = (PFNGLGETVERTEXATTRIBLI64VNVPROC)glfwGetProcAddress("glGetVertexAttribLi64vNV");
  glGetVertexAttribLui64vNV = (PFNGLGETVERTEXATTRIBLUI64VNVPROC)glfwGetProcAddress("glGetVertexAttribLui64vNV");
  glVertexAttribLFormatNV = (PFNGLVERTEXATTRIBLFORMATNVPROC)glfwGetProcAddress("glVertexAttribLFormatNV");
  glGenNamesAMD = (PFNGLGENNAMESAMDPROC)glfwGetProcAddress("glGenNamesAMD");
  glDeleteNamesAMD = (PFNGLDELETENAMESAMDPROC)glfwGetProcAddress("glDeleteNamesAMD");
  glIsNameAMD = (PFNGLISNAMEAMDPROC)glfwGetProcAddress("glIsNameAMD");
  glDebugMessageEnableAMD = (PFNGLDEBUGMESSAGEENABLEAMDPROC)glfwGetProcAddress("glDebugMessageEnableAMD");
  glDebugMessageInsertAMD = (PFNGLDEBUGMESSAGEINSERTAMDPROC)glfwGetProcAddress("glDebugMessageInsertAMD");
  glDebugMessageCallbackAMD = (PFNGLDEBUGMESSAGECALLBACKAMDPROC)glfwGetProcAddress("glDebugMessageCallbackAMD");
  glGetDebugMessageLogAMD = (PFNGLGETDEBUGMESSAGELOGAMDPROC)glfwGetProcAddress("glGetDebugMessageLogAMD");
  glVDPAUInitNV = (PFNGLVDPAUINITNVPROC)glfwGetProcAddress("glVDPAUInitNV");
  glVDPAUFiniNV = (PFNGLVDPAUFININVPROC)glfwGetProcAddress("glVDPAUFiniNV");
  glVDPAURegisterVideoSurfaceNV = (PFNGLVDPAUREGISTERVIDEOSURFACENVPROC)glfwGetProcAddress("glVDPAURegisterVideoSurfaceNV");
  glVDPAURegisterOutputSurfaceNV = (PFNGLVDPAUREGISTEROUTPUTSURFACENVPROC)glfwGetProcAddress("glVDPAURegisterOutputSurfaceNV");
  glVDPAUIsSurfaceNV = (PFNGLVDPAUISSURFACENVPROC)glfwGetProcAddress("glVDPAUIsSurfaceNV");
  glVDPAUUnregisterSurfaceNV = (PFNGLVDPAUUNREGISTERSURFACENVPROC)glfwGetProcAddress("glVDPAUUnregisterSurfaceNV");
  glVDPAUGetSurfaceivNV = (PFNGLVDPAUGETSURFACEIVNVPROC)glfwGetProcAddress("glVDPAUGetSurfaceivNV");
  glVDPAUSurfaceAccessNV = (PFNGLVDPAUSURFACEACCESSNVPROC)glfwGetProcAddress("glVDPAUSurfaceAccessNV");
  glVDPAUMapSurfacesNV = (PFNGLVDPAUMAPSURFACESNVPROC)glfwGetProcAddress("glVDPAUMapSurfacesNV");
  glVDPAUUnmapSurfacesNV = (PFNGLVDPAUUNMAPSURFACESNVPROC)glfwGetProcAddress("glVDPAUUnmapSurfacesNV");
  glTexImage2DMultisampleCoverageNV = (PFNGLTEXIMAGE2DMULTISAMPLECOVERAGENVPROC)glfwGetProcAddress("glTexImage2DMultisampleCoverageNV");
  glTexImage3DMultisampleCoverageNV = (PFNGLTEXIMAGE3DMULTISAMPLECOVERAGENVPROC)glfwGetProcAddress("glTexImage3DMultisampleCoverageNV");
  glTextureImage2DMultisampleNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLENVPROC)glfwGetProcAddress("glTextureImage2DMultisampleNV");
  glTextureImage3DMultisampleNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLENVPROC)glfwGetProcAddress("glTextureImage3DMultisampleNV");
  glTextureImage2DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE2DMULTISAMPLECOVERAGENVPROC)glfwGetProcAddress("glTextureImage2DMultisampleCoverageNV");
  glTextureImage3DMultisampleCoverageNV = (PFNGLTEXTUREIMAGE3DMULTISAMPLECOVERAGENVPROC)glfwGetProcAddress("glTextureImage3DMultisampleCoverageNV");
  glSetMultisamplefvAMD = (PFNGLSETMULTISAMPLEFVAMDPROC)glfwGetProcAddress("glSetMultisamplefvAMD");
  glImportSyncEXT = (PFNGLIMPORTSYNCEXTPROC)glfwGetProcAddress("glImportSyncEXT");
  glMultiDrawArraysIndirectAMD = (PFNGLMULTIDRAWARRAYSINDIRECTAMDPROC)glfwGetProcAddress("glMultiDrawArraysIndirectAMD");
  glMultiDrawElementsIndirectAMD = (PFNGLMULTIDRAWELEMENTSINDIRECTAMDPROC)glfwGetProcAddress("glMultiDrawElementsIndirectAMD");
  glGenPathsNV = (PFNGLGENPATHSNVPROC)glfwGetProcAddress("glGenPathsNV");
  glDeletePathsNV = (PFNGLDELETEPATHSNVPROC)glfwGetProcAddress("glDeletePathsNV");
  glIsPathNV = (PFNGLISPATHNVPROC)glfwGetProcAddress("glIsPathNV");
  glPathCommandsNV = (PFNGLPATHCOMMANDSNVPROC)glfwGetProcAddress("glPathCommandsNV");
  glPathCoordsNV = (PFNGLPATHCOORDSNVPROC)glfwGetProcAddress("glPathCoordsNV");
  glPathSubCommandsNV = (PFNGLPATHSUBCOMMANDSNVPROC)glfwGetProcAddress("glPathSubCommandsNV");
  glPathSubCoordsNV = (PFNGLPATHSUBCOORDSNVPROC)glfwGetProcAddress("glPathSubCoordsNV");
  glPathStringNV = (PFNGLPATHSTRINGNVPROC)glfwGetProcAddress("glPathStringNV");
  glPathGlyphsNV = (PFNGLPATHGLYPHSNVPROC)glfwGetProcAddress("glPathGlyphsNV");
  glPathGlyphRangeNV = (PFNGLPATHGLYPHRANGENVPROC)glfwGetProcAddress("glPathGlyphRangeNV");
  glWeightPathsNV = (PFNGLWEIGHTPATHSNVPROC)glfwGetProcAddress("glWeightPathsNV");
  glCopyPathNV = (PFNGLCOPYPATHNVPROC)glfwGetProcAddress("glCopyPathNV");
  glInterpolatePathsNV = (PFNGLINTERPOLATEPATHSNVPROC)glfwGetProcAddress("glInterpolatePathsNV");
  glTransformPathNV = (PFNGLTRANSFORMPATHNVPROC)glfwGetProcAddress("glTransformPathNV");
  glPathParameterivNV = (PFNGLPATHPARAMETERIVNVPROC)glfwGetProcAddress("glPathParameterivNV");
  glPathParameteriNV = (PFNGLPATHPARAMETERINVPROC)glfwGetProcAddress("glPathParameteriNV");
  glPathParameterfvNV = (PFNGLPATHPARAMETERFVNVPROC)glfwGetProcAddress("glPathParameterfvNV");
  glPathParameterfNV = (PFNGLPATHPARAMETERFNVPROC)glfwGetProcAddress("glPathParameterfNV");
  glPathDashArrayNV = (PFNGLPATHDASHARRAYNVPROC)glfwGetProcAddress("glPathDashArrayNV");
  glPathStencilFuncNV = (PFNGLPATHSTENCILFUNCNVPROC)glfwGetProcAddress("glPathStencilFuncNV");
  glPathStencilDepthOffsetNV = (PFNGLPATHSTENCILDEPTHOFFSETNVPROC)glfwGetProcAddress("glPathStencilDepthOffsetNV");
  glStencilFillPathNV = (PFNGLSTENCILFILLPATHNVPROC)glfwGetProcAddress("glStencilFillPathNV");
  glStencilStrokePathNV = (PFNGLSTENCILSTROKEPATHNVPROC)glfwGetProcAddress("glStencilStrokePathNV");
  glStencilFillPathInstancedNV = (PFNGLSTENCILFILLPATHINSTANCEDNVPROC)glfwGetProcAddress("glStencilFillPathInstancedNV");
  glStencilStrokePathInstancedNV = (PFNGLSTENCILSTROKEPATHINSTANCEDNVPROC)glfwGetProcAddress("glStencilStrokePathInstancedNV");
  glPathCoverDepthFuncNV = (PFNGLPATHCOVERDEPTHFUNCNVPROC)glfwGetProcAddress("glPathCoverDepthFuncNV");
  glPathColorGenNV = (PFNGLPATHCOLORGENNVPROC)glfwGetProcAddress("glPathColorGenNV");
  glPathTexGenNV = (PFNGLPATHTEXGENNVPROC)glfwGetProcAddress("glPathTexGenNV");
  glPathFogGenNV = (PFNGLPATHFOGGENNVPROC)glfwGetProcAddress("glPathFogGenNV");
  glCoverFillPathNV = (PFNGLCOVERFILLPATHNVPROC)glfwGetProcAddress("glCoverFillPathNV");
  glCoverStrokePathNV = (PFNGLCOVERSTROKEPATHNVPROC)glfwGetProcAddress("glCoverStrokePathNV");
  glCoverFillPathInstancedNV = (PFNGLCOVERFILLPATHINSTANCEDNVPROC)glfwGetProcAddress("glCoverFillPathInstancedNV");
  glCoverStrokePathInstancedNV = (PFNGLCOVERSTROKEPATHINSTANCEDNVPROC)glfwGetProcAddress("glCoverStrokePathInstancedNV");
  glGetPathParameterivNV = (PFNGLGETPATHPARAMETERIVNVPROC)glfwGetProcAddress("glGetPathParameterivNV");
  glGetPathParameterfvNV = (PFNGLGETPATHPARAMETERFVNVPROC)glfwGetProcAddress("glGetPathParameterfvNV");
  glGetPathCommandsNV = (PFNGLGETPATHCOMMANDSNVPROC)glfwGetProcAddress("glGetPathCommandsNV");
  glGetPathCoordsNV = (PFNGLGETPATHCOORDSNVPROC)glfwGetProcAddress("glGetPathCoordsNV");
  glGetPathDashArrayNV = (PFNGLGETPATHDASHARRAYNVPROC)glfwGetProcAddress("glGetPathDashArrayNV");
  glGetPathMetricsNV = (PFNGLGETPATHMETRICSNVPROC)glfwGetProcAddress("glGetPathMetricsNV");
  glGetPathMetricRangeNV = (PFNGLGETPATHMETRICRANGENVPROC)glfwGetProcAddress("glGetPathMetricRangeNV");
  glGetPathSpacingNV = (PFNGLGETPATHSPACINGNVPROC)glfwGetProcAddress("glGetPathSpacingNV");
  glGetPathColorGenivNV = (PFNGLGETPATHCOLORGENIVNVPROC)glfwGetProcAddress("glGetPathColorGenivNV");
  glGetPathColorGenfvNV = (PFNGLGETPATHCOLORGENFVNVPROC)glfwGetProcAddress("glGetPathColorGenfvNV");
  glGetPathTexGenivNV = (PFNGLGETPATHTEXGENIVNVPROC)glfwGetProcAddress("glGetPathTexGenivNV");
  glGetPathTexGenfvNV = (PFNGLGETPATHTEXGENFVNVPROC)glfwGetProcAddress("glGetPathTexGenfvNV");
  glIsPointInFillPathNV = (PFNGLISPOINTINFILLPATHNVPROC)glfwGetProcAddress("glIsPointInFillPathNV");
  glIsPointInStrokePathNV = (PFNGLISPOINTINSTROKEPATHNVPROC)glfwGetProcAddress("glIsPointInStrokePathNV");
  glGetPathLengthNV = (PFNGLGETPATHLENGTHNVPROC)glfwGetProcAddress("glGetPathLengthNV");
  glPointAlongPathNV = (PFNGLPOINTALONGPATHNVPROC)glfwGetProcAddress("glPointAlongPathNV");
  glStencilOpValueAMD = (PFNGLSTENCILOPVALUEAMDPROC)glfwGetProcAddress("glStencilOpValueAMD");
  glGetTextureHandleNV = (PFNGLGETTEXTUREHANDLENVPROC)glfwGetProcAddress("glGetTextureHandleNV");
  glGetTextureSamplerHandleNV = (PFNGLGETTEXTURESAMPLERHANDLENVPROC)glfwGetProcAddress("glGetTextureSamplerHandleNV");
  glMakeTextureHandleResidentNV = (PFNGLMAKETEXTUREHANDLERESIDENTNVPROC)glfwGetProcAddress("glMakeTextureHandleResidentNV");
  glMakeTextureHandleNonResidentNV = (PFNGLMAKETEXTUREHANDLENONRESIDENTNVPROC)glfwGetProcAddress("glMakeTextureHandleNonResidentNV");
  glGetImageHandleNV = (PFNGLGETIMAGEHANDLENVPROC)glfwGetProcAddress("glGetImageHandleNV");
  glMakeImageHandleResidentNV = (PFNGLMAKEIMAGEHANDLERESIDENTNVPROC)glfwGetProcAddress("glMakeImageHandleResidentNV");
  glMakeImageHandleNonResidentNV = (PFNGLMAKEIMAGEHANDLENONRESIDENTNVPROC)glfwGetProcAddress("glMakeImageHandleNonResidentNV");
  glUniformHandleui64NV = (PFNGLUNIFORMHANDLEUI64NVPROC)glfwGetProcAddress("glUniformHandleui64NV");
  glUniformHandleui64vNV = (PFNGLUNIFORMHANDLEUI64VNVPROC)glfwGetProcAddress("glUniformHandleui64vNV");
  glProgramUniformHandleui64NV = (PFNGLPROGRAMUNIFORMHANDLEUI64NVPROC)glfwGetProcAddress("glProgramUniformHandleui64NV");
  glProgramUniformHandleui64vNV = (PFNGLPROGRAMUNIFORMHANDLEUI64VNVPROC)glfwGetProcAddress("glProgramUniformHandleui64vNV");
  glIsTextureHandleResidentNV = (PFNGLISTEXTUREHANDLERESIDENTNVPROC)glfwGetProcAddress("glIsTextureHandleResidentNV");
  glIsImageHandleResidentNV = (PFNGLISIMAGEHANDLERESIDENTNVPROC)glfwGetProcAddress("glIsImageHandleResidentNV");
  glBeginConditionalRenderNVX = (PFNGLBEGINCONDITIONALRENDERNVXPROC)glfwGetProcAddress("glBeginConditionalRenderNVX");
  glEndConditionalRenderNVX = (PFNGLENDCONDITIONALRENDERNVXPROC)glfwGetProcAddress("glEndConditionalRenderNVX");
  glTexStorageSparseAMD = (PFNGLTEXSTORAGESPARSEAMDPROC)glfwGetProcAddress("glTexStorageSparseAMD");
  glTextureStorageSparseAMD = (PFNGLTEXTURESTORAGESPARSEAMDPROC)glfwGetProcAddress("glTextureStorageSparseAMD");
  glSyncTextureINTEL = (PFNGLSYNCTEXTUREINTELPROC)glfwGetProcAddress("glSyncTextureINTEL");
  glUnmapTexture2DINTEL = (PFNGLUNMAPTEXTURE2DINTELPROC)glfwGetProcAddress("glUnmapTexture2DINTEL");
  glMapTexture2DINTEL = (PFNGLMAPTEXTURE2DINTELPROC)glfwGetProcAddress("glMapTexture2DINTEL");
  glDrawTextureNV = (PFNGLDRAWTEXTURENVPROC)glfwGetProcAddress("glDrawTextureNV");
}
#endif

/*!
** \brief ゲームグラフィックス特論の都合にもとづく初期化を行う.
**
**   Windows で OpenGL 1.2 以降の API を有効化する.
*/
void gg::ggInit()
{
#if defined(_WIN32)
  // OpenGL 1.2 以降の API を有効化する
  if (glCreateProgram == nullptr) initGLExtFunc();
#endif
}

/*!
** \brief OpenGL のエラーをチェックする.
**
**   OpenGL の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する.
**
**   \param msg エラー発生時に標準エラー出力に出力する文字列. nullptr なら何も出力しない.
*/
void gg::ggError(const char *msg)
{
  const GLenum error(glGetError());

  if (error != GL_NO_ERROR)
  {
    if (msg) std::cerr << msg << ": ";

    switch (error)
    {
    case GL_INVALID_ENUM:
      std::cerr << "An unacceptable value is specified for an enumerated argument" << std::endl;
      break;
    case GL_INVALID_VALUE:
      std::cerr << "A numeric argument is out of range" << std::endl;
      break;
    case GL_INVALID_OPERATION:
      std::cerr << "The specified operation is not allowed in the current state" << std::endl;
      break;
    case GL_OUT_OF_MEMORY:
      std::cerr << "There is not enough memory left to execute the command" << std::endl;
      break;
    case GL_INVALID_FRAMEBUFFER_OPERATION:
      std::cerr << "The specified operation is not allowed current frame buffer" << std::endl;
      break;
    default:
      std::cerr << "An OpenGL error has occured: " << std::hex << std::showbase << error << std::endl;
      break;
    }
  }
}

/*!
** \brief FBO のエラーをチェックする.
**
**   FBO の API を呼び出し直後に実行すればエラーのあるときにメッセージを表示する.
**
**   \param msg エラー発生時に標準エラー出力に出力する文字列. nullptr なら何も出力しない.
*/
void gg::ggFBOError(const char *msg)
{
  const GLenum status(glCheckFramebufferStatus(GL_FRAMEBUFFER));

  if (status != GL_FRAMEBUFFER_COMPLETE)
  {
    if (msg) std::cerr << msg << ": ";

    switch (status)
    {
    case GL_FRAMEBUFFER_UNSUPPORTED:
      std::cerr << "Unsupported framebuffer internal" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_MISSING_ATTACHMENT:
      std::cerr << "Framebuffer incomplete, missing attachment" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_ATTACHMENT:
      std::cerr << "Framebuffer incomplete, duplicate attachment" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_DRAW_BUFFER:
      std::cerr << "Framebuffer incomplete, missing draw buffer" << std::endl;
      break;
    case GL_FRAMEBUFFER_INCOMPLETE_READ_BUFFER:
      std::cerr << "Framebuffer incomplete, missing read buffer" << std::endl;
      break;
    default:
      std::cerr << "Programming error; will fail on all hardware: " << std::hex << std::showbase << status << std::endl;
      break;
    }
  }
}

/*!
** \brief 配列に格納された画像の内容を TGA ファイルに保存する.
**
**   \param sx 画像の幅.
**   \param sy 画像の高さ.
**   \param depth 画像の 1 画素のバイト数.
**   \param buffer 画像データ.
**   \param name ファイル名.
**   \return 保存に成功したら true.
*/
bool gg::ggSaveTga(GLsizei sx, GLsizei sy, unsigned int depth,
  const GLubyte *buffer, const char *name)
{
  // ファイルを開く
  std::ofstream file(name, std::ios::binary);

  // ファイルが開けなかったら戻る
  if (file.fail())
  {
    std::cerr << "Waring: Can't open file: " << name << std::endl;
    return false;
  }

  // 画像のヘッダ
  const unsigned char header[18] =
  {
    0,          // ID length
    0,          // Color map type (none)
    (unsigned char)((depth == 3) ? 2 : 3), // Image Type (2:RGB, 3:Grayscale)
    0, 0,       // Offset into the color map table
    0, 0,       // Number of color map entries
    0,          // Number of a color map entry bits per pixel
    0, 0,       // Horizontal image position
    0, 0,       // Vertical image position
    (unsigned char)(sx & 0xff),
    (unsigned char)(sx >> 8),
    (unsigned char)(sy & 0xff),
    (unsigned char)(sy >> 8),
    (unsigned char)(8 * depth),  // Pixel depth (bits per pixel)
    0           // Image descriptor
  };

  // ヘッダを書き込む
  file.write(reinterpret_cast<const char *>(header), sizeof header);

  // ヘッダの書き込みに失敗したら戻る
  if (file.bad())
  {
    std::cerr << "Waring: Can't write file header: " << name << std::endl;
    file.close();
    return 0;
  }

  // データを書き込む
  file.write(reinterpret_cast<const char *>(buffer), sx * sy * depth);

  // フッタを書き込む
  static const char footer[] = "\0\0\0\0\0\0\0\0TRUEVISION-XFILE.";
  file.write(footer, sizeof footer);

  // 書き込みチェック
  if (file.bad())
  {
    // 書き込みに失敗した
    std::cerr << "Waring: Can't write image data: " << name << std::endl;
  }

  // ファイルを閉じる
  file.close();

  return true;
}

/*!
** \brief カラーバッファの内容を TGA ファイルに保存する.
**
**   \param name 保存するファイル名.
**   \return 保存に成功したら true.
*/
bool gg::ggSaveColor(const char *name)
{
  // 現在のビューポートのサイズを得る
  GLint viewport[4];
  glGetIntegerv(GL_VIEWPORT, viewport);

  // ビューポートのサイズ分のメモリを確保する
  const size_t size(viewport[2] * viewport[3] * 3);
  std::vector<GLubyte> buffer(size);

  // 画面表示の完了を待つ
  glFinish();

  // カラーバッファを読み込む
  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3],
    GL_BGR, GL_UNSIGNED_BYTE, &buffer[0]);

  // 読み込んだデータをファイルに書き込む
  return ggSaveTga(viewport[2], viewport[3], 3, &buffer[0], name);
}

/*!
** \brief デプスバッファの内容を TGA ファイルに保存する.
**
**   \param name 保存するファイル名.
**   \return 保存に成功したら true.
*/
bool gg::ggSaveDepth(const char *name)
{
  // 現在のビューポートのサイズを得る
  GLint viewport[4];
  glGetIntegerv(GL_VIEWPORT, viewport);

  // ビューポートのサイズ分のメモリを確保する
  const size_t size(viewport[2] * viewport[3]);
  std::vector<GLubyte> buffer(size);

  // 画面表示の完了を待つ
  glFinish();

  // デプスバッファを読み込む
  glReadPixels(viewport[0], viewport[1], viewport[2], viewport[3],
    GL_DEPTH_COMPONENT, GL_UNSIGNED_BYTE, &buffer[0]);

  // 読み込んだデータをファイルに書き込む
  return ggSaveTga(viewport[2], viewport[3], 1, &buffer[0], name);
}

/*!
** \brief TGA ファイル (8/16/24/32bit) を読み込む.
**
**   \param name 読み込むファイル名.
**   \param width 読み込んだファイルの幅.
**   \param height 読み込んだファイルの高さ.
**   \param format 読み込んだファイルのフォーマット.
**   \return 読み込んだ画像データのポインタ (要 delete, 読み込めなければ nullptr)
*/
GLubyte *gg::ggLoadTga(const char *name, GLsizei *width, GLsizei *height, GLenum *format)
{
  // ファイルを開く
  std::ifstream file(name, std::ios::binary);

  // ファイルが開けなかったら戻る
  if (file.fail())
  {
    std::cerr << "Waring: Can't open file: " << name << std::endl;
    return nullptr;
  }

  // ヘッダを読み込む
  unsigned char header[18];
  file.read(reinterpret_cast<char *>(header), sizeof header);

  // ヘッダの読み込みに失敗したら戻る
  if (file.bad())
  {
    std::cerr << "Waring: Can't read file header: " << name << std::endl;
    file.close();
    return nullptr;
  }

  // 幅と高さ
  *width = header[13] << 8 | header[12];
  *height = header[15] << 8 | header[14];

  // 深度
  const size_t depth(header[16] / 8);
  switch (depth)
  {
  case 1:
    *format = GL_RED;
    break;
  case 2:
    *format = GL_RG;
    break;
  case 3:
    *format = GL_BGR;
    break;
  case 4:
    *format = GL_BGRA;
    break;
  default:
    // 取り扱えないフォーマットだったら戻る
    std::cerr << "Waring: Unusable format: " << depth << std::endl;
    file.close();
    return nullptr;
  }

  // データサイズ
  const size_t size(*width * *height * depth);

  // 読み込みに使うメモリを確保する
  GLubyte *const buffer(new(std::nothrow) GLubyte[size]);

  // メモリが確保できなければ戻る
  if (buffer == nullptr)
  {
    std::cerr << "Waring: Too large file: " << name << std::endl;
    file.close();
    return nullptr;
  }

  // データを読み込む
  if (header[2] & 8)
  {
    // RLE
    size_t p(0);
    char c;
    while (file.get(c))
    {
      if (c & 0x80)
      {
        // run-length packet
        const size_t count((c & 0x7f) + 1);
        if (p + count * depth > size) break;
        char tmp[4];
        file.read(tmp, depth);
        for (size_t i = 0; i < count; ++i)
        {
          for (size_t j = 0; j < depth;) buffer[p++] = tmp[j++];
        }
      }
      else
      {
        // raw packet
        const size_t count((c + 1) * depth);
        if (p + count > size) break;
        file.read(reinterpret_cast<char *>(buffer + p), count);
        p += count;
      }
    }
  }
  else
  {
    // 非圧縮
    file.read(reinterpret_cast<char *>(buffer), size);
  }

  // 読み込みに失敗していたら警告を出す
  if (file.bad())
  {
    std::cerr << "Waring: Can't read image data: " << name << std::endl;
  }

  // ファイルを閉じる
  file.close();

  // 画像を読み込んだメモリを返す
  return buffer;
}

/*!
** \brief テクスチャメモリを確保して画像を読み込む.
**
**   \param width 画像の幅.
**   \param height 画像の高さ.
**   \param internal テクスチャの内部フォーマット.
**   \param format 画像データのフォーマット.
**   \param image 画像データ.
**   \return テクスチャオブジェクト名.
*/
GLuint gg::ggLoadTexture(GLsizei width, GLsizei height, GLenum internal,
  GLenum format, const GLvoid *image)
{
  // テクスチャオブジェクト
  GLuint tex;
  glGenTextures(1, &tex);
  glBindTexture(GL_TEXTURE_2D, tex);

  // アルファチャンネルがついていれば 4 バイト境界に設定する
  glPixelStorei(GL_UNPACK_ALIGNMENT, (format == GL_BGRA || format == GL_RGBA) ? 4 : 1);

  // テクスチャを割り当てる
  glTexImage2D(GL_TEXTURE_2D, 0, internal, width, height, 0, format, GL_UNSIGNED_BYTE, image);

  // バイリニア（ミップマップなし），エッジでクランプ
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_CLAMP_TO_EDGE);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_CLAMP_TO_EDGE);

  // テクスチャオブジェクト名を返す
  return tex;
}

/*!
** \brief TGA ファイルをテクスチャメモリに読み込む.
**
**   \param name TGA ファイル名.
**   \param internal テクスチャの内部フォーマット.
**   \return テクスチャオブジェクト名.
*/
GLuint gg::ggLoadImage(const char *name, GLenum internal)
{
  // 画像サイズ
  GLsizei width, height;

  // 画像フォーマット
  GLenum format;

  // 画像がぞうを読み込む
  const GLubyte *const image(ggLoadTga(name, &width, &height, &format));

  // 画像が読み込めなかったら戻る
  if (image == nullptr) return 0;

  // internal == 0 なら内部フォーマットを読み込んだファイルに合わせる
  if (internal == 0)
  {
    switch (format)
    {
    case GL_BGR:
      internal = GL_RGB;
      break;
    case GL_BGRA:
      internal = GL_RGBA;
      break;
    default:
      internal = format;
      break;
    }
  }

  // テクスチャメモリに読み込む
  const GLuint tex(ggLoadTexture(width, height, internal, format, image));

  // 画像の読み込みに使ったメモリを解放する
  delete[] image;

  // テクスチャオブジェクト名を返す
  return tex;
}

/*!
** \brief TGA 画像ファイルの高さマップ読み込んでテクスチャメモリに法線マップを作成する.
**
**   \param name TGA ファイル名.
**   \param nz 作成した法線ベクトルの z 成分の割合.
**   \param internal テクスチャの内部フォーマット.
**   \return テクスチャオブジェクト名.
*/
GLuint gg::ggLoadHeight(const char *name, float nz, GLenum internal)
{
  // 画像サイズ
  GLsizei width, height;

  // 画像フォーマット
  GLenum format;

  //高さマップの 画像を読み込む
  const GLubyte *const hmap(ggLoadTga(name, &width, &height, &format));

  // 画像が読み込めなかったら戻る
  if (hmap == nullptr) return 0;

  // 画素のバイト数
  int bytes;
  switch (format)
  {
  case GL_RED:
    bytes = 1;
    break;
  case GL_RG:
    bytes = 2;
    break;
  case GL_BGR:
    bytes = 3;
    break;
  case GL_BGRA:
    bytes = 4;
    break;
  default:
    bytes = 1;
    break;
  }

  // メモリサイズ
  const GLsizei maxsize(width * height);

  // 法線マップのメモリを確保する
  GLfloat (*const nmap)[4](new(std::nothrow) GLfloat[maxsize][4]);

  // メモリが確保できなければ戻る
  if (nmap == nullptr)
  {
    delete[] hmap;
    return 0;
  }

  // 法線マップの作成
  for (GLsizei i = 0; i < maxsize; ++i)
  {
    const int x(i % width);
    const int y(i - x);
    const int o(i * bytes);
    const int u((y + (x + 1) % width) * bytes);
    const int v(((y + width) % maxsize + x) * bytes);

    // 隣接する画素との値の差を法線の成分に用いる
    const float nx(float(hmap[u] - hmap[o]));
    const float ny(float(hmap[v] - hmap[o]));

    // 法線の長さを求めておく
    const float nl(sqrt(nx * nx + ny * ny + nz * nz));

    // 法線を求める
    nmap[i][0] = nx / nl;
    nmap[i][1] = ny / nl;
    nmap[i][2] = nz / nl;
    nmap[i][3] = hmap[o];
  }

  // 高さマップの画像の読み込みに使ったメモリを解放する
  delete[] hmap;

  // 内部フォーマットが浮動小数点テクスチャでなければ [0,1] に変換する
  if (
    internal != GL_RGB16F  &&
    internal != GL_RGBA16F &&
    internal != GL_RGB32F  &&
    internal != GL_RGBA32F
    )
  {
    for (GLsizei i = 0; i < maxsize; ++i)
    {
      nmap[i][0] = nmap[i][0] * 0.5f + 0.5f;
      nmap[i][1] = nmap[i][1] * 0.5f + 0.5f;
      nmap[i][2] = nmap[i][2] * 0.5f + 0.5f;
      nmap[i][3] *= 0.0039215686f; // == 1/255
    }
  }

  // テクスチャオブジェクト
  GLuint tex;
  glGenTextures(1, &tex);
  glBindTexture(GL_TEXTURE_2D, tex);

  // nmap が GLfloat なので 4 バイト境界に設定する
  glPixelStorei(GL_UNPACK_ALIGNMENT, 4);

  // テクスチャを割り当てる
  glTexImage2D(GL_TEXTURE_2D, 0, internal, width, height, 0, GL_RGBA, GL_FLOAT, nmap);

  // バイリニア（ミップマップなし），エッジでクランプ
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MAG_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_MIN_FILTER, GL_LINEAR);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_S, GL_REPEAT);
  glTexParameteri(GL_TEXTURE_2D, GL_TEXTURE_WRAP_T, GL_REPEAT);

  // 法線マップの作成に使ったメモリを解放する
  delete[] nmap;

  // テクスチャオブジェクト名を返す
  return tex;
}

// \cond STRUCT
/*
** OBJ ファイルの読み込みに使うデータ型
**
**     Vine Linux 6.1 の gcc 4.4.5 だと, ローカルに定義
**     したクラス・構造体を template で使うとエラーになる.
*/
namespace gg
{
  struct rgb      // 色
  {
    float r, g, b;
  };
  struct mat      // マテリアル
  {
    rgb amb;      // ambient
    rgb diff;     // diffuse
    rgb spec;     // specular
    float shi;    // shininess
    float dis;    // dissolve
  };
  struct vec      // ベクトル
  {
    float x, y, z;
  };
  struct idx      // 面データ
  {
    GLuint p[3];  // 頂点座標番号
    GLuint n[3];  // 頂点法線番号
    GLuint t[3];  // テクスチャ座標番号
    bool smooth;  // スムーズシェーディングの有無
  };
  struct grp      // 面グループ
  {
    GLuint b;     // 面グループの開始番号
    GLuint c;     // 面グループの頂点数
    const mat *m; // 面グループのマテリアル
    grp(GLuint begin, GLuint count, const mat &material)
      : b(begin), c(count), m(&material) {}
  };
}
// \endcond

/*!
** \brief 三角形分割された OBJ ファイルを読み込む.
**
**   \param name OBJ ファイル名.
**   \param nv 読み込んだデータの頂点数を格納する変数.
**   \param pos 頂点の位置のデータを格納したメモリのポインタを格納する変数.
**   \param norm 頂点の法線データの格納したメモリのポインタを格納する変数.
**   \param nf 読み込んだデータの面数を格納する変数.
**   \param face 面のデータを格納したメモリのポインタを格納する変数.
**   \param normalize true ならサイズを正規化する.
**   \return 読み込みに成功したら true.
*/
bool gg::ggLoadObj(const char *name, GLuint &nv, GLfloat (*&pos)[3], GLfloat (*&norm)[3],
  GLuint &nf, GLuint (*&face)[3], bool normalize)
{
  // OBJ ファイルの読み込み
  std::ifstream file(name, std::ios::binary);

  // ファイルが開けなかったら戻る
  if (file.fail())
  {
    std::cerr << "Error: Can't open OBJ file: " << name << std::endl;
    return false;
  }

  // 一行読み込み用のバッファ
  std::string line;

  // データの数と座標値の最小値・最大値
  float xmin, xmax, ymin, ymax, zmin, zmax;
  xmax = ymax = zmax = -(xmin = ymin = zmin = FLT_MAX);

  // 頂点位置の一時保存
  std::vector<vec> tpos;
  std::vector<idx> tface;

  // データを読み込む
  while (std::getline(file, line))
  {
    std::istringstream str(line);
    std::string op;
    str >> op;

    if (op == "v")
    {
      // 頂点位置
      vec v;

      // 頂点位置はスペースで区切られている
      str >> v.x >> v.y >> v.z;

      // 位置の最大値と最小値を求める (AABB)
      xmin = std::min(xmin, v.x);
      xmax = std::max(xmax, v.x);
      ymin = std::min(ymin, v.y);
      ymax = std::max(ymax, v.y);
      zmin = std::min(zmin, v.z);
      zmax = std::max(zmax, v.z);

      // 頂点データを保存する
      tpos.push_back(v);
    }
    else if (op == "f")
    {
      // 面データ
      idx f;

      // 頂点座標番号を取り出す
      for (int i = 0; i < 3; ++i)
      {
        // 1行をスペースで区切って個々の要素の最初の数値を取り出す
        std::string s;
        str >> s;
        f.p[i] = atoi(s.c_str());
      }

      // 面データを保存する
      tface.push_back(f);
    }
  }

  // ファイルの読み込みチェック
  if (file.bad())
  {
    // うまく読み込めなかった
    std::cerr << "Warning: Can't read OBJ file: " << name << std::endl;
  }
  file.close();

  // メモリの確保
  pos = norm = nullptr;
  face = nullptr;
  nv = tpos.size();
  nf = tface.size();
  try
  {
    pos = new GLfloat[nv][3];
    norm = new GLfloat[nv][3];
    face = new GLuint[nf][3];
  }
  catch (std::bad_alloc e)
  {
    delete[] pos;
    delete[] norm;
    delete[] face;

    pos = norm = nullptr;
    face = nullptr;

    return false;
  }

  // 位置と大きさの正規化のための係数
  GLfloat scale, cx, cy, cz;
  if (normalize)
  {
    const float sx(xmax - xmin);
    const float sy(ymax - ymin);
    const float sz(zmax - zmin);

    scale = sx;
    if (sy > scale) scale = sy;
    if (sz > scale) scale = sz;
    scale = (scale != 0.0f) ? 2.0f / scale : 1.0f;

    cx = (xmax + xmin) * 0.5f;
    cy = (ymax + ymin) * 0.5f;
    cz = (zmax + zmin) * 0.5f;
  }
  else
  {
    scale = 1.0f;
    cx = cy = cz = 0.0f;
  }

  // 図形の大きさと位置の正規化とデータのコピー
  for (std::vector<vec>::const_iterator it = tpos.begin(); it != tpos.end(); ++it)
  {
    const size_t v = it - tpos.begin();

    pos[v][0] = (it->x - cx) * scale;
    pos[v][1] = (it->y - cy) * scale;
    pos[v][2] = (it->z - cz) * scale;
  }

  // 頂点法線の値を 0 にしておく
  std::fill(static_cast<GLfloat *>(&norm[0][0]), static_cast<GLfloat *>(&norm[nv][0]), 0.0f);

  // 面の法線の算出とデータのコピー
  for (std::vector<idx>::const_iterator it = tface.begin(); it != tface.end(); ++it)
  {
    const size_t f(it - tface.begin());

    // 頂点座標番号を取り出す
    const GLuint v0(face[f][0] = it->p[0] - 1);
    const GLuint v1(face[f][1] = it->p[1] - 1);
    const GLuint v2(face[f][2] = it->p[2] - 1);

    // v1 - v0, v2 - v0 を求める
    const GLfloat dx1(pos[v1][0] - pos[v0][0]);
    const GLfloat dy1(pos[v1][1] - pos[v0][1]);
    const GLfloat dz1(pos[v1][2] - pos[v0][2]);
    const GLfloat dx2(pos[v2][0] - pos[v0][0]);
    const GLfloat dy2(pos[v2][1] - pos[v0][1]);
    const GLfloat dz2(pos[v2][2] - pos[v0][2]);

    // 外積により面法線を求める
    const GLfloat nx(dy1 * dz2 - dz1 * dy2);
    const GLfloat ny(dz1 * dx2 - dx1 * dz2);
    const GLfloat nz(dx1 * dy2 - dy1 * dx2);

    // 面法線を頂点法線に積算する
    norm[v0][0] += nx;
    norm[v0][1] += ny;
    norm[v0][2] += nz;
    norm[v1][0] += nx;
    norm[v1][1] += ny;
    norm[v1][2] += nz;
    norm[v2][0] += nx;
    norm[v2][1] += ny;
    norm[v2][2] += nz;
  }

  // 頂点法線の正規化
  for (GLuint v = 0; v < nv; ++v)
  {
    // 頂点法線の長さ
    GLfloat a(sqrt(norm[v][0] * norm[v][0] + norm[v][1] * norm[v][1] + norm[v][2] * norm[v][2]));

    // 頂点法線の正規化
    if (a != 0.0)
    {
      norm[v][0] /= a;
      norm[v][1] /= a;
      norm[v][2] /= a;
    }
  }

  return true;
}

/*!
** \brief 三角形分割された OBJ ファイルと MTL ファイルを読み込む.
**
**   \param name OBJ ファイル名.
**   \param ng 読み込んだデータの面のグループ数.
**   \param group 面の各グループの最初の面の番号と面の数.
**   \param amb グループごとの環境光に対する反射係数.
**   \param diff グループごとの拡散反射係数.
**   \param spec グループごとの鏡面反射係数.
**   \param shi グループごとの輝き係数.
**   \param nv 読み込んだデータの頂点数を格納する変数.
**   \param pos 頂点の位置のデータを格納したメモリのポインタを格納する変数.
**   \param norm 頂点の法線データの格納したメモリのポインタを格納する変数.
**   \param normalize true ならサイズを正規化する.
**   \return 読み込みに成功したら true.
*/
bool gg::ggLoadObj(const char *name, GLuint &ng, GLuint (*&group)[2],
  GLfloat (*&amb)[4], GLfloat (*&diff)[4], GLfloat (*&spec)[4], GLfloat *&shi,
  GLuint &nv, GLfloat (*&pos)[3], GLfloat (*&norm)[3], bool normalize)
{
  // 引数に初期値を設定する
  ng = 0;
  group = nullptr;
  amb = diff = spec = nullptr;
  shi = nullptr;
  nv = 0;
  pos = norm = nullptr;

  // ファイルパスからディレクトリ名を取り出す
  std::string path(name);
  const size_t base(path.find_last_of("/\\"));
  std::string dirname((base == std::string::npos) ? "" : path.substr(base + 1));

  // OBJ ファイルを読み込む
  std::ifstream file(path.c_str());

  // 読み込みに失敗したら戻る
  if (file.fail())
  {
    std::cerr << "Error: Can't open OBJ file: " << path << std::endl;
    return false;
  }

  // マテリアル
  std::map<std::string, mat> mtl;
  static const char defmtl[] = "Default";
  std::string mtlname(defmtl);

  // デフォルトのマテリアル
  mtl[mtlname].amb.r = 0.1f;
  mtl[mtlname].amb.g = 0.1f;
  mtl[mtlname].amb.b = 0.1f;
  mtl[mtlname].diff.r = 0.6f;
  mtl[mtlname].diff.g = 0.6f;
  mtl[mtlname].diff.b = 0.6f;
  mtl[mtlname].spec.r = 0.3f;
  mtl[mtlname].spec.g = 0.3f;
  mtl[mtlname].spec.b = 0.3f;
  mtl[mtlname].shi = 60.0f;
  mtl[mtlname].dis = 1.0f;

  // 読み込み用の一時記憶領域
  std::vector<vec> tpos;
  std::vector<vec> ttex;
  std::vector<vec> tnorm;
  std::vector<idx> tface;
  std::vector<grp> tgroup;

  // グループの開始番号
  GLuint groupbegin(0);

  // スムーズシェーディングのスイッチ
  bool smooth(false);

  // 座標値の最小値・最大値
  float xmin, xmax, ymin, ymax, zmin, zmax;
  xmax = ymax = zmax = -(xmin = ymin = zmin = FLT_MAX);

  // 一行読み込み用のバッファ
  std::string line;

  // データの読み込み
  while (std::getline(file, line))
  {
    // 最後の文字が \r なら削除する
    if (*(line.end() - 1) == '\r') line.erase(--line.end());

    // 一行を文字列ストリームに入れる
    std::istringstream str(line);

    // 最初のトークンを命令 (op) とみなす
    std::string op;
    str >> op;

    if (op == "v")
    {
      // 頂点位置
      vec v;

      // 頂点位置はスペースで区切られている
      str >> v.x >> v.y >> v.z;

      // 頂点位置の最小値と最大値を求める (AABB)
      xmin = std::min(xmin, v.x);
      xmax = std::max(xmax, v.x);
      ymin = std::min(ymin, v.y);
      ymax = std::max(ymax, v.y);
      zmin = std::min(zmin, v.z);
      zmax = std::max(zmax, v.z);

      // 頂点位置を記録する
      tpos.push_back(v);
    }
    else if (op == "vt")
    {
      // テクスチャ座標
      vec t;

      // 頂点位置はスペースで区切られている
      str >> t.x >> t.y;

      // テクスチャ座標を記録する
      ttex.push_back(t);
    }
    else if (op == "vn")
    {
      // 頂点法線
      vec n;

      // 頂点法線はスペースで区切られている
      str >> n.x >> n.y >> n.z;

      // 頂点法線を記録する
      tnorm.push_back(n);
    }
    else if (op == "f")
    {
      // 面 (三角形) データ
      idx f;

      // スムースシェーディング
      f.smooth = smooth;

      //　三頂点のそれぞれについて
      for (int i = 0; i < 3; ++i)
      {
        // １項目取り出す
        std::string s;
        str >> s;

        // 項目の最初の要素は頂点座標番号
        f.p[i] = atoi(s.c_str());
        f.t[i] = f.n[i] = 0;

        // 残りの項目を取り出す
        size_t l(s.find('/', 0));
        if (l != std::string::npos)
        {
          // 二つ目の項目の先頭の位置
          ++l;

          // 二つ目の項目はテクスチャ座標
          f.t[i] = atoi(s.c_str() + l);

          // 三つ目の項目
          l = s.find('/', l);
          if (l != std::string::npos)
          {
            // 三つ目の項目の先頭の位置
            ++l;

            // 三つ目の項目は法線番号
            f.n[i] = atoi(s.c_str() + l);
          }
        }
      }

      // 面データの記録ｊ
      tface.push_back(f);
    }
    else if (op == "s")
    {
      // '1' だったらスムースシェーディング有効
      std::string s;
      str >> s;
      smooth = s == "1";
    }
    else if (op == "usemtl")
    {
      // 面グループの面数
      GLuint groupcount(GLuint(tface.size()) * 3 - groupbegin);
      if (groupcount > 0)
      {
        // 面グループの頂点データの開始番号と数，およびそのマテリアルを記録する
        grp b(groupbegin, groupcount, mtl[mtlname]);
        tgroup.push_back(b);

        // 次の面グループの開始番号を求めておく
        groupbegin += groupcount;
      }

      // マテリアル名の取り出し
      str >> mtlname;

      // マテリアルの存在チェック
      if (mtl.find(mtlname) == mtl.end())
      {
        std::cerr << "Warning: Undefined material: " << mtlname << std::endl;
        mtlname = defmtl;
      }
      else
      {
        std::cerr << "usemtl: " << mtlname << std::endl;
      }
    }
    else if (op == "mtllib")
    {
      // MTL ファイルのパス名を作る
      str >> std::ws;
      std::string mtlpath;
      std::getline(str, mtlpath);
      mtlpath = dirname + mtlpath;

      // MTL ファイルの読み込み
      std::ifstream mtlfile(mtlpath.c_str(), std::ios::binary);
      if (mtlfile.fail())
      {
        std::cerr << "Warning: Can't open MTL file: " << mtlpath << std::endl;
      }
      else
      {
        // 一行読み込み用のバッファ
        std::string mtlline;

        // マテリアルデータを読み込む
        while (std::getline(mtlfile, mtlline))
        {
          std::istringstream mtlstr(mtlline);
          std::string mtlop;
          mtlstr >> mtlop;

          if (mtlop == "newmtl")
          {
            // 新規マテリアル名を出力する
            mtlstr >> mtlname;
            std::cerr << "newmtl: " << mtlname << std::endl;
          }
          else if (mtlop == "Ka")
          {
            // 環境光の反射係数を登録する
            mtlstr >> mtl[mtlname].amb.r >> mtl[mtlname].amb.g >> mtl[mtlname].amb.b;
          }
          else if (mtlop == "Kd")
          {
            // 拡散反射係数を登録する
            mtlstr >> mtl[mtlname].diff.r >> mtl[mtlname].diff.g >> mtl[mtlname].diff.b;
          }
          else if (mtlop == "Ks")
          {
            // 鏡面反射係数を登録する
            mtlstr >> mtl[mtlname].spec.r >> mtl[mtlname].spec.g >> mtl[mtlname].spec.b;
          }
          else if (mtlop == "Ns")
          {
            // 輝き係数を登録する
            mtlstr >> mtl[mtlname].shi;
          }
          else if (mtlop == "d")
          {
            // 不透明度を登録する
            mtlstr >> mtl[mtlname].dis;
          }
        }

        // MTL ファイルの読み込みチェック
        if (mtlfile.bad())
        {
          // MTL ファイルをうまく読み込めなかった
          std::cerr << "Warning: Can't read MTL file: " << mtlpath << std::endl;
        }
        mtlfile.close();
      }
    }
  }

  // ファイルの読み込みチェック
  if (file.bad())
  {
    // OBJ ファイルをうまく読み込めなかった
    std::cerr << "Warning: Can't read OBJ file: " << path << std::endl;
  }
  else
  {
    // 最後の面グループの面数
    GLuint groupcount(GLuint(tface.size()) * 3 - groupbegin);
    if (groupcount > 0)
    {
      // 最後の面グループの頂点データの開始番号と数，およびそのマテリアルを記録する
      grp b(groupbegin, groupcount, mtl[mtlname]);
      tgroup.push_back(b);
    }
  }
  file.close();

  // 必要な面数
  const GLuint nf(GLuint(tface.size()));

  // メモリの確保
  try
  {
    // 必要な頂点数
    nv = nf * 3;
    pos = norm = nullptr;

    pos = new GLfloat[nv][3];
    norm = new GLfloat[nv][3];

    // 必要なグループ数
    ng = GLuint(tgroup.size());
    group = nullptr;
    amb = diff = spec = nullptr;
    shi = nullptr;

    group = new GLuint[ng][2];
    amb = new GLfloat[ng][4];
    diff = new GLfloat[ng][4];
    spec = new GLfloat[ng][4];
    shi = new GLfloat[ng];
  }
  catch (std::bad_alloc e)
  {
    delete[] pos;
    delete[] norm;

    nv = 0;
    pos = norm = nullptr;

    delete[] group;
    delete[] amb;
    delete[] diff;
    delete[] spec;
    delete[] shi;

    ng = 0;
    group = nullptr;
    amb = diff = spec = nullptr;
    shi = nullptr;

    return false;
  }

  // 位置と大きさを正規化するための係数
  GLfloat scale, cx, cy, cz;
  if (normalize)
  {
    const float sx(xmax - xmin);
    const float sy(ymax - ymin);
    const float sz(zmax - zmin);

    scale = sx;
    if (sy > scale) scale = sy;
    if (sz > scale) scale = sz;
    scale = (scale != 0.0f) ? 2.0f / scale : 1.0f;

    cx = (xmax + xmin) * 0.5f;
    cy = (ymax + ymin) * 0.5f;
    cz = (zmax + zmin) * 0.5f;
  }
  else
  {
    scale = 1.0f;
    cx = cy = cz = 0.0f;
  }

  // 法線データがなければ算出しておく
  if (tnorm.empty())
  {
    // 法線データ数の初期値は頂点数と同じでスムーズシェーディングのために初期値は 0
    static const vec zero = { 0.0f, 0.0f, 0.0f };
    tnorm.resize(tpos.size(), zero);

    // 面の法線の算出と頂点法線の算出
    for (std::vector<idx>::iterator it = tface.begin(); it != tface.end(); ++it)
    {
      // 頂点座標番号
      const GLuint v0(it->p[0] - 1);
      const GLuint v1(it->p[1] - 1);
      const GLuint v2(it->p[2] - 1);

      // v1 - v0, v2 - v0 を求める
      const GLfloat dx1(tpos[v1].x - tpos[v0].x);
      const GLfloat dy1(tpos[v1].y - tpos[v0].y);
      const GLfloat dz1(tpos[v1].z - tpos[v0].z);
      const GLfloat dx2(tpos[v2].x - tpos[v0].x);
      const GLfloat dy2(tpos[v2].y - tpos[v0].y);
      const GLfloat dz2(tpos[v2].z - tpos[v0].z);

      // 外積により面法線を求める
      GLfloat nx(dy1 * dz2 - dz1 * dy2);
      GLfloat ny(dz1 * dx2 - dx1 * dz2);
      GLfloat nz(dx1 * dy2 - dy1 * dx2);

      if (it->smooth)
      {
        // 面法線を頂点法線に積算する
        tnorm[v0].x += nx;
        tnorm[v0].y += ny;
        tnorm[v0].z += nz;
        tnorm[v1].x += nx;
        tnorm[v1].y += ny;
        tnorm[v1].z += nz;
        tnorm[v2].x += nx;
        tnorm[v2].y += ny;
        tnorm[v2].z += nz;

        // 面データを更新する
        it->n[0] = it->p[0];
        it->n[1] = it->p[1];
        it->n[2] = it->p[2];
      }
      else
      {
        // 面法線を正規化する
        const GLfloat a(sqrt(nx * nx + ny * ny + nz * nz));
        if (a != 0.0f)
        {
          nx /= a;
          ny /= a;
          nz /= a;
        }

        // 3 頂点追加
        const size_t v(tnorm.size());
        tnorm.resize(v + 3);

        // 正規化した面法線をそのまま頂点法線にする
        tnorm[v + 0].x = nx;
        tnorm[v + 0].y = ny;
        tnorm[v + 0].z = nz;
        tnorm[v + 1].x = nx;
        tnorm[v + 1].y = ny;
        tnorm[v + 1].z = nz;
        tnorm[v + 2].x = nx;
        tnorm[v + 2].y = ny;
        tnorm[v + 2].z = nz;

        // 面データを更新する
        it->n[0] = v + 1;
        it->n[1] = v + 2;
        it->n[2] = v + 3;
      }
    }
  }

  // 面ごとの頂点データの作成
  for (std::vector<idx>::const_iterator it = tface.begin(); it != tface.end(); ++it)
  {
    const size_t f((it - tface.begin()) * 3);

    // 三頂点のそれぞれについて
    for (int i = 0; i < 3; ++i)
    {
      const unsigned int v(f + i);

      // 頂点座標番号
      GLuint p(it->p[i]);
      if (p > 0)
      {
        --p;

        // 頂点座標を正規化して登録する
        pos[v][0] = (tpos[p].x - cx) * scale;
        pos[v][1] = (tpos[p].y - cy) * scale;
        pos[v][2] = (tpos[p].z - cz) * scale;
      }

#if 0
      // テクスチャ座標番号
      GLuint t(it->t[i]);
      if (t > 0)
      {
        --t;

        // テクスチャ座標を登録する
        tex[v][0] = ttex[t].x;
        tex[v][1] = ttex[t].y;
      }
#endif

      // 頂点法線番号
      GLuint n(it->n[i]);
      if (n > 0)
      {
        --n;

        GLfloat nx(tnorm[n].x);
        GLfloat ny(tnorm[n].y);
        GLfloat nz(tnorm[n].z);

        if (it->smooth)
        {
          GLfloat a(sqrt(nx * nx + ny * ny + nz * nz));
          if (a != 0.0f)
          {
            nx /= a;
            ny /= a;
            nz /= a;
          }
        }

        // 頂点法線を登録する
        norm[v][0] = nx;
        norm[v][1] = ny;
        norm[v][2] = nz;
      }
    }
  }

  // 面グループデータの作成
  for (std::vector<grp>::const_iterator it = tgroup.begin(); it != tgroup.end(); ++it)
  {
    const size_t g(it - tgroup.begin());

    // 面グループの最初の頂点位置番号
    group[g][0] = it->b;

    // 面グループの頂点データの数
    group[g][1] = it->c;

    // 面グループの環境光に対する反射係数
    amb[g][0] = it->m->amb.r;
    amb[g][1] = it->m->amb.g;
    amb[g][2] = it->m->amb.b;
    amb[g][3] = 1.0f;

    // 面グループの拡散反射係数
    diff[g][0] = it->m->diff.r;
    diff[g][1] = it->m->diff.g;
    diff[g][2] = it->m->diff.b;
    diff[g][3] = it->m->dis;

    // 面グループの鏡面反射係数
    spec[g][0] = it->m->spec.r;
    spec[g][1] = it->m->spec.g;
    spec[g][2] = it->m->spec.b;
    spec[g][3] = 1.0f;

    // 面グループの輝き係数
    shi[g] = it->m->shi;
  }

  return true;
}

/*
** シェーダオブジェクトのコンパイル結果を表示する
*/
static GLboolean printShaderInfoLog(GLuint shader, const char *str)
{
  // コンパイル結果を取得する
  GLint status;
  glGetShaderiv(shader, GL_COMPILE_STATUS, &status);
  if (status == GL_FALSE) std::cerr << "Compile Error in " << str << std::endl;

  // シェーダのコンパイル時のログの長さを取得する
  GLsizei bufSize;
  glGetShaderiv(shader, GL_INFO_LOG_LENGTH, &bufSize);

  if (bufSize > 1)
  {
    // シェーダのコンパイル時のログの内容を取得する
    std::vector<GLchar> infoLog(bufSize);
    GLsizei length;
    glGetShaderInfoLog(shader, bufSize, &length, &infoLog[0]);
    std::cerr << &infoLog[0] << std::endl;
  }

  return (GLboolean)status;
}

/*
** プログラムオブジェクトのリンク結果を表示する
*/
static GLboolean printProgramInfoLog(GLuint program)
{
  // リンク結果を取得する
  GLint status;
  glGetProgramiv(program, GL_LINK_STATUS, &status);
  if (status == GL_FALSE) std::cerr << "Link Error." << std::endl;

  // シェーダのリンク時のログの長さを取得する
  GLsizei bufSize;
  glGetProgramiv(program, GL_INFO_LOG_LENGTH, &bufSize);

  // シェーダのリンク時のログの内容を取得する
  if (bufSize > 1)
  {
    std::vector<GLchar> infoLog(bufSize);
    GLsizei length;
    glGetProgramInfoLog(program, bufSize, &length, &infoLog[0]);
    std::cerr << &infoLog[0] << std::endl;
  }

  // リンク結果を返す
  return (GLboolean)status;
}

/*!
** \brief シェーダのソースプログラムの文字列を読み込んでプログラムオブジェクトを作成する.
**
**   \param vsrc バーテックスシェーダのソースプログラムの文字列.
**   \param fsrc フラグメントシェーダのソースプログラムの文字列 (nullptr なら不使用).
**   \param gsrc ジオメトリシェーダのソースプログラムの文字列 (nullptr なら不使用).
**   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
**   \param varyings フィードバックする varying 変数のリスト (nullptr なら不使用).
**   \param vtext バーテックスシェーダのコンパイル時のメッセージに追加する文字列.
**   \param ftext フラグメントシェーダのコンパイル時のメッセージに追加する文字列.
**   \param gtext ジオメトリシェーダのコンパイル時のメッセージに追加する文字列.
**   \return シェーダプログラムのプログラム名 (作成できなければ 0).
*/
GLuint gg::ggCreateShader(const char *vsrc, const char *fsrc, const char *gsrc,
  GLint nvarying, const char **varyings,
  const char *vtext, const char *ftext, const char *gtext)
{
  // シェーダプログラムの作成
  const GLuint program(glCreateProgram());

  if (program > 0)
  {
    if (vsrc)
    {
      // バーテックスシェーダのシェーダオブジェクトを作成する
      const GLuint vertShader(glCreateShader(GL_VERTEX_SHADER));
      glShaderSource(vertShader, 1, &vsrc, nullptr);
      glCompileShader(vertShader);

      // バーテックスシェーダのシェーダオブジェクトをプログラムオブジェクトに組み込む
      if (printShaderInfoLog(vertShader, vtext))
        glAttachShader(program, vertShader);
      glDeleteShader(vertShader);
    }

    if (fsrc)
    {
      // フラグメントシェーダのシェーダオブジェクトを作成する
      const GLuint fragShader(glCreateShader(GL_FRAGMENT_SHADER));
      glShaderSource(fragShader, 1, &fsrc, nullptr);
      glCompileShader(fragShader);

      // フラグメントシェーダのシェーダオブジェクトをプログラムオブジェクトに組み込む
      if (printShaderInfoLog(fragShader, ftext))
        glAttachShader(program, fragShader);
      glDeleteShader(fragShader);
    }

    if (gsrc)
    {
      // ジオメトリシェーダのシェーダオブジェクトを作成する
      const GLuint geomShader(glCreateShader(GL_GEOMETRY_SHADER));
      glShaderSource(geomShader, 1, &gsrc, nullptr);
      glCompileShader(geomShader);

      // ジオメトリシェーダのシェーダオブジェクトをプログラムオブジェクトに組み込む
      if (printShaderInfoLog(geomShader, gtext))
        glAttachShader(program, geomShader);
      glDeleteShader(geomShader);
    }

    // feedback に使う varying 変数を指定する
    if (nvarying > 0)
      glTransformFeedbackVaryings(program, nvarying, varyings, GL_SEPARATE_ATTRIBS);

    // シェーダプログラムをリンクする
    glLinkProgram(program);

    // プログラムオブジェクトが作成できなければ 0 を返す
    if (printProgramInfoLog(program) == GL_FALSE)
    {
      glDeleteProgram(program);
      return 0;
    }
  }

  // プログラムオブジェクトを返す
  return program;
}

/*
** シェーダのソースファイルを読み込んだメモリを返す
*/
static GLchar *readShaderSource(const char *name)
{
  // ファイル名が nullptr なら nullptr を返す
  if (name == nullptr) return nullptr;

  // ソースファイルを開く
  std::ifstream file(name, std::ios::binary);

  // ファイルが開けなければ戻る
  if (file.fail())
  {
    std::cerr << "Error: Can't open source file: " << name << std::endl;
    return nullptr;
  }

  // ファイルの末尾に移動し現在位置（＝ファイルサイズ）を得る
  file.seekg(0L, std::ios::end);
  const GLsizei length(GLsizei(file.tellg()));

  // ファイルサイズのメモリを確保する
  GLchar *buffer(new(std::nothrow) GLchar[length + 1]);

  // メモリが確保できなければ戻る
  if (buffer == nullptr)
  {
    std::cerr << "Error: Too large file: " << name << std::endl;
    file.close();
    return nullptr;
  }

  // ファイルを先頭から読み込む
  file.seekg(0L, std::ios::beg);
  file.read(buffer, length);
  buffer[length] = '\0';

  // ファイルがうまく読み込めなければ戻る
  if (file.bad())
  {
    std::cerr << "Error: Could not read souce file: " << name << std::endl;
    delete[] buffer;
    buffer = nullptr;
  }

  // ファイルを閉じる
  file.close();

  // ソースプログラムを読み込んだメモリを返す
  return buffer;
}

/*!
** \brief シェーダのソースファイルを読み込んでプログラムオブジェクトを作成する.
**
**   \param vert バーテックスシェーダのソースファイル名.
**   \param frag フラグメントシェーダのソースファイル名 (nullptr なら不使用).
**   \param geom ジオメトリシェーダのソースファイル名 (nullptr なら不使用).
**   \param nvarying フィードバックする varying 変数の数 (0 なら不使用).
**   \param varyings フィードバックする varying 変数のリスト (nullptr なら不使用).
**   \return シェーダプログラムのプログラム名 (作成できなければ 0).
*/
GLuint gg::ggLoadShader(const char *vert, const char *frag, const char *geom,
  GLint nvarying, const char **varyings)
{
  // シェーダのソースファイルを読み込む
  const GLchar *const vsrc(readShaderSource(vert));
  const GLchar *const fsrc(readShaderSource(frag));
  const GLchar *const gsrc(readShaderSource(geom));

  // プログラムオブジェクトを作成する
  const GLuint program(ggCreateShader(vsrc, fsrc, gsrc, nvarying, varyings, vert, frag, geom));

  // ソースファイルの読み込みに使ったメモリを解放する
  delete[] vsrc;
  delete[] fsrc;
  delete[] gsrc;

  // 作成したプログラムオブジェクトを返す
  return program;
}

/*
** 変換行列：行列とベクトルの積 c ← a × b
*/
void gg::GgMatrix::projection(GLfloat *c, const GLfloat *a, const GLfloat *b) const
{
  for (int i = 0; i < 4; ++i)
  {
    c[i] = a[0 + i] * b[0] + a[4 + i] * b[1] + a[8 + i] * b[2] + a[12 + i] * b[3];
  }
}

/*
** 変換行列：行列と行列の積 c ← a × b
*/
void gg::GgMatrix::multiply(GLfloat *c, const GLfloat *a, const GLfloat *b) const
{
  for (int i = 0; i < 16; ++i)
  {
    int j = i & 3, k = i & ~3;

    c[i] = a[0 + j] * b[k + 0] + a[4 + j] * b[k + 1] + a[8 + j] * b[k + 2] + a[12 + j] * b[k + 3];
  }
}

/*
** 変換行列：単位行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadIdentity()
{
  array[ 1] = array[ 2] = array[ 3] = array[ 4] =
  array[ 6] = array[ 7] = array[ 8] = array[ 9] =
  array[11] = array[12] = array[13] = array[14] = 0.0f;
  array[ 0] = array[ 5] = array[10] = array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：平行移動変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadTranslate(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  array[12] = x;
  array[13] = y;
  array[14] = z;
  array[ 0] = array[ 5] = array[10] = array[15] = w;
  array[ 1] = array[ 2] = array[ 3] = array[ 4] =
  array[ 6] = array[ 7] = array[ 8] = array[ 9] =
  array[11] = 0.0f;

  return *this;
}

/*
** 変換行列：拡大縮小変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadScale(GLfloat x, GLfloat y, GLfloat z, GLfloat w)
{
  array[ 0] = x;
  array[ 5] = y;
  array[10] = z;
  array[15] = w;
  array[ 1] = array[ 2] = array[ 3] = array[ 4] =
  array[ 6] = array[ 7] = array[ 8] = array[ 9] =
  array[11] = array[12] = array[13] = array[14] = 0.0f;

  return *this;
}

/*
** 変換行列：x 軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotateX(GLfloat a)
{
  const GLfloat c(cos(a));
  const GLfloat s(sin(a));

  array[ 0] = 1.0f; array[ 1] = 0.0f; array[ 2] = 0.0f; array[ 3] = 0.0f;
  array[ 4] = 0.0f; array[ 5] = c;    array[ 6] = s;    array[ 7] = 0.0f;
  array[ 8] = 0.0f; array[ 9] = -s;   array[10] = c;    array[11] = 0.0f;
  array[12] = 0.0f; array[13] = 0.0f; array[14] = 0.0f; array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：y 軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotateY(GLfloat a)
{
  const GLfloat c(cos(a));
  const GLfloat s(sin(a));

  array[ 0] = c;    array[ 1] = 0.0f; array[ 2] = -s;   array[ 3] = 0.0f;
  array[ 4] = 0.0f; array[ 5] = 1.0f; array[ 6] = 0.0f; array[ 7] = 0.0f;
  array[ 8] = s;    array[ 9] = 0.0f; array[10] = c;    array[11] = 0.0f;
  array[12] = 0.0f; array[13] = 0.0f; array[14] = 0.0f; array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：z 軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotateZ(GLfloat a)
{
  const GLfloat c(cos(a));
  const GLfloat s(sin(a));

  array[ 0] = c;    array[ 1] = s;    array[ 2] = 0.0f; array[ 3] = 0.0f;
  array[ 4] = -s;   array[ 5] = c;    array[ 6] = 0.0f; array[ 7] = 0.0f;
  array[ 8] = 0.0f; array[ 9] = 0.0f; array[10] = 1.0f; array[11] = 0.0f;
  array[12] = 0.0f; array[13] = 0.0f; array[14] = 0.0f; array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：任意軸中心の回転変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
{
  const GLfloat d(sqrt(x * x + y * y + z * z));

  if (d > 0.0f)
  {
    GLfloat l  = x / d, m  = y / d, n  = z / d;
    GLfloat l2 = l * l, m2 = m * m, n2 = n * n;
    GLfloat lm = l * m, mn = m * n, nl = n * l;
    GLfloat c = cos(a), c1 = 1.0f - c;
    GLfloat s = sin(a);

    array[ 0] = (1.0f - l2) * c + l2;
    array[ 1] = lm * c1 + n * s;
    array[ 2] = nl * c1 - m * s;
    array[ 3] = 0.0f;

    array[ 4] = lm * c1 - n * s;
    array[ 5] = (1.0f - m2) * c + m2;
    array[ 6] = mn * c1 + l * s;
    array[ 7] = 0.0f;

    array[ 8] = nl * c1 + m * s;
    array[ 9] = mn * c1 - l * s;
    array[10] = (1.0f - n2) * c + n2;
    array[11] = 0.0f;

    array[12] = 0.0f;
    array[13] = 0.0f;
    array[14] = 0.0f;
    array[15] = 1.0f;
  }

  return *this;
}

/*
** 変換行列：転置行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadTranspose(const GLfloat *marray)
{
  array[ 0] = marray[ 0];
  array[ 1] = marray[ 4];
  array[ 2] = marray[ 8];
  array[ 3] = marray[12];
  array[ 4] = marray[ 1];
  array[ 5] = marray[ 5];
  array[ 6] = marray[ 9];
  array[ 7] = marray[13];
  array[ 8] = marray[ 2];
  array[ 9] = marray[ 6];
  array[10] = marray[10];
  array[11] = marray[14];
  array[12] = marray[ 3];
  array[13] = marray[ 7];
  array[14] = marray[11];
  array[15] = marray[15];

  return *this;
}

/*
** 変換行列：逆行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadInvert(const GLfloat *marray)
{
  GLfloat lu[20], *plu[4];

  // j 行の要素の値の絶対値の最大値を plu[j][4] に求める
  for (int j = 0; j < 4; ++j)
  {
    GLfloat max(fabs(*(plu[j] = lu + 5 * j) = *(marray++)));

    for (int i = 0; ++i < 4;)
    {
      GLfloat a(fabs(plu[j][i] = *(marray++)));
      if (a > max) max = a;
    }
    if (max == 0.0f) return *this;
    plu[j][4] = 1.0f / max;
  }

  // ピボットを考慮した LU 分解
  for (int j = 0; j < 4; ++j)
  {
    GLfloat max(fabs(plu[j][j] * plu[j][4]));
    int i = j;

    for (int k = j; ++k < 4;)
    {
      GLfloat a(fabs(plu[k][j] * plu[k][4]));
      if (a > max)
      {
        max = a;
        i = k;
      }
    }
    if (i > j)
    {
      GLfloat *t(plu[j]);
      plu[j] = plu[i];
      plu[i] = t;
    }
    if (plu[j][j] == 0.0f) return *this;
    for (int k = j; ++k < 4;)
    {
      plu[k][j] /= plu[j][j];
      for (int i = j; ++i < 4;)
      {
        plu[k][i] -= plu[j][i] * plu[k][j];
      }
    }
  }

  // LU 分解から逆行列を求める
  for (int k = 0; k < 4; ++k)
  {
    // array に単位行列を設定する
    for (int i = 0; i < 4; ++i)
    {
      array[i * 4 + k] = (plu[i] == lu + k * 5) ? 1.0f : 0.0f;
    }
    // lu から逆行列を求める
    for (int i = 0; i < 4; ++i)
    {
      for (int j = i; ++j < 4;)
      {
        array[j * 4 + k] -= array[i * 4 + k] * plu[j][i];
      }
    }
    for (int i = 4; --i >= 0;)
    {
      for (int j = i; ++j < 4;)
      {
        array[i * 4 + k] -= plu[i][j] * array[j * 4 + k];
      }
      array[i * 4 + k] /= plu[i][i];
    }
  }

  return *this;
}

/*
** 変換行列：法線変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadNormal(const GLfloat *marray)
{
  array[ 0] = marray[ 5] * marray[10] - marray[ 6] * marray[ 9];
  array[ 1] = marray[ 6] * marray[ 8] - marray[ 4] * marray[10];
  array[ 2] = marray[ 4] * marray[ 9] - marray[ 5] * marray[ 8];
  array[ 4] = marray[ 9] * marray[ 2] - marray[10] * marray[ 1];
  array[ 5] = marray[10] * marray[ 0] - marray[ 8] * marray[ 2];
  array[ 6] = marray[ 8] * marray[ 1] - marray[ 9] * marray[ 0];
  array[ 8] = marray[ 1] * marray[ 6] - marray[ 2] * marray[ 5];
  array[ 9] = marray[ 2] * marray[ 4] - marray[ 0] * marray[ 6];
  array[10] = marray[ 0] * marray[ 5] - marray[ 1] * marray[ 4];
  array[ 3] = array[ 7] = array[11] = array[12] = array[13] = array[14] = 0.0f;
  array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：ビュー変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadLookat(GLfloat ex, GLfloat ey, GLfloat ez,
  GLfloat tx, GLfloat ty, GLfloat tz,
  GLfloat ux, GLfloat uy, GLfloat uz)
{
  // z 軸 = e - t
  GLfloat zx = ex - tx;
  GLfloat zy = ey - ty;
  GLfloat zz = ez - tz;
  const GLfloat zl = sqrt(zx * zx + zy * zy + zz * zz);
  if (zl == 0.0f) return *this;

  // z 軸の正規化
  zx /= zl;
  zy /= zl;
  zz /= zl;

  // x 軸 = u x z 軸
  GLfloat xx = uy * zz - uz * zy;
  GLfloat xy = uz * zx - ux * zz;
  GLfloat xz = ux * zy - uy * zx;
  const GLfloat xl = sqrt(xx * xx + xy * xy + xz * xz);
  if (xl == 0.0f) return *this;

  // x 軸の正規化
  xx /= xl;
  xy /= xl;
  xz /= xl;

  // z 軸
  array[ 2] = zx;
  array[ 6] = zy;
  array[10] = zz;

  // x 軸
  array[ 0] = xx;
  array[ 4] = xy;
  array[ 8] = xz;

  // y 軸 = z 軸 x x 軸
  array[ 1] = zy * xz - zz * xy;
  array[ 5] = zz * xx - zx * xz;
  array[ 9] = zx * xy - zy * xx;

  // 平行移動
  array[12] = -(ex * array[ 0] + ey * array[ 4] + ez * array[ 8]);
  array[13] = -(ex * array[ 1] + ey * array[ 5] + ez * array[ 9]);
  array[14] = -(ex * array[ 2] + ey * array[ 6] + ez * array[10]);

  // 残り
  array[3] = array[7] = array[11] = 0.0f;
  array[15] = 1.0f;

  return *this;
}

/*
** 変換行列：平行投影変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadOrthogonal(GLfloat left, GLfloat right,
  GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  const GLfloat dx(right - left);
  const GLfloat dy(top - bottom);
  const GLfloat dz(zFar - zNear);

  if (dx != 0.0f && dy != 0.0f && dz != 0.0f)
  {
    array[ 0] = 2.0f / dx;
    array[ 5] = 2.0f / dy;
    array[10] = -2.0f / dz;
    array[12] = -(right + left) / dx;
    array[13] = -(top + bottom) / dy;
    array[14] = -(zFar + zNear) / dz;
    array[15] = 1.0f;
    array[ 1] = array[ 2] = array[ 3] = array[ 4] =
    array[ 6] = array[ 7] = array[ 8] = array[ 9] =
    array[11] = 0.0f;
  }

  return *this;
}

/*
** 変換行列：透視投影変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadFrustum(GLfloat left, GLfloat right,
  GLfloat bottom, GLfloat top, GLfloat zNear, GLfloat zFar)
{
  const GLfloat dx(right - left);
  const GLfloat dy(top - bottom);
  const GLfloat dz(zFar - zNear);

  if (dx != 0.0f && dy != 0.0f && dz != 0.0f)
  {
    array[ 0] = 2.0f * zNear / dx;
    array[ 5] = 2.0f * zNear / dy;
    array[ 8] = (right + left) / dx;
    array[ 9] = (top + bottom) / dy;
    array[10] = -(zFar + zNear) / dz;
    array[11] = -1.0f;
    array[14] = -2.0f * zFar * zNear / dz;
    array[ 1] = array[ 2] = array[ 3] = array[ 4] =
    array[ 6] = array[ 7] = array[12] = array[13] =
    array[15] = 0.0f;
  }

  return *this;
}

/*
** 変換行列：画角から透視投影変換行列を設定する
*/
gg::GgMatrix &gg::GgMatrix::loadPerspective(GLfloat fovy, GLfloat aspect,
  GLfloat zNear, GLfloat zFar)
{
  const GLfloat dz(zFar - zNear);

  if (dz != 0.0f)
  {
    array[ 5] = 1.0f / tan(fovy * 0.5f);
    array[ 0] = array[5] / aspect;
    array[10] = -(zFar + zNear) / dz;
    array[11] = -1.0f;
    array[14] = -2.0f * zFar * zNear / dz;
    array[ 1] = array[ 2] = array[ 3] = array[ 4] =
    array[ 6] = array[ 7] = array[ 8] = array[ 9] =
    array[12] = array[13] = array[15] = 0.0f;
  }

  return *this;
}

/*
** 四元数：四元数 p, q の積を r に求める
*/
void gg::GgQuaternion::multiply(GLfloat *r, const GLfloat *p, const GLfloat *q) const
{
  r[0] = p[1] * q[2] - p[2] * q[1] + p[0] * q[3] + p[3] * q[0];
  r[1] = p[2] * q[0] - p[0] * q[2] + p[1] * q[3] + p[3] * q[1];
  r[2] = p[0] * q[1] - p[1] * q[0] + p[2] * q[3] + p[3] * q[2];
  r[3] = p[3] * q[3] - p[0] * q[0] - p[1] * q[1] - p[2] * q[2];
}

/*
** 四元数：四元数 q が表す変換行列を m に求める
*/
void gg::GgQuaternion::toMatrix(GLfloat *m, const GLfloat *q) const
{
  const GLfloat xx(q[0] * q[0] * 2.0f);
  const GLfloat yy(q[1] * q[1] * 2.0f);
  const GLfloat zz(q[2] * q[2] * 2.0f);
  const GLfloat xy(q[0] * q[1] * 2.0f);
  const GLfloat yz(q[1] * q[2] * 2.0f);
  const GLfloat zx(q[2] * q[0] * 2.0f);
  const GLfloat xw(q[0] * q[3] * 2.0f);
  const GLfloat yw(q[1] * q[3] * 2.0f);
  const GLfloat zw(q[2] * q[3] * 2.0f);

  m[ 0] = 1.0f - yy - zz;
  m[ 1] = xy + zw;
  m[ 2] = zx - yw;
  m[ 4] = xy - zw;
  m[ 5] = 1.0f - zz - xx;
  m[ 6] = yz + xw;
  m[ 8] = zx + yw;
  m[ 9] = yz - xw;
  m[10] = 1.0f - xx - yy;
  m[ 3] = m[ 7] = m[11] = m[12] = m[13] = m[14] = 0.0f;
  m[15] = 1.0f;
}

/*
** 四元数：回転変換行列 a が表す四元数を q に求める
*/
void gg::GgQuaternion::toQuaternion(GLfloat *q, const GLfloat *a) const
{
  const GLfloat tr(a[0] + a[5] + a[10] + a[15]);

  if (tr > 0.0f)
  {
    q[3] = sqrt(tr) * 0.5f;
    q[0] = (a[6] - a[9]) * 0.25f / q[3];
    q[1] = (a[8] - a[2]) * 0.25f / q[3];
    q[2] = (a[1] - a[4]) * 0.25f / q[3];
  }
}

/*
** 四元数：球面線形補間 p に q と r を t で補間した四元数を求める
*/
void gg::GgQuaternion::slerp(GLfloat *p, const GLfloat *q, const GLfloat *r, GLfloat t) const
{
  const GLfloat qr(q[0] * r[0] + q[1] * r[1] + q[2] * r[2] + q[3] * r[3]);
  const GLfloat ss(1.0f - qr * qr);

  if (ss == 0.0f)
  {
    if (p != q)
    {
      p[0] = q[0];
      p[1] = q[1];
      p[2] = q[2];
      p[3] = q[3];
    }
  }
  else
  {
    const GLfloat sp(sqrt(ss));
    const GLfloat ph(acos(qr));
    const GLfloat pt(ph * t);
    const GLfloat t1(sin(pt) / sp);
    const GLfloat t0(sin(ph - pt) / sp);

    p[0] = q[0] * t0 + r[0] * t1;
    p[1] = q[1] * t0 + r[1] * t1;
    p[2] = q[2] * t0 + r[2] * t1;
    p[3] = q[3] * t0 + r[3] * t1;
  }
}

/*
** 四元数：(x, y, z) を軸とし角度 a 回転する四元数を求める
*/
gg::GgQuaternion &gg::GgQuaternion::loadRotate(GLfloat x, GLfloat y, GLfloat z, GLfloat a)
{
  GLfloat l(x * x + y * y + z * z);

  if (l != 0.0)
  {
    GLfloat s(sin(a *= 0.5f) / sqrt(l));

    array[0] = x * s;
    array[1] = y * s;
    array[2] = z * s;
  }
  else
  {
    array[0] = array[1] = array[2] = 0.0f;
  }
  array[3] = cos(a);

  return *this;
}

/*
** 四元数：オイラー角 (heading, pitch, roll) にもとづいて四元数を求める
*/
gg::GgQuaternion &gg::GgQuaternion::loadEuler(GLfloat heading, GLfloat pitch, GLfloat roll)
{
  return loadRotate(-sin(heading) * cos(pitch), sin(pitch), cos(heading) * cos(pitch), roll);
}

/*
** 四元数：正規化して格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadNormalize(const GgQuaternion &q)
{
  // ノルムを求める
  const GLfloat l(q.norm());

  // ノルムで各要素を割る
  if (l > 0.0f)
  {
    array[0] = q.array[0] / l;
    array[1] = q.array[1] / l;
    array[2] = q.array[2] / l;
    array[3] = q.array[3] / l;
  }

  return *this;
}

/*
** 四元数：共役四元数を格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadConjugate(const GgQuaternion &q)
{
  // 軸ベクトルを反転する
  array[0] = -q.array[0];
  array[0] = -q.array[1];
  array[0] = -q.array[2];

  return *this;
}

/*
** 四元数：逆元を格納する
*/
gg::GgQuaternion &gg::GgQuaternion::loadInvert(const GgQuaternion &q)
{
  // ノルムの二乗を求める
  const GLfloat l(q.array[0] * q.array[0] + q.array[1] * q.array[1] + q.array[2] * q.array[2] + q.array[3] * q.array[3]);

  // 共役四元数を求める
  GgQuaternion r;
  r.loadConjugate(q);

  // ノルムの二乗で割る
  if (l > 0.0f)
  {
    array[0] = r.array[0] / l;
    array[1] = r.array[1] / l;
    array[2] = r.array[2] / l;
    array[3] = r.array[3] / l;
  }

  return *this;
}

/*
** 四元数：ノルム
*/
GLfloat gg::GgQuaternion::norm() const
{
  return sqrt(array[0] * array[0] + array[1] * array[1] + array[2] * array[2] + array[3] * array[3]);
}

/*
** 簡易トラックボール処理：リセット
*/
void gg::GgTrackball::reset()
{
  // ドラッグ中ではない
  drag = false;

  // 単位クォーターニオンで初期化する
  cq.loadIdentity();

  // 回転行列を初期化する
  cq.getMatrix(rt);
}

/*
** 簡易トラックボール処理：トラックボールする領域の設定
**
**   Reshape コールバック (resize) の中で実行する
**   (w, h): ウィンドウサイズ
*/
void gg::GgTrackball::region(int w, int h)
{
  // マウスポインタ位置のウィンドウ内の相対的位置への換算用
  sx = 1.0f / float(w);
  sy = 1.0f / float(h);
}

/*
** 簡易トラックボール処理：ドラッグ開始時の処理
**
**   マウスボタンを押したときに実行する
**   (x, y): 現在のマウス位置
*/
void gg::GgTrackball::start(float x, float y)
{
  // ドラッグ開始
  drag = true;

  // ドラッグ開始点を記録する
  cx = x;
  cy = y;
}

/*
** 簡易トラックボール処理：ドラッグ中の処理
**
**   マウスのドラッグ中に実行する
**   (x, y): 現在のマウス位置
*/
void gg::GgTrackball::motion(float x, float y)
{
  if (drag)
  {
    // マウスポインタの位置のドラッグ開始位置からの変位
    const float dx((x - cx) * sx);
    const float dy((y - cy) * sy);

    // マウスポインタの位置のドラッグ開始位置からの距離
    const float a(sqrt(dx * dx + dy * dy));

    if (a != 0.0)
    {
      // 現在の回転の四元数に作った四元数を掛けて合成する
      tq = ggRotateQuaternion(dy, dx, 0.0f, a * 6.283185f) * cq;

      // 合成した四元数から回転の変換行列を求める
      tq.getMatrix(rt);
    }
  }
}

/*
** 簡易トラックボール処理：停止時の処理
**
**   マウスボタンを離したときに実行する
**   (x, y): 現在のマウス位置
*/
void gg::GgTrackball::stop(float x, float y)
{
  // ドラッグ終了点における回転を求める
  motion(x, y);

  // 現在の回転を表す四元数を正規化して保存する
  cq = tq.normalize();

  // ドラッグ終了
  drag = false;
}

/*
** 簡易トラックボール処理：回転角の修正
**
**   現在の回転角を修正する
**   q: 修正分の回転角を表す四元数
*/
void gg::GgTrackball::rotate(const GgQuaternion &q)
{
  // 現在の回転の四元数に修正分の四元数を掛けて合成する
  tq = q * cq;

  // 誤差を吸収するために正規化しておく
  cq = tq.normalize();

  // 合成した四元数から回転の変換行列を求める
  cq.getMatrix(rt);
}

/*
** ポイント：描画
*/
void gg::GgPoints::draw(GLint first, GLsizei count) const
{
  // 頂点配列オブジェクトを指定する
  use();

  // 図形を描画する
  glDrawArrays(getMode(), first, count > 0 ? count : pnum() - first);
}

/*
** オブジェクト：描画
*/
void gg::GgElements::draw(GLint first, GLsizei count) const
{
  // 頂点配列オブジェクトを指定する
  use();

  // 図形を描画する
  glDrawElements(getMode(), (count > 0 ? count : fnum() - first) * 3,
    GL_UNSIGNED_INT, static_cast<GLuint (*)[3]>(0) + first);
}

/*!
** \brief 点群を立方体状に生成する.
**
**    \param nv 生成する点の数.
**    \param cx 点群の中心の x 座標.
**    \param cy 点群の中心の y 座標.
**    \param cz 点群の中心の z 座標.
**    \param length 点群を生成する立方体の一辺の長さ.
*/
gg::GgPoints *gg::ggPointsCube(GLuint nv, GLfloat length, GLfloat cx, GLfloat cy, GLfloat cz)
{
  // メモリを確保する
  GLfloat (*pos)[3](new(std::nothrow) GLfloat[nv][3]);

  // メモリが確保できなければ戻る
  if (pos == nullptr) return nullptr;

  // 点を生成する
  for (GLuint v = 0; v < nv; ++v)
  {
    pos[v][0] = (float(rand()) / float(RAND_MAX) - 0.5f) * length + cx;
    pos[v][1] = (float(rand()) / float(RAND_MAX) - 0.5f) * length + cy;
    pos[v][2] = (float(rand()) / float(RAND_MAX) - 0.5f) * length + cz;
  }

  // ポイントデータの GgPoints オブジェクトを作成する
  GgPoints *const points(new GgPoints(nv, pos, GL_POINTS));

  // 作業用のメモリを解放する
  delete[] pos;

  // GgPoints オブジェクトを返す
  return points;
}

/*!
** \brief 点群を球状に生成する.
**
**    \param nv 生成する点の数.
**    \param cx 点群の中心の x 座標.
**    \param cy 点群の中心の y 座標.
**    \param cz 点群の中心の z 座標.
**    \param radius 点群を生成する半径.
*/
gg::GgPoints *gg::ggPointsSphere(GLuint nv, GLfloat radius,
  GLfloat cx, GLfloat cy, GLfloat cz)
{
  // メモリを確保する
  GLfloat (*pos)[3](new(std::nothrow) GLfloat[nv][3]);

  // メモリが確保できなければ戻る
  if (pos == nullptr) return nullptr;

  // 点を生成する
  for (GLuint v = 0; v < nv; ++v)
  {
    const float r(radius * float(rand()) / float(RAND_MAX));
    const float t(6.2831853f * float(rand()) / (float(RAND_MAX) + 1.0f));
    const float cp(2.0f * float(rand()) / float(RAND_MAX) - 1.0f);
    const float sp(sqrt(1.0f - cp * cp));
    const float ct(cos(t));
    const float st(sin(t));

    pos[v][0] = r * sp * ct + cx;
    pos[v][1] = r * sp * st + cy;
    pos[v][2] = r * cp + cz;
  }

  // ポイントデータの GgPoints オブジェクトを作成する
  GgPoints *const points(new GgPoints(nv, pos, GL_POINTS));

  // 作業用のメモリを解放する
  delete[] pos;

  // GgPoints オブジェクトを返す
  return points;
}

/*!
** \brief 矩形状に 2 枚の三角形を生成する.
**
**   \param width 矩形の幅.
**   \param height 矩形の高さ.
*/
gg::GgTriangles *gg::ggRectangle(GLfloat width, GLfloat height)
{
  // 基準となる形状
  static const GLfloat p[][2] =
  {
    { -0.5f, -0.5f },
    {  0.5f, -0.5f },
    {  0.5f,  0.5f },
    { -0.5f,  0.5f },
  };

  // 作業用のメモリ
  GLfloat pos[4][3];
  GLfloat norm[4][3];

  // 頂点位置と法線ベクトルを求める
  for (int v = 0; v < 4; ++v)
  {
    pos[v][0] = p[v][0] * width;
    pos[v][1] = p[v][1] * height;
    pos[v][2] = 0.0f;

    norm[v][0] = 0.0f;
    norm[v][1] = 0.0f;
    norm[v][2] = 1.0f;
  }

  // 矩形の GgTrianges オブジェクトを作成する
  return new GgTriangles(4, pos, norm, GL_TRIANGLE_FAN);
}

/*!
** \brief 楕円状に三角形を生成する.
**
**   \param width 楕円の幅.
**   \param height 楕円の高さ.
**   \param slices 楕円の分割数.
*/
gg::GgTriangles *gg::ggEllipse(GLfloat width, GLfloat height, GLuint slices)
{
  // 作業用のメモリ
  std::vector<GLfloat> pos, norm;

  // 頂点位置と法線ベクトルを求める
  for (GLuint v = 0; v < slices; ++v)
  {
    const float t(6.2831853f * float(v) / float(slices));

    pos.push_back(cos(t) * width * 0.5f);
    pos.push_back(sin(t) * height * 0.5f);
    pos.push_back(0.0f);

    norm.push_back(0.0f);
    norm.push_back(0.0f);
    norm.push_back(1.0f);
  }

  // GgTriangles オブジェクトを作成する
  return new GgTriangles(slices, reinterpret_cast<GLfloat (*)[3]>(&pos[0]),
    reinterpret_cast<GLfloat (*)[3]>(&norm[0]), GL_TRIANGLE_FAN);
}

/*!
** \brief Wavefront OBJ ファイルを読み込む (Arrays 形式).
**
**   三角形分割された Wavefront OBJ ファイルを読み込んで
**   GgArrays 形式の三角形データを生成する.
**
**   \param name ファイル名.
**   \param normalize true なら大きさを正規化.
*/
gg::GgTriangles *gg::ggArraysObj(const char *name, bool normalize)
{
  GLuint ng, nv;
  GLuint (*group)[2];
  GLfloat (*amb)[4], (*diff)[4], (*spec)[4], *shi;
  GLfloat (*pos)[3], (*norm)[3];

  // ファイルを読み込む
  if (!ggLoadObj(name, ng, group, amb, diff, spec, shi, nv, pos, norm, normalize)) return 0;

  // GgTriangles オブジェクトを作成する
  GgTriangles *const obj(new GgTriangles(nv, pos, norm, GL_TRIANGLES));

  // 作業用に使ったメモリを解放する
  delete[] group;
  delete[] amb;
  delete[] diff;
  delete[] spec;
  delete[] shi;
  delete[] pos;
  delete[] norm;

  // GgTriangles オブジェクトを返す
  return obj;
}

/*!
** \brief Wavefront OBJ ファイル を読み込む (Elements 形式).
**
**   三角形分割された Wavefront OBJ ファイル を読み込んで
**   GgElements 形式の三角形データを生成する.
**
**   \param name ファイル名.
**   \param normalize true なら大きさを正規化.
*/
gg::GgElements *gg::ggElementsObj(const char *name, bool normalize)
{
  GLuint nv, nf;
  GLfloat (*pos)[3], (*norm)[3];
  GLuint (*face)[3];

  // ファイルを読み込む
  if (!ggLoadObj(name, nv, pos, norm, nf, face, normalize)) return 0;

  // GgElements オブジェクトを作成する
  GgElements *const obj(new GgElements(nv, pos, norm, nf, face, GL_TRIANGLES));

  // 作業用に使ったメモリを解放する
  delete[] pos;
  delete[] norm;
  delete[] face;

  // GgElement オブジェクトを返す
  return obj;
}

/*!
** \brief メッシュ形状を作成する (Elements 形式).
**
**   メッシュ状に GgElements 形式の三角形データを生成する.
**
**   \param slices メッシュの横方向の分割数.
**   \param stacks メッシュの縦方向の分割数.
**   \param pos メッシュの頂点の位置.
**   \param norm メッシュの頂点の法線ベクトル.
*/
gg::GgElements *gg::ggElementsMesh(int slices, int stacks, const GLfloat (*pos)[3], const GLfloat (*norm)[3])
{
  // 頂点の法線ベクトル
  std::vector<GLfloat> tnorm;

  // 頂点の法線ベクトルの初期設定
  if (norm == nullptr)
  {
    // 頂点の法線ベクトルを求める
    for (int j = 0; j <= stacks; ++j)
    {
      for (int i = 0; i <= slices; ++i)
      {
        // 処理対象の頂点番号
        const int k = j * (slices + 1) + i;

        // 処理対象の頂点の周囲の頂点番号
        const int kim = i > 0 ? k - 1 : k;
        const int kip = i < slices ? k + 1 : k;
        const int kjm = j > 0 ? k - slices - 1 : k;
        const int kjp = j < stacks ? k + slices + 1 : k;

        // 接線ベクトル
        const GLfloat t[] =
        {
          pos[kip][0] - pos[kim][0],
          pos[kip][1] - pos[kim][1],
          pos[kip][2] - pos[kim][2]
        };

        // 従接線ベクトル
        const GLfloat b[] =
        {
          pos[kjp][0] - pos[kjm][0],
          pos[kjp][1] - pos[kjm][1],
          pos[kjp][2] - pos[kjm][2]
        };

        // 法線ベクトル
        const GLfloat n[] =
        {
          t[1] * b[2] - t[2] * b[1],
          t[2] * b[0] - t[0] * b[2],
          t[0] * b[1] - t[1] * b[0]
        };

        // 法線ベクトルの正規化
        const GLfloat l = n[0] * n[0] + n[1] * n[1] + n[2] * n[2];
        if (l > 0.0f)
        {
          tnorm.push_back(n[0] / l);
          tnorm.push_back(n[1] / l);
          tnorm.push_back(n[2] / l);
        }
        else{
          tnorm.push_back(0.0f);
          tnorm.push_back(0.0f);
          tnorm.push_back(0.0f);
        }
      }
    }

    norm = reinterpret_cast<GLfloat (*)[3]>(&tnorm[0]);
  }

  // 頂点のインデックス (面データ)
  std::vector<GLuint> f;

  // 頂点のインデックスを求める
  for (int j = 0; j < stacks; ++j)
  {
    for (int i = 0; i < slices; ++i)
    {
      const int k((slices + 1) * j + i);

      // 上半分の三角形
      f.push_back(k);
      f.push_back(k + slices + 2);
      f.push_back(k + 1);

      // 下半分の三角形
      f.push_back(k);
      f.push_back(k + slices + 1);
      f.push_back(k + slices + 2);
    }
  }

  // GgElements オブジェクトを作成する
  return new GgElements((slices + 1) * (stacks + 1), pos, norm,
    f.size() / 3, reinterpret_cast<GLuint (*)[3]>(&f[0]), GL_TRIANGLES);
}

/*!
** \brief 球状に三角形データを生成する (Elements 形式).
**
**   球状に GgElements 形式の三角形データを生成する.
**
**   \param radius 球の半径.
**   \param slices 球の経度方向の分割数.
**   \param stacks 球の緯度方向の分割数.
*/
gg::GgElements *gg::ggElementsSphere(GLfloat radius, int slices, int stacks)
{
  // 頂点の位置と法線ベクトル
  std::vector<GLfloat> p, n;

  // 頂点の位置と法線ベクトルを求める
  for (int j = 0; j <= stacks; ++j)
  {
    const float t(float(j) / float(stacks));
    const float ph(3.141593f * t);
    const float y(cosf(ph));
    const float r(sinf(ph));

    for (int i = 0; i <= slices; ++i)
    {
      const float s(float(i) / float(slices));
      const float th(-2.0f * 3.141593f * s);
      const float x(r * cosf(th));
      const float z(r * sinf(th));

      // 頂点の座標値
      p.push_back(x * radius);
      p.push_back(y * radius);
      p.push_back(z * radius);

      // 頂点の法線ベクトル
      n.push_back(x);
      n.push_back(y);
      n.push_back(z);
    }
  }

  // オブジェクトの作成
  return ggElementsMesh(slices, stacks, reinterpret_cast<GLfloat (*)[3]>(&p[0]),
    reinterpret_cast<GLfloat (*)[3]>(&n[0]));
}

/*
** 三角形に単純な陰影付けを行うシェーダ
*/
gg::GgSimpleShader::GgSimpleShader(const char *vert, const char *frag,
  const char *geom, GLint nvarying, const char **varyings)
  : GgPointShader(vert, frag, geom, nvarying, varyings)
{
  // プログラム名
  GLuint program(get());

  // 光源のパラメータの uniform 変数の場所
  loc.pl    = glGetUniformLocation(program, "pl");
  loc.lamb  = glGetUniformLocation(program, "lamb");
  loc.ldiff = glGetUniformLocation(program, "ldiff");
  loc.lspec = glGetUniformLocation(program, "lspec");

  // 材質のパラメータの uniform 変数の場所
  loc.kamb  = glGetUniformLocation(program, "kamb");
  loc.kdiff = glGetUniformLocation(program, "kdiff");
  loc.kspec = glGetUniformLocation(program, "kspec");
  loc.kshi  = glGetUniformLocation(program, "kshi");

  // 変換行列の uniform 変数の場所
  loc.mg = glGetUniformLocation(program, "mg");
}

/*
** Wavefront OBJ 形式のデータ：デストラクタ
*/
gg::GgObj::~GgObj()
{
  delete[] group;
  delete[] amb;
  delete[] diff;
  delete[] spec;
  delete[] shi;
  delete[] data;
}

/*
** Wavefront OBJ 形式のデータ：コンストラクタ
*/
gg::GgObj::GgObj(const char *name, bool normalize)
{
  GLuint nv;
  GLfloat (*pos)[3], (*norm)[3];

  // ファイルを読み込む
  if (ggLoadObj(name, ng, group, amb, diff, spec, shi, nv, pos, norm, normalize))
  {
    // 頂点バッファオブジェクトを作成する
    data = new GgTriangles(nv, pos, norm);

    // 作業用に確保したメモリを解放する
    delete[] pos;
    delete[] norm;
  }
}

/*
** Wavefront OBJ 形式のデータ：図形の描画
*/
void gg::GgObj::draw(GLint first, GLsizei count) const
{
  // シェーダの選択
  shader->use();

  // 描画するグループの数
  if (count <= 0) count = ng - first;

  for (int g = first; g < count; ++g)
  {
    // 材質を設定する
    shader->setMaterialAmbient(amb[g]);
    shader->setMaterialDiffuse(diff[g]);
    shader->setMaterialSpecular(spec[g]);
    shader->setMaterialShininess(shi[g]);

    // 図形を描画する
    data->draw(group[g][0], group[g][1]);
  }
}
